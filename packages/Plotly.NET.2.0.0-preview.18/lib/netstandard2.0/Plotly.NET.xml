<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Plotly.NET</name></assembly>
<members>
<member name="M:InternalUtils.ChartIO.openOsSpecificFile(System.String)">
<summary>
Choose process to open plots with depending on OS. Thanks to @zyzhu for hinting at a solution (https://github.com/plotly/Plotly.NET/issues/31)
</summary>
</member>
<member name="M:InternalUtils.Seq.unzip3``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
<summary>
 Splits a sequence of triples into three sequences
</summary>
</member>
<member name="M:InternalUtils.Seq.unzip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
<summary>
 Splits a sequence of pairs into two sequences
</summary>
</member>
<member name="T:Plotly.NET.ColorKeyword">
<summary>
https://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords

W3C Recognized color keyword names
</summary>
</member>
<member name="P:Plotly.NET.Color.Value">
<summary>
 extractor
</summary>
</member>
<member name="M:Plotly.NET.Color.fromString(System.String)">
<summary>
 Color from a raw string input, no check for correctness performed
</summary>
</member>
<member name="M:Plotly.NET.Color.fromRGB(System.Int32,System.Int32,System.Int32)">
<summary>
 Creates a Color from the specified color values (red, green, and blue).
 The alpha value is implicitly 1. (fully opaque).
</summary>
</member>
<member name="M:Plotly.NET.Color.fromKeyword(Plotly.NET.ColorKeyword)">
<summary>
 Color from a standard web color keyword, e.g. White -&gt; &quot;white&quot; (see //https://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords)
</summary>
</member>
<member name="M:Plotly.NET.Color.fromHex(System.String)">
<summary>
 Color from web color (#FFFFFF) or hex representataion (FFFFFF) / (0xFFFFFF)
</summary>
</member>
<member name="M:Plotly.NET.Color.fromColors(System.Collections.Generic.IEnumerable{Plotly.NET.Color})">
<summary>
 Color
</summary>
</member>
<member name="M:Plotly.NET.Color.fromColorScaleValues``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Values are interpreted relative to color scale
</summary>
</member>
<member name="M:Plotly.NET.Color.fromARGB(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Creates a Color from the four ARGB component (alpha, red, green, and blue) values.
</summary>
</member>
<member name="T:Plotly.NET.Color">
<summary>
 Plotly color can be a single color, a sequence of colors, or a sequence of numeric values referencing the color of the colorscale obj
</summary>
</member>
<member name="P:Plotly.NET.ARGB.B">
<summary>
 The blue component value of this Color structure.
</summary>
</member>
<member name="P:Plotly.NET.ARGB.G">
<summary>
 The green component value of this Color structure.
</summary>
</member>
<member name="P:Plotly.NET.ARGB.R">
<summary>
 The red component value of this Color structure.
</summary>
</member>
<member name="P:Plotly.NET.ARGB.A">
<summary>
 The alpha component value of this Color structure.
</summary>
</member>
<member name="M:Plotly.NET.ARGB.toWebHex(Plotly.NET.ARGB)">
<summary>
 Gets the web color representataion (#FFFFFF)
</summary>
</member>
<member name="M:Plotly.NET.ARGB.toString(Plotly.NET.ARGB)">
<summary>
 Converts this Color structure to a human-readable string.
</summary>
</member>
<member name="M:Plotly.NET.ARGB.toHex(System.Boolean,Plotly.NET.ARGB)">
<summary>
 Gets the hex representataion (FFFFFF) of a color (with valid prefix &quot;0xFFFFFF&quot;)
</summary>
</member>
<member name="M:Plotly.NET.ARGB.fromWebHex(System.String)">
<summary>
 Gets color from web color (#FFFFFF)
</summary>
</member>
<member name="M:Plotly.NET.ARGB.fromRGB(System.Int32,System.Int32,System.Int32)">
<summary>
 Creates a Argb color from the specified color values (red, green, and blue).
 The alpha value is implicitly 255 (fully opaque).
</summary>
</member>
<member name="M:Plotly.NET.ARGB.fromHex(System.String)">
<summary>
 Gets color from hex representataion (FFFFFF) or (0xFFFFFF)
</summary>
</member>
<member name="M:Plotly.NET.ARGB.create(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Creates a Argb Color from the four ARGB component (alpha, red, green, and blue) values.
</summary>
</member>
<member name="T:Plotly.NET.ARGB">
<summary>
 Represents an ARGB (alpha, red, green, blue) color
</summary>
</member>
<member name="M:Plotly.NET.Font.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.FontFamily},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color})">
<summary>
 Init Font()
</summary>
</member>
<member name="T:Plotly.NET.Font">
<summary>
 Font type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.ColorBar.style``2(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelOverflow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Create a function that applies the given style parameters to a ColorBar object
 </summary>
 <param name="BGColor">Sets the color of padded area.</param>
 <param name="BorderColor">Sets the axis line color.</param>
 <param name="BorderWidth">Sets the width (in px) or the border enclosing this color bar.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="Len">Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</param>
 <param name="LenMode">Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="OutlineColor">Sets the axis line color.</param>
 <param name="OutlineWidth">Sets the width (in px) of the axis line.</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="Thickness">Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</param>
 <param name="ThicknessMode">Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&gt;f&lt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the color bar's tick label font</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="TickLabelOverflow">Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".</param>
 <param name="TickLabelPosition">Determines where tick labels are drawn.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Title">Sets the ColorBar title.</param>
 <param name="X">Sets the x position of the color bar (in plot fraction).</param>
 <param name="XAnchor">Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar.</param>
 <param name="XPad">Sets the amount of padding (in px) along the x direction.</param>
 <param name="Y">Sets the y position of the color bar (in plot fraction).</param>
 <param name="YAnchor">Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar.</param>
 <param name="YPad">Sets the amount of padding (in px) along the y direction.</param>
</member>
<member name="M:Plotly.NET.ColorBar.init``2(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelOverflow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Initializes a ColorBar object.
 </summary>
 <param name="BGColor">Sets the color of padded area.</param>
 <param name="BorderColor">Sets the axis line color.</param>
 <param name="BorderWidth">Sets the width (in px) or the border enclosing this color bar.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="Len">Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</param>
 <param name="LenMode">Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="OutlineColor">Sets the axis line color.</param>
 <param name="OutlineWidth">Sets the width (in px) of the axis line.</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="Thickness">Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</param>
 <param name="ThicknessMode">Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&gt;f&lt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the color bar's tick label font</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="TickLabelOverflow">Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".</param>
 <param name="TickLabelPosition">Determines where tick labels are drawn.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Title">Sets the ColorBar title.</param>
 <param name="X">Sets the x position of the color bar (in plot fraction).</param>
 <param name="XAnchor">Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar.</param>
 <param name="XPad">Sets the amount of padding (in px) along the x direction.</param>
 <param name="Y">Sets the y position of the color bar (in plot fraction).</param>
 <param name="YAnchor">Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar.</param>
 <param name="YPad">Sets the amount of padding (in px) along the y direction.</param>
</member>
<member name="T:Plotly.NET.ColorBar">
<summary>
 The ColorBar object to be used with ColorAxes.
</summary>
</member>
<member name="M:Plotly.NET.Line.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given styles to a Line object.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</param>
 <param name="Color">Sets the line color.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Colorscale">Sets the line colorscale</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="ShowScale">Wether or not to show the color bar</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="Dash">Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").</param>
 <param name="Shape">Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</param>
 <param name="Simplify">Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</param>
 <param name="Smoothing">Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).</param>
 <param name="Width">Sets the line width (in px).</param>
 <param name="MultiWidth">Sets the individual line width (in px).</param>
 <param name="OutlierColor">Sets the color of the outline of outliers</param>
 <param name="OutlierWidth">Sets the width of the outline of outliers</param>
</member>
<member name="M:Plotly.NET.Line.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a new Line object with the given styling.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</param>
 <param name="Color">Sets the line color.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Colorscale">Sets the line colorscale</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="ShowScale">Wether or not to show the color bar</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="Dash">Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").</param>
 <param name="Shape">Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</param>
 <param name="Simplify">Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</param>
 <param name="Smoothing">Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).</param>
 <param name="Width">Sets the line width (in px).</param>
 <param name="MultiWidth">Sets the individual line width (in px).</param>
 <param name="OutlierColor">Sets the color of the outline of outliers</param>
 <param name="OutlierWidth">Sets the width of the outline of outliers</param>
</member>
<member name="T:Plotly.NET.Line">
<summary>
 The line object determines the style of the line in various aspect of plots such as a line connecting datums, outline of layout objects, etc..
</summary>
</member>
<member name="M:Plotly.NET.Layout.updateTernaryById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Combines the given ternary object with the one already present on the layout.
 </summary>
 <param name="id">The target Ternary id</param>
 <param name="ternary">The updated Ternary object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateSmithById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Smith)">
 <summary>
 Combines the given Smith object with the one already present on the layout.
 </summary>
 <param name="id">The target smith id</param>
 <param name="smith">The updated smith object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateSceneById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Combines the given scene object with the one already present on the layout.
 </summary>
 <param name="id">The target scene id</param>
 <param name="scene">The updated scene object.</param>
</member>
<member name="M:Plotly.NET.Layout.updatePolarById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Polar)">
 <summary>
 Combines the given polar object with the one already present on the layout.
 </summary>
 <param name="id">The target polar id</param>
 <param name="polar">The updated polar object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateMapboxById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Mapbox)">
 <summary>
 Combines the given mapbox object with the one already present on the layout.
 </summary>
 <param name="id">The target mapbox id</param>
 <param name="mapbox">The updated mapbox object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateLinearAxisById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Combines the given axis object with the one already present on the layout.
 </summary>
 <param name="id">The target axis id</param>
 <param name="axis">The updated axis object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateLegend(Plotly.NET.LayoutObjects.Legend)">
 <summary>
 Combines the given Legend object with the one already present on the layout.
 </summary>
 <param name="legend">The updated Legend object</param>
</member>
<member name="M:Plotly.NET.Layout.updateLayoutGrid(Plotly.NET.LayoutObjects.LayoutGrid)">
 <summary>
 Combines the given layoutGrid object with the one already present on the layout.
 </summary>
 <param name="layoutGrid">The updated LayoutGrid object</param>
</member>
<member name="M:Plotly.NET.Layout.updateGeoById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Geo)">
 <summary>
 Combines the given geo object with the one already present on the layout.
 </summary>
 <param name="id">The target geo id</param>
 <param name="geo">The updated geo object.</param>
</member>
<member name="M:Plotly.NET.Layout.updateColorAxisById(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.ColorAxis)">
 <summary>
 Combines the given colorAxis object with the one already present on the layout.
 </summary>
 <param name="id">The target ColorAxis id</param>
 <param name="colorAxis">The updated ColorAxis object.</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetTypedMember``1(System.String,Plotly.NET.Layout)">
 <summary>
 Returns Some(dynamic member value) of the trace object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="layout">The layout to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetTernaryById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(Ternary) if there is a ColorAxis object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target Ternary id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetSmithById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(smith) if there is a smith object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">the target Smith id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetSceneById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(Scene) if there is a scene object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target scene id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetPolarById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(Polar) if there is a polar object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">he target polar id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetMapboxById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(Mapbox) if there is amapbox object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target mapbox id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetLinearAxisById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(LinearAxis) if there is an axis object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target axis id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetGeoById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(Geo) if there is a geo object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target geo id</param>
</member>
<member name="M:Plotly.NET.Layout.tryGetColorAxisById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns Some(ColorAxis) if there is a ColorAxis object set on the layout with the given id, and None otherwise.
 </summary>
 <param name="id">The target ColorAxis id</param>
</member>
<member name="M:Plotly.NET.Layout.style``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Legend},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Margin},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.UniformText},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.DefaultColorScales},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ModeBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ClickMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SelectDirection},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Transition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{DynamicObj.DynamicObj},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LayoutGrid},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Shape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ActiveShape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.WaterfallMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.FunnelMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Shape}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.LayoutImage}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Slider}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.UpdateMenu}})">
 <summary>
 Returns a function that applies the given styles to a Layout object.
 </summary>
 <param name="Title">Sets the title of the layout.</param>
 <param name="ShowLegend">Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.</param>
 <param name="Legend">Sets the legend styles of the layout.</param>
 <param name="Margin">Sets the margins around the layout.</param>
 <param name="AutoSize">Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.</param>
 <param name="Width">Sets the plot's width (in px).</param>
 <param name="Height">Sets the plot's height (in px).</param>
 <param name="Font">Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.</param>
 <param name="UniformText">Determines how the font size for various text elements are uniformed between each trace type.</param>
 <param name="Separators">Sets the decimal and thousand separators. For example, ". " puts a '.' before decimals and a space between thousands. In English locales, dflt is ".," but other locales may alter this default.</param>
 <param name="PaperBGColor">Sets the background color of the paper where the graph is drawn.</param>
 <param name="PlotBGColor">Sets the background color of the plotting area in-between x and y axes.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.</param>
 <param name="Colorscale">Sets the default colorscales that are used by plots using autocolorscale.</param>
 <param name="Colorway">Sets the default trace colors.</param>
 <param name="ModeBar">Sets the modebar of the layout.</param>
 <param name="HoverMode">Determines the mode of hover interactions. If "closest", a single hoverlabel will appear for the "closest" point within the `hoverdistance`. If "x" (or "y"), multiple hoverlabels will appear for multiple points at the "closest" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If "x unified" (or "y unified"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.</param>
 <param name="ClickMode">Determines the mode of single click interactions. "event" is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes "lasso" and "select", but with no event data attached (kept for compatibility reasons). The "select" flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. "select" with `hovermode`: "x" can be confusing, consider explicitly setting `hovermode`: "closest" when using this feature. Selection events are sent accordingly as long as "event" flag is set as well. When the "event" flag is missing, `plotly_click` and `plotly_selected` events are not fired.</param>
 <param name="DragMode">Determines the mode of drag interactions. "select" and "lasso" apply only to scatter traces with markers or text. "orbit" and "turntable" apply only to 3D scenes.</param>
 <param name="SelectDirection">When `dragmode` is set to "select", this limits the selection of the drag to horizontal, vertical or diagonal. "h" only allows horizontal selection, "v" only vertical, "d" only diagonal and "any" sets no limit.</param>
 <param name="HoverDistance">Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.</param>
 <param name="SpikeDistance">Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.</param>
 <param name="Hoverlabel">Sets the style ov hover labels.</param>
 <param name="Transition">Sets transition options used during Plotly.react updates.</param>
 <param name="DataRevision">If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.</param>
 <param name="UIRevision">Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision="time"` and `yaxis.uirevision="cost"`. Then if only the y data is changed, you can update `yaxis.uirevision="quantity"` and the y axis range will reset but the x axis range will retain any user-driven zoom.</param>
 <param name="EditRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="SelectRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="Template">Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace. Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.</param>
 <param name="Meta">Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.</param>
 <param name="Computed">Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in "full-json" mode.</param>
 <param name="Grid">Sets the layout grid for arranging multiple plots</param>
 <param name="Calendar">Sets the default calendar system to use for interpreting and displaying dates throughout the plot.</param>
 <param name="NewShape">Controls the behavior of newly drawn shapes</param>
 <param name="ActiveShape">Sets the styling of the active shape</param>
 <param name="HideSources">Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).</param>
 <param name="BarGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="BarNorm">Sets the normalization for bar traces on the graph. With "fraction", the value of each bar is divided by the sum of all values at that location coordinate. "percent" is the same but multiplied by 100 to show percentages.</param>
 <param name="ExtendPieColors">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="HiddenLabels">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="PieColorWay">Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.</param>
 <param name="BoxGap">Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have "width" set.</param>
 <param name="BoxGroupGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="BoxMode">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGroupGap">Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinMode">Determines how violins at the same location coordinate are displayed on the graph. If "group", the violins are plotted next to one another centered around the shared location. If "overlay", the violins are plotted over one another, you might need to set "opacity" to see them multiple violins. Has no effect on traces that have "width" set.</param>
 <param name="WaterfallGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="WaterfallGroupGap">Sets the gap (in plot fraction) between bars of the same location coordinate.</param>
 <param name="WaterfallMode">Determines how bars at the same location coordinate are displayed on the graph. With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="FunnelGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="ExtendFunnelAreaColors">If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="FunnelAreaColorWay">Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.</param>
 <param name="ExtendSunBurstColors">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="SunBurstColorWay">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="ExtendTreeMapColors">If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="TreeMapColorWay">Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.</param>
 <param name="ExtendIcicleColors">If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="IcicleColorWay">Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.</param>
 <param name="Annotations">A collection containing all Annotations of this layout. An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="Shapes">A collection containing all Shapes of this layout.</param>
 <param name="Images">A collection containing all Images of this layout. </param>
 <param name="Sliders">A collection containing all Sliders of this layout. </param>
 <param name="UpdateMenus">A collection containing all UpdateMenus of this layout. </param>
</member>
<member name="M:Plotly.NET.Layout.setTernary(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Sets a Ternary object on the layout as a dynamic property with the given Ternary id.
 </summary>
 <param name="id">The Ternary id of the new ColorAxis</param>
 <param name="ternary">The Ternary to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setSmith(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Smith)">
 <summary>
 Sets a smith object on the layout as a dynamic property with the given smith id.
 </summary>
 <param name="id">The scene id of the new geo</param>
 <param name="smith">The smith to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setScene(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Sets a scene object on the layout as a dynamic property with the given scene id.
 </summary>
 <param name="id">The scene id of the new scene</param>
 <param name="scene">The scene to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setPolar(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Polar)">
 <summary>
 Sets a polar object on the layout as a dynamic property with the given polar id.
 </summary>
 <param name="id">The scene id of the new geo</param>
 <param name="polar">The polar to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setMapbox(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Mapbox)">
 <summary>
 Sets a mapbox object on the layout as a dynamic property with the given mapbox id.
 </summary>
 <param name="id">The mapbox id of the new mapbox</param>
 <param name="mapbox">The mapbox to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setLinearAxis(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Sets a linear axis object on the layout as a dynamic property with the given axis id.
 </summary>
 <param name="id">The axis id of the new axis</param>
 <param name="axis">The axis to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setLegend(Plotly.NET.LayoutObjects.Legend)">
 <summary>
 Returns a function that sets the Legend object of the given trace.
 </summary>
 <param name="legend">The new Legend object</param>
</member>
<member name="M:Plotly.NET.Layout.setLayoutGrid(Plotly.NET.LayoutObjects.LayoutGrid)">
 <summary>
 Returns a function that sets the LayoutGrid object of the given trace.
 </summary>
 <param name="layoutGrid">The new LayoutGrid object</param>
</member>
<member name="M:Plotly.NET.Layout.setGeo(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.Geo)">
 <summary>
 Sets a geo object on the layout as a dynamic property with the given geo id.
 </summary>
 <param name="id">The scene id of the new geo</param>
 <param name="geo">The geo to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.setColorAxis(Plotly.NET.StyleParam.SubPlotId,Plotly.NET.LayoutObjects.ColorAxis)">
 <summary>
 Sets a ColorAxis object on the layout as a dynamic property with the given ColorAxis id.
 </summary>
 <param name="id">The ColorAxis id of the new ColorAxis</param>
 <param name="colorAxis">The ColorAxis to add to the layout.</param>
</member>
<member name="M:Plotly.NET.Layout.init``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Legend},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Margin},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.UniformText},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.DefaultColorScales},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ModeBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ClickMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SelectDirection},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Transition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{DynamicObj.DynamicObj},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LayoutGrid},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Shape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ActiveShape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.WaterfallMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.FunnelMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Shape}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.LayoutImage}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Slider}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.UpdateMenu}})">
 <summary>
 Returns a new Layout object with the given styling.
 </summary>
 <param name="Title">Sets the title of the layout.</param>
 <param name="ShowLegend">Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.</param>
 <param name="Legend">Sets the legend styles of the layout.</param>
 <param name="Margin">Sets the margins around the layout.</param>
 <param name="AutoSize">Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.</param>
 <param name="Width">Sets the plot's width (in px).</param>
 <param name="Height">Sets the plot's height (in px).</param>
 <param name="Font">Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.</param>
 <param name="UniformText">Determines how the font size for various text elements are uniformed between each trace type.</param>
 <param name="Separators">Sets the decimal and thousand separators. For example, ". " puts a '.' before decimals and a space between thousands. In English locales, dflt is ".," but other locales may alter this default.</param>
 <param name="PaperBGColor">Sets the background color of the paper where the graph is drawn.</param>
 <param name="PlotBGColor">Sets the background color of the plotting area in-between x and y axes.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.</param>
 <param name="Colorscale">Sets the default colorscales that are used by plots using autocolorscale.</param>
 <param name="Colorway">Sets the default trace colors.</param>
 <param name="ModeBar">Sets the modebar of the layout.</param>
 <param name="HoverMode">Determines the mode of hover interactions. If "closest", a single hoverlabel will appear for the "closest" point within the `hoverdistance`. If "x" (or "y"), multiple hoverlabels will appear for multiple points at the "closest" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If "x unified" (or "y unified"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.</param>
 <param name="ClickMode">Determines the mode of single click interactions. "event" is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes "lasso" and "select", but with no event data attached (kept for compatibility reasons). The "select" flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. "select" with `hovermode`: "x" can be confusing, consider explicitly setting `hovermode`: "closest" when using this feature. Selection events are sent accordingly as long as "event" flag is set as well. When the "event" flag is missing, `plotly_click` and `plotly_selected` events are not fired.</param>
 <param name="DragMode">Determines the mode of drag interactions. "select" and "lasso" apply only to scatter traces with markers or text. "orbit" and "turntable" apply only to 3D scenes.</param>
 <param name="SelectDirection">When `dragmode` is set to "select", this limits the selection of the drag to horizontal, vertical or diagonal. "h" only allows horizontal selection, "v" only vertical, "d" only diagonal and "any" sets no limit.</param>
 <param name="HoverDistance">Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.</param>
 <param name="SpikeDistance">Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.</param>
 <param name="Hoverlabel">Sets the style ov hover labels.</param>
 <param name="Transition">Sets transition options used during Plotly.react updates.</param>
 <param name="DataRevision">If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.</param>
 <param name="UIRevision">Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision="time"` and `yaxis.uirevision="cost"`. Then if only the y data is changed, you can update `yaxis.uirevision="quantity"` and the y axis range will reset but the x axis range will retain any user-driven zoom.</param>
 <param name="EditRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="SelectRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="Template">Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace. Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.</param>
 <param name="Meta">Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.</param>
 <param name="Computed">Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in "full-json" mode.</param>
 <param name="Grid">Sets the layout grid for arranging multiple plots</param>
 <param name="Calendar">Sets the default calendar system to use for interpreting and displaying dates throughout the plot.</param>
 <param name="NewShape">Controls the behavior of newly drawn shapes</param>
 <param name="ActiveShape">Sets the styling of the active shape</param>
 <param name="HideSources">Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).</param>
 <param name="BarGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="BarNorm">Sets the normalization for bar traces on the graph. With "fraction", the value of each bar is divided by the sum of all values at that location coordinate. "percent" is the same but multiplied by 100 to show percentages.</param>
 <param name="ExtendPieColors">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="HiddenLabels">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="PieColorWay">Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.</param>
 <param name="BoxGap">Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have "width" set.</param>
 <param name="BoxGroupGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="BoxMode">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGroupGap">Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinMode">Determines how violins at the same location coordinate are displayed on the graph. If "group", the violins are plotted next to one another centered around the shared location. If "overlay", the violins are plotted over one another, you might need to set "opacity" to see them multiple violins. Has no effect on traces that have "width" set.</param>
 <param name="WaterfallGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="WaterfallGroupGap">Sets the gap (in plot fraction) between bars of the same location coordinate.</param>
 <param name="WaterfallMode">Determines how bars at the same location coordinate are displayed on the graph. With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="FunnelGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="ExtendFunnelAreaColors">If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="FunnelAreaColorWay">Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.</param>
 <param name="ExtendSunBurstColors">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="SunBurstColorWay">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="ExtendTreeMapColors">If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="TreeMapColorWay">Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.</param>
 <param name="ExtendIcicleColors">If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="IcicleColorWay">Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.</param>
 <param name="Annotations">A collection containing all Annotations of this layout. An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="Shapes">A collection containing all Shapes of this layout.</param>
 <param name="Images">A collection containing all Images of this layout. </param>
 <param name="Sliders">A collection containing all Sliders of this layout. </param>
 <param name="UpdateMenus">A collection containing all UpdateMenus of this layout. </param>
</member>
<member name="M:Plotly.NET.Layout.getTernaryById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Ternary object of the layout with the given id.

 If there is no ternary set, returns an empty Ternary object.
 </summary>
 <param name="id">The target ternary id</param>
</member>
<member name="M:Plotly.NET.Layout.getSmithById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Smith object of the layout with the given id.

 If there is no smith set, returns an empty Smith object.
 </summary>
 <param name="id">The target smith id</param>
</member>
<member name="M:Plotly.NET.Layout.getSceneById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Scene object of the layout with the given id.

 If there is no scene set, returns an empty Scene object.
 </summary>
 <param name="id">The target scene id</param>
</member>
<member name="M:Plotly.NET.Layout.getPolarById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Polar object of the layout with the given id.

 If there is no polar set, returns an empty Polar object.
 </summary>
 <param name="id">The target polar id</param>
</member>
<member name="M:Plotly.NET.Layout.getMapboxById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Mapbox object of the layout with the given id.

 If there is no mapbox set, returns an empty Mapbox object.
 </summary>
 <param name="id">The target mapbox id</param>
</member>
<member name="M:Plotly.NET.Layout.getLinearAxisById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the linear axis object of the layout with the given id.

 If there is no linear axis set, returns an empty LinearAxis object.
 </summary>
 <param name="id">The target axis id</param>
</member>
<member name="M:Plotly.NET.Layout.getLegend(Plotly.NET.Layout)">
 <summary>
 Returns the legend object of the given layout.

 If there is no legend set, returns an empty Legend object.
 </summary>
 <param name="layout">The layout to get the legend from</param>
</member>
<member name="M:Plotly.NET.Layout.getLayoutGrid(Plotly.NET.Layout)">
 <summary>
 Returns the LayoutGrid object of the given layout.

 If there is no grid set, returns an empty LayoutGrid object.
 </summary>
 <param name="layout">The layout to get the grid from</param>
</member>
<member name="M:Plotly.NET.Layout.getGeoById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the Geo object of the layout with the given id.

 If there is no geo set, returns an empty Geo object.
 </summary>
 <param name="id">The target geo id</param>
</member>
<member name="M:Plotly.NET.Layout.getColorAxisById(Plotly.NET.StyleParam.SubPlotId)">
 <summary>
 Returns the ColorAxis object of the layout with the given id.

 If there is no color axis set, returns an empty ColorAxis object.
 </summary>
 <param name="id">The target color axis id</param>
</member>
<member name="T:Plotly.NET.Layout">
<summary>
 A Layout object in the context of plotly charts contains all styling options that are not directly related to the visualization of the data itself, such as axes, legends, watermarks, etc.
</summary>
</member>
<member name="M:Plotly.NET.TraceStyle.ZError``3(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given styles to the trace's Error object for the z dimension.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.YError``3(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given styles to the trace's Error object for the y dimension. Overwrites attributes with the same name that are already set.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.XError``3(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given styles to the trace's Error object for the x dimension. Overwrites attributes with the same name that are already set.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.TraceInfo``1(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title})">
 <summary>
 Sets trace information on the given trace.
 </summary>
 <param name="Name">Sets the name of the chart's trace(s). When the chart is a multichart (it contains multiple traces), the name is suffixed by '_%i' where %i is the index of the trace.</param>
 <param name="Visible">Wether or not the chart's traces are visible</param>
 <param name="ShowLegend">Determines whether or not item(s) corresponding to this chart's trace(s) is/are shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for the chart's trace(s). Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for the chart's trace(s). Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the title for the chart's trace legend group </param>
</member>
<member name="M:Plotly.NET.TraceStyle.TextLabel``2(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font})">
 <summary>
 Returns a function that applies the given styles to the trace's text items.
 </summary>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.Selection``2(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection})">
 <summary>
 Returns a function that applies the given styles to the trace's selection.
 </summary>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.Marker``1(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Gradient},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Returns a function that applies the given styles to the trace's marker object. Overwrites attributes with the same name that are already set.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</param>
 <param name="Color">Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</param>
 <param name="Colors">Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the marker's color bar.</param>
 <param name="Colorscale"></param>
 <param name="Gradient">Sets the marker's gradient</param>
 <param name="Outline">Sets the marker's outline.</param>
 <param name="Opacity">Sets the marker opacity.</param>
 <param name="MaxDisplayed">Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.</param>
 <param name="MultiOpacity">Sets the individual marker opacity.</param>
 <param name="Pattern">Sets the pattern within the marker.</param>
 <param name="ReverseScale">Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.</param>
 <param name="Size">Sets the marker's size.</param>
 <param name="MultiSize">Sets the individual marker's size.</param>
 <param name="SizeMin">Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</param>
 <param name="SizeMode">Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</param>
 <param name="SizeRef">Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</param>
 <param name="Symbol">Sets the marker symbol.</param>
 <param name="MultiSymbol">Sets the individual marker symbols.</param>
 <param name="Symbol3D">Sets the marker symbol for 3d traces.</param>
 <param name="MultiSymbol3D">Sets the individual marker symbols for 3d traces.</param>
 <param name="OutlierColor">Sets the color of the outlier sample points.</param>
 <param name="OutlierWidth">Sets the width of the outlier sample points.</param>
</member>
<member name="M:Plotly.NET.TraceStyle.Line``1(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given styles to the trace's line object. Overwrites attributes with the same name that are already set.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</param>
 <param name="Color">Sets the line color.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Colorscale">Sets the line colorscale</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="ShowScale">Wether or not to show the color bar</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="Dash">Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").</param>
 <param name="Shape">Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</param>
 <param name="Simplify">Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</param>
 <param name="Smoothing">Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).</param>
 <param name="Width">Sets the line width (in px).</param>
 <param name="MultiWidth">Sets the individual line width (in px).</param>
 <param name="OutlierColor">Sets the color of the outline of outliers</param>
 <param name="OutlierWidth">Sets the width of the outline of outliers</param>
</member>
<member name="M:Plotly.NET.TraceStyle.Domain``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Returns a function that applies the given styles to the trace&apos;s domain object.
 &lt;/summary&gt;
</summary>
</member>
<member name="T:Plotly.NET.TraceStyle">
<summary>
 Contains general, visualization-unspecific functions to style Trace objects.

 These functions are used internally to style traces of Chart objects.
 Users should usually be pointed to the API layer provided by the `Chart` module/object first.

 Visualization-specific equivalents are suffixed with the respective trace subtype, e.g. `TraceStyle2D`
</summary>
</member>
<member name="M:Plotly.NET.Trace.updateZError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Combines the given Error object for the z dimension with the one already present on the trace.
 </summary>
 <param name="error">The updated Error object</param>
</member>
<member name="M:Plotly.NET.Trace.updateYError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Combines the given Error object for the y dimension with the one already present on the trace.
 </summary>
 <param name="error">The updated Error object</param>
</member>
<member name="M:Plotly.NET.Trace.updateXError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Combines the given Error object for the x dimension with the one already present on the trace.
 </summary>
 <param name="error">The updated Error object</param>
</member>
<member name="M:Plotly.NET.Trace.updateMarker``1(Plotly.NET.TraceObjects.Marker)">
 <summary>
 Combines the given marker object with the one already present on the trace.
 </summary>
 <param name="marker">The updated Trace object</param>
</member>
<member name="M:Plotly.NET.Trace.updateLine``1(Plotly.NET.Line)">
 <summary>
 Combines the given Line object with the one already present on the trace.
 </summary>
 <param name="line">The updated Line object</param>
</member>
<member name="M:Plotly.NET.Trace.updateDomain``1(Plotly.NET.LayoutObjects.Domain)">
 <summary>
 Combines the given Domain object with the one already present on the trace.
 </summary>
 <param name="domain">The updated Domain object</param>
</member>
<member name="M:Plotly.NET.Trace.updateColorBar``1(Plotly.NET.ColorBar)">
 <summary>
 Combines the given ColorBar object with the one already present on the trace.
 </summary>
 <param name="colorBar">The updated ColorBar object</param>
</member>
<member name="M:Plotly.NET.Trace.tryGetTypedMember``1(System.String,Plotly.NET.Trace)">
 <summary>
 Returns Some(dynamic member value) of the trace object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="trace">The trace to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.Trace.setZError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Returns a function that sets the Error object for the x dimension of the given trace.
 </summary>
 <param name="error">The new error object</param>
</member>
<member name="M:Plotly.NET.Trace.setYError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Returns a function that sets the Error object for the x dimension of the given trace.
 </summary>
 <param name="error">The new error object</param>
</member>
<member name="M:Plotly.NET.Trace.setXError``1(Plotly.NET.TraceObjects.Error)">
 <summary>
 Returns a function that sets the Error object for the x dimension of the given trace.
 </summary>
 <param name="error">The new error object</param>
</member>
<member name="M:Plotly.NET.Trace.setStackGroup``1(System.String)">
 <summary>
 Returns a function that sets the stackgroup of the given trace.
 </summary>
 <param name="stackgroup">The new stackgroup</param>
</member>
<member name="M:Plotly.NET.Trace.setMarker``1(Plotly.NET.TraceObjects.Marker)">
 <summary>
 Returns a function that sets the Marker object of the given trace.
 </summary>
 <param name="marker">The new marker object</param>
</member>
<member name="M:Plotly.NET.Trace.setLine``1(Plotly.NET.Line)">
 <summary>
 Returns a function that sets the Line object of the given trace.
 </summary>
 <param name="line">The new line object</param>
</member>
<member name="M:Plotly.NET.Trace.setDomain``1(Plotly.NET.LayoutObjects.Domain)">
 <summary>
 Returns a function that sets the domain of the given trace.
 </summary>
 <param name="domain">The new domain</param>
</member>
<member name="M:Plotly.NET.Trace.setColorBar``1(Plotly.NET.ColorBar)">
 <summary>
 Returns a function that sets the ColorBar of the given trace.
 </summary>
 <param name="colorBar">The new ColorBar</param>
</member>
<member name="M:Plotly.NET.Trace.setColorAxisAnchor``1(System.Int32)">
 <summary>
 Returns a function that sets the color axis anchor of the given trace.
 </summary>
 <param name="colorAxisId">The new color axis anchor</param>
</member>
<member name="M:Plotly.NET.Trace.getZError``1(``0)">
 <summary>
 Returns the Error object for the z dimension of the given trace.

 If there is no error set, returns an empty error object.
 </summary>
 <param name="trace">The trace to get the z error from</param>
</member>
<member name="M:Plotly.NET.Trace.getYError``1(``0)">
 <summary>
 Returns the Error object for the y dimension of the given trace.

 If there is no error set, returns an empty error object.
 </summary>
 <param name="trace">The trace to get the y error from</param>
</member>
<member name="M:Plotly.NET.Trace.getXError``1(``0)">
 <summary>
 Returns the Error object for the x dimension of the given trace.

 If there is no error set, returns an empty error object.
 </summary>
 <param name="trace">The trace to get the x error from</param>
</member>
<member name="M:Plotly.NET.Trace.getStackGroup``1(``0)">
 <summary>
 Returns the stackgroup of the given trace.

 If there is no stackgroup set, returns "stackgroup".
 </summary>
 <param name="trace">The trace to get the stackgroup from</param>
</member>
<member name="M:Plotly.NET.Trace.getMarker``1(``0)">
 <summary>
 Returns the Marker object of the given trace.

 If there is no marker set, returns an empty marker object.
 </summary>
 <param name="trace">The trace to get the marker from</param>
</member>
<member name="M:Plotly.NET.Trace.getLine``1(``0)">
 <summary>
 Returns the Line object of the given trace.

 If there is no line set, returns an empty line object.
 </summary>
 <param name="trace">The trace to get the line from</param>
</member>
<member name="M:Plotly.NET.Trace.getDomain``1(``0)">
 <summary>
 Returns the domain of the given trace.

 If there is no domain set, returns an empty Domain object.
 </summary>
 <param name="trace">The trace to get the cdomain from</param>
</member>
<member name="M:Plotly.NET.Trace.getColorBar``1(``0)">
 <summary>
 Returns the colorbar of the given trace.

 If there is no colorbar set, returns an empty ColorBar object.
 </summary>
 <param name="trace">The trace to get the cdomain from</param>
</member>
<member name="M:Plotly.NET.Trace.getColorAxisAnchor``1(``0)">
 <summary>
 Returns the color axis anchor of the given trace.

 If there is no color axis set, returns "coloraxis".
 </summary>
 <param name="trace">The trace to get the color axis anchor from</param>
</member>
<member name="T:Plotly.NET.Trace">
<summary>
 A Trace object in the context of plotly charts contains the data to visualize and additional styling parameters.

 This is the base object that contains visualization-unspecific getters and setters for the underlying DynamicObj.

 Visualization-specific equivalents are suffixed with the respective trace subtype, e.g. `Trace2D`
</summary>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Waterfall``17(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.WaterfallMeasure}},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{``13},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``14},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``15}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.WaterfallConnector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstrainText},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.InsideTextAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a waterfall plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="MultiWidth">Sets the bar width (in position axis units).</param>
 <param name="Measure">An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.</param>
 <param name="Offset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="MultiOffset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="MultiTextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="TextAngle">Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="TextInfo">Determines which trace information appear on the graph. In the case of having multiple funnels, percentages and totals are computed separately (per trace).</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="ClipOnAxis">Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="Connector">Sets the waterfall connector of this trace</param>
 <param name="Constraintext">Constrain the size of text inside or outside a bar to be no larger than the bar itself.</param>
 <param name="Increasing">Sets the style parameters for markers for increasing bars</param>
 <param name="Decreasing">Sets the style parameters for markers for decreasing bars</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextAnchor">Determines if texts are kept at center or start/end points in `textposition` "inside" mode.</param>
 <param name="InsideTextFont">Sets the font used for `text` lying inside the bar.</param>
 <param name="OutsideTextFont">Sets the font used for `text` lying outside the bar.</param>
 <param name="Totals">Sets the style parameters for markers for totals bars</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Violin``11(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Box},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.MeanLine},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ScaleMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpanMode},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a violin plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x sample data or coordinates. See overview for more info.</param>
 <param name="X0">Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</param>
 <param name="DX">Sets the x coordinate step for multi-box traces set using q1/median/q3.</param>
 <param name="Y">Sets the y sample data or coordinates. See overview for more info.</param>
 <param name="Y0">Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</param>
 <param name="DY">Sets the y coordinate step for multi-box traces set using q1/median/q3.</param>
 <param name="Width">Sets the width of the violin in data coordinates. If "0" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Sets the orientation of the violin(s). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Marker">Sets the Marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="Box">Wether and how to draw a miniature box plot</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="BandWidth">Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual boxes or sample points or both?</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="MeanLine">Wether and how to draw the meanline</param>
 <param name="Points">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the violins are shown with no sample points. Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to "outliers".</param>
 <param name="ScaleGroup">If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together</param>
 <param name="ScaleMode">Sets the metric by which the width of each violin is determined."width" means each violin has the same (max) width"count" means the violins are scaled by the number of sample points makingup each violin.</param>
 <param name="Side">Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under "overlay" mode, where one trace has `side` set to "positive" and the other to "negative".</param>
 <param name="Span">Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to "manual".</param>
 <param name="SpanMode">Sets the method by which the span in data space where the density function will be computed. "soft" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. "hard" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode "manual" and fill in the `span` attribute.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Splom``5(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SplomDiagonal},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.LinearAxisId}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.LinearAxisId}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a scatter plot matrix (SPLOM) to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.</param>
 <param name="Dimensions">Sets the dimensions of this trace.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Diagonal">Sets the styles applied to the scatter plot matrix diagonal</param>
 <param name="XAxes">Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.</param>
 <param name="YAxes">Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.</param>
 <param name="ShowLowerHalf">Determines whether or not subplots on the lower half from the diagonal are displayed.</param>
 <param name="ShowUpperHalf">Determines whether or not subplots on the upper half from the diagonal are displayed.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.SetAxisAnchor(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId})">
<summary>
 Sets the given axis anchor id(s) on a Trace object.
</summary>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Scatter``15(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``13}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.StackGaps},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="GroupNorm">Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With "fraction", the value of each trace at each location is divided by the sum of all trace values at that location. "percent" is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.</param>
 <param name="StackGroup">Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is "h"). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using "tonexty" ("tonextx") if `orientation` is "h" ("v") and sets the default `mode` to "lines" irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="XError">Sets the x error of this trace.</param>
 <param name="YError">Sets the y error of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ClipOnAxis">Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".</param>
 <param name="StackGaps">Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With "infer zero" we insert a zero at these locations. With "interpolate" we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.OHLC``14(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``12}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a OHLC plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Close">Sets the close values.</param>
 <param name="Open">Sets the open values.</param>
 <param name="High">Sets the high values.</param>
 <param name="Low">Sets the low values.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Increasing">Sets the styles for increasing candles</param>
 <param name="Decreasing">Sets the styles for decreasing candles</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="TickWidth">Sets the width of the open/close tick marks relative to the "x" minimal interval.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Image``11(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorModel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a Image plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X0">Set the image's x position.</param>
 <param name="DX">Set the pixel's horizontal size.</param>
 <param name="Y0">Set the image's y position.</param>
 <param name="DY">Set the pixel's vertical size</param>
 <param name="Z">A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.</param>
 <param name="Source">Specifies the data URI of the image to be visualized. The URI consists of "data:image/[&lt;media subtype&gt;][;base64],&lt;data&gt;"</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorModel">Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Histogram2DContour``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a 2d histogram contour plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the sample data to be binned on the x axis.</param>
 <param name="Y">Sets the sample data to be binned on the y axis.</param>
 <param name="Z">Sets the aggregation data.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="AutoBinX">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</param>
 <param name="AutoBinY">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</param>
 <param name="BinGroup">Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of "1" on two histogram2d traces will make them their x-bins and y-bins match separately.</param>
 <param name="XBinGroup">Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBinGroup">Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="Zmax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="Zmid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="Zmin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="AutoContour">Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.</param>
 <param name="Contours">Sets the contours of this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Histogram2D``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a 2d histogram plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the sample data to be binned on the x axis.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="Y">Sets the sample data to be binned on the y axis.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Z">Sets the aggregation data.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="AutoBinX">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</param>
 <param name="AutoBinY">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</param>
 <param name="BinGroup">Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of "1" on two histogram2d traces will make them their x-bins and y-bins match separately.</param>
 <param name="XBinGroup">Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBinGroup">Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Histogram``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Cumulative},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a histogram plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the sample data to be binned on the x axis.</param>
 <param name="Y">Sets the sample data to be binned on the y axis.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="AutoBinX">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</param>
 <param name="AutoBinY">Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</param>
 <param name="BinGroup">Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same "orientation" under `barmode` "stack", "relative" and "group" are forced into the same bingroup, Using `bingroup`, traces under `barmode` "overlay" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d" trace can share the same `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="XError">Sets the x error of this trace.</param>
 <param name="YError">Sets the y error of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="Cumulative">Sets wether and how the cumulative distribution is displayed</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Heatmap``19(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{``13},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``14},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``15},Microsoft.FSharp.Core.FSharpOption{``16},Microsoft.FSharp.Core.FSharpOption{``17},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a heatmap to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="XType">If "array", the heatmap's x coordinates are given by "x" (the default behavior when `x` is provided). If "scaled", the heatmap's x coordinates are given by "x0" and "dx" (the default behavior when `x` is not provided).</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="YType">If "array", the heatmap's y coordinates are given by "y" (the default behavior when `y` is provided) If "scaled", the heatmap's y coordinates are given by "y0" and "dy" (the default behavior when `y` is not provided)</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Z">Sets the z data.</param>
 <param name="Text">Sets the text elements associated with each z value.</param>
 <param name="MultiText">Sets the text elements associated with each z value.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOnGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Funnel``15(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``13}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FunnelConnector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstrainText},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.InsideTextAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a funnel plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="Offset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="MultiTextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextAngle">Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="TextInfo">Determines which trace information appear on the graph. In the case of having multiple funnels, percentages and totals are computed separately (per trace).</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="ClipOnAxis">Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="Connector">Sets the funnel connector of this trace</param>
 <param name="Constraintext">Constrain the size of text inside or outside a bar to be no larger than the bar itself.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextAnchor">Determines if texts are kept at center or start/end points in `textposition` "inside" mode.</param>
 <param name="InsideTextFont">Sets the font used for `text` lying inside the bar.</param>
 <param name="OutsideTextFont">Sets the font used for `text` lying outside the bar.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Contour``19(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{``13},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``14},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``15},Microsoft.FSharp.Core.FSharpOption{``16},Microsoft.FSharp.Core.FSharpOption{``17},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a contour plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="XType">If "array", the heatmap's x coordinates are given by "x" (the default behavior when `x` is provided). If "scaled", the heatmap's x coordinates are given by "x0" and "dx" (the default behavior when `x` is not provided).</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="YType">If "array", the heatmap's y coordinates are given by "y" (the default behavior when `y` is provided) If "scaled", the heatmap's y coordinates are given by "y0" and "dy" (the default behavior when `y` is not provided)</param>
 <param name="Z">Sets the z data.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="AutoContour">Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.</param>
 <param name="Contours">Sets the contours of this trace.</param>
 <param name="FillColor">Sets the fill color if `contours.type` is "constraint". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOnGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Candlestick``14(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``12}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a candlestick plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Close">Sets the close values.</param>
 <param name="Open">Sets the open values.</param>
 <param name="High">Sets the high values.</param>
 <param name="Low">Sets the low values.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Increasing">Sets the styles for increasing candles</param>
 <param name="Decreasing">Sets the styles for decreasing candles</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.BoxPlot``15(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.IConvertible}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.QuartileMethod},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``13}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a boxplot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x sample data or coordinates. See overview for more info.</param>
 <param name="X0">Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</param>
 <param name="DX">Sets the x coordinate step for multi-box traces set using q1/median/q3.</param>
 <param name="Y">Sets the y sample data or coordinates. See overview for more info.</param>
 <param name="Y0">Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</param>
 <param name="DY">Sets the y coordinate step for multi-box traces set using q1/median/q3.</param>
 <param name="Width">Sets the width of the box in data coordinate If "0" (default value) the width is automatically selected based on the positions of other box traces in the same subplot.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Sets the orientation of the box(es). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="BoxMean">If "true", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If "sd" the standard deviation is also drawn. Defaults to "true" when `mean` is set. Defaults to "sd" when `sd` is set Otherwise defaults to "false".</param>
 <param name="BoxPoints">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the box(es) are shown with no sample points Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to "all" under the q1/median/q3 signature. Otherwise defaults to "outliers".</param>
 <param name="Notched">Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 " IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to "false" unless `notchwidth` or `notchspan` is set.</param>
 <param name="NotchWidth">Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="Q1">Sets the Quartile 1 values. There should be as many items as the number of boxes desired.</param>
 <param name="Median">Sets the Quartile 1 values. There should be as many items as the number of boxes desired.</param>
 <param name="Q3">Sets the Quartile 3 values. There should be as many items as the number of boxes desired.</param>
 <param name="LowerFence">Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.</param>
 <param name="UpperFence">Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point above 1.5 times the IQR.</param>
 <param name="NotchSpan">Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 " IQR / sqrt(N), where N is the sample size.</param>
 <param name="Mean">Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.</param>
 <param name="SD">Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.</param>
 <param name="QuartileMethod">Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual boxes or sample points or both?</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace2DStyle.Bar``18(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``11}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``13},Microsoft.FSharp.Core.FSharpOption{``14},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PeriodAlignment},Microsoft.FSharp.Core.FSharpOption{``15},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``16}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstrainText},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.InsideTextAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a bar plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="X0">Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</param>
 <param name="DX">Sets the x coordinate step. See `x0` for more info.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Y0">Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</param>
 <param name="DY">Sets the y coordinate step. See `y0` for more info.</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units). In "stack" or "relative" barmode, traces that set "base" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="MultiWidth">Sets the bar width (in position axis units).</param>
 <param name="Offset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="MultiOffset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="MultiTextPosition">Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="XPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the x axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="XPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.</param>
 <param name="XPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="YPeriod">Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M&lt;n&gt;" on the y axis. Special values in the form of "M&lt;n&gt;" could be used to declare the number of months. In this case `n` must be a positive integer.</param>
 <param name="YPeriodAlignment">Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.</param>
 <param name="YPeriod0">Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextAngle">Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="XError">Sets the x error of this trace.</param>
 <param name="YError">Sets the y error of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ClipOnAxis">Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="Constraintext">Constrain the size of text inside or outside a bar to be no larger than the bar itself.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextAnchor">Determines if texts are kept at center or start/end points in `textposition` "inside" mode.</param>
 <param name="InsideTextFont">Sets the font used for `text` lying inside the bar.</param>
 <param name="OutsideTextFont">Sets the font used for `text` lying outside the bar.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="T:Plotly.NET.Trace2DStyle">
<summary>
 Create various functions for applying 2D chart styles to traces
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initWaterfall(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;waterfall&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initViolin(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;violin&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initSplom(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;SPLOM&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initScatterGL(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;scattergl&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initScatter(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;scatter&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initOHLC(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;ohlc&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initImage(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;image&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initHistogram2DContour(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;histogram2Dcontour&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initHistogram2D(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;histogram2D&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initHistogram(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;histogram&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initHeatmapGL(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;heatmapgl&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initHeatmap(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;heatmap&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initFunnel(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;funnel&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initContour(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;contour&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initCandlestick(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;candlestick&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initBoxPlot(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;box&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace2D.initBar(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace2D,Plotly.NET.Trace2D})">
<summary>
initializes a trace of type &quot;bar&quot; applying the given trace styling function
</summary>
</member>
<member name="T:Plotly.NET.Trace2D">
<summary>
 The most commonly-used kind of subplot is a two-dimensional Cartesian subplot. Traces compatible with these subplots
 support xaxis and yaxis attributes whose values must refer to corresponding objects in the layout portion of the figure.
 For example, if xaxis=&quot;x&quot;, and yaxis=&quot;y&quot; (which is the default) then this trace is drawn on the subplot at the intersection
 of the axes configured under layout.xaxis and layout.yaxis, but if xaxis=&quot;x2&quot; and yaxis=&quot;y3&quot; then the trace is drawn at the
 intersection of the axes configured under layout.xaxis2 and layout.yaxis3. Note that attributes such as layout.xaxis and
 layout.xaxis2 etc do not have to be explicitly defined, in which case default values will be inferred. Multiple traces of
 different types can be drawn on the same subplot.

 X- and Y-axes support the type attribute, which enables them to represent continuous values (type=&quot;linear&quot;, type=&quot;log&quot;),
 temporal values (type=&quot;date&quot;) or categorical values (type=&quot;category&quot;, type=&quot;multicategory). Axes can also be overlaid on
 top of one another to create dual-axis or multiple-axis charts. 2-d cartesian subplots lend themselves very well to creating
 &quot;small multiples&quot; figures, also known as facet or trellis plots.

 The following trace types are compatible with 2D-cartesian subplots via the xaxis and yaxis attributes:

 - scatter-like trace types: scatter and scattergl can be used to draw scatter plots, line plots and curves, time-series plots,
 bubble charts, dot plots and filled areas and also support error bars

 - bar, funnel, waterfall: bar-like trace types which can also be used to draw timelines and Gantt charts

 - histogram: an aggregating bar-like trace type

 - box and violin: 1-dimensional distribution-like trace types

 - histogram2D and histogram2Dcontour: 2-dimensional distribution-like density trace types

 - image, heatmap and contour: matrix trace types

 - ohlc and candlestick: stock-like trace types

 - splom: multi-dimensional scatter plots which implicitly refer to many 2-d cartesian subplots at once.
</summary>
</member>
<member name="M:Plotly.NET.Trace3DStyle.Volume``12(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Caps},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Slices},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Spaceframe},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Surface},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}})">
 <summary>
 Create a function that applies the styles of a volume chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the title of the legendgroup</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the X coordinates of the vertices on X axis.</param>
 <param name="Y">Sets the Y coordinates of the vertices on Y axis.</param>
 <param name="Z">Sets the Z coordinates of the vertices on Z axis.</param>
 <param name="Value">Sets the 4th dimension (value) of the vertices.</param>
 <param name="Text">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`</param>
 <param name="ValueHoverFormat">Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the colorbar of this trace</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.</param>
 <param name="Caps">Sets the caps of this trace caps (color-coded surfaces on the sides of the visualization domain)</param>
 <param name="Contour">Sets the contour of this trace.</param>
 <param name="FlatShading">Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</param>
 <param name="HoverLabel">Sets the hover labels of this trace.</param>
 <param name="IsoMax">Sets the maximum boundary for iso-surface plot.</param>
 <param name="IsoMin">Sets the minimum boundary for iso-surface plot.</param>
 <param name="Lighting">Sets the Lighting of this trace.</param>
 <param name="LightPosition">Sets the LightPosition of this trace.</param>
 <param name="OpacityScale">Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</param>
 <param name="Slices">Sets slices through the volume</param>
 <param name="SpaceFrame">Sets the SpaceFrame of this trace.</param>
 <param name="Surface">Sets the Surface of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.Surface``10(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a surface chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Z">Sets the z coordinates.</param>
 <param name="SurfaceColor">Sets the surface color values, used for setting a color scale independent of `z`.</param>
 <param name="Text">Sets the text elements associated with each z value. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets the text elements associated with each z value. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.</param>
 <param name="Contours">Sets the contours of this trace.</param>
 <param name="HideSurface">Determines whether or not a surface is drawn. For example, set `hidesurface` to "false" `contours.x.show` to "true" and `contours.y.show` to "true" to draw a wire frame plot.</param>
 <param name="Hoverlabel">Sets the hoverlabel style of this trace.</param>
 <param name="Lighting">Sets the Lighting style of this trace.</param>
 <param name="LightPosition">Sets the LightPosition style of this trace.</param>
 <param name="OpacityScale">Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="ZCalendar">Sets the calendar system to use with `z` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.StreamTube``12(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.StreamTubeStarts},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}})">
 <summary>
 Create a function that applies the styles of a streamtube chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates of the vector field.</param>
 <param name="Y">Sets the y coordinates of the vector field.</param>
 <param name="Z">Sets the z coordinates of the vector field.</param>
 <param name="U">Sets the x components of the vector field.</param>
 <param name="V">Sets the y components of the vector field.</param>
 <param name="W">Sets the z components of the vector field.</param>
 <param name="Text">Sets a text element associated with this trace. If trace `hoverinfo` contains a "text" flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.</param>
 <param name="MultiText">Sets a text element associated with this trace. If trace `hoverinfo` contains a "text" flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`</param>
 <param name="UHoverFormat">Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="VHoverFormat">Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="WHoverFormat">Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the ColorBar object associated with the color scale of the streamtubes</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.</param>
 <param name="HoverLabel">Sets the hover labels of this trace.</param>
 <param name="Lighting">Sets the Lighting of this trace.</param>
 <param name="LightPosition">Sets the LightPosition of this trace.</param>
 <param name="MaxDisplayed">The maximum number of displayed segments in a streamtube.</param>
 <param name="SizeRef">The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.</param>
 <param name="Starts">Sets the streamtube starting positions</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.Scatter3D``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SurfaceAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a 3D scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Z">Sets the z coordinates.</param>
 <param name="SurfaceColor">Sets the surface fill color.</param>
 <param name="Text">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="XError">Sets the x Error of this trace.</param>
 <param name="YError">Sets the y Error of this trace.</param>
 <param name="ZError">Sets the z Error of this trace.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Hoverlabel">Sets the hoverlabel of this trace.</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="Surfaceaxis">If "-1", the scatter points are not fill with a surface If "0", "1", "2", the scatter points are filled with a Delaunay surface about the x, y, z respectively.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="ZCalendar">Sets the calendar system to use with `z` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.Mesh3D``11(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IntensityMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TriangulationAlgorithm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Delaunayaxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a mesh3d chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="Y">Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="Z">Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="I">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "first" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.</param>
 <param name="J">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "second" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.</param>
 <param name="K">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "third" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.</param>
 <param name="FaceColor">Sets the color of each face Overrides "color" and "vertexcolor".</param>
 <param name="Intensity">Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.</param>
 <param name="IntensityMode">Determines the source of `intensity` values.</param>
 <param name="VertexColor">Sets the color of each vertex Overrides "color". While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.</param>
 <param name="Text">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="Color">Sets the color values, used for setting a color scale independent of `z`.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.</param>
 <param name="AlphaHull">Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If "-1", Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If ">0", the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If "0", the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.</param>
 <param name="Delaunayaxis">Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.</param>
 <param name="Contour">Sets the contour of this trace</param>
 <param name="FlatShading">Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</param>
 <param name="Hoverlabel">Sets the hoverlabel style of this trace.</param>
 <param name="Lighting">Sets the Lighting style of this trace.</param>
 <param name="LightPosition">Sets the LightPosition style of this trace.</param>
 <param name="XCalendar">Sets the calendar system to use with `x` date data.</param>
 <param name="YCalendar">Sets the calendar system to use with `y` date data.</param>
 <param name="ZCalendar">Sets the calendar system to use with `z` date data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.IsoSurface``12(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Caps},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Slices},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Spaceframe},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Surface},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}})">
 <summary>
 Create a function that applies the styles of a isosurface chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the title of the legendgroup</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the X coordinates of the vertices on X axis.</param>
 <param name="Y">Sets the Y coordinates of the vertices on Y axis.</param>
 <param name="Z">Sets the Z coordinates of the vertices on Z axis.</param>
 <param name="Value">Sets the 4th dimension (value) of the vertices.</param>
 <param name="Text">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`</param>
 <param name="ValueHoverFormat">Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the colorbar of this trace</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.</param>
 <param name="Caps">Sets the caps of this trace caps (color-coded surfaces on the sides of the visualization domain)</param>
 <param name="Contour">Sets the contour of this trace.</param>
 <param name="FlatShading">Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</param>
 <param name="HoverLabel">Sets the hover labels of this trace.</param>
 <param name="IsoMax">Sets the maximum boundary for iso-surface plot.</param>
 <param name="IsoMin">Sets the minimum boundary for iso-surface plot.</param>
 <param name="Lighting">Sets the Lighting of this trace.</param>
 <param name="LightPosition">Sets the LightPosition of this trace.</param>
 <param name="OpacityScale">Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</param>
 <param name="Slices">Sets slices through the volume</param>
 <param name="SpaceFrame">Sets the SpaceFrame of this trace.</param>
 <param name="Surface">Sets the Surface of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.Trace3DStyle.Cone``12(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Lighting},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.LightPosition},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}})">
 <summary>
 Create a function that applies the styles of a cone chart to the given trace
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">Sets the x coordinates of the vector field and of the displayed cones.</param>
 <param name="Y">Sets the y coordinates of the vector field and of the displayed cones.</param>
 <param name="Z">Sets the z coordinates of the vector field and of the displayed cones.</param>
 <param name="U">Sets the x components of the vector field.</param>
 <param name="V">Sets the y components of the vector field.</param>
 <param name="W">Sets the z components of the vector field.</param>
 <param name="Text">Sets the text elements associated with the cones. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets the text elements associated with the cones. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Same as `text`.</param>
 <param name="MultiHoverText">Same as `text`.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="XHoverFormat">Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.</param>
 <param name="YHoverFormat">Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.</param>
 <param name="ZHoverFormat">Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`</param>
 <param name="UHoverFormat">Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="VHoverFormat">Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="WHoverFormat">Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Scene">Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the ColorBar object associated with the color scale of the cones</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.</param>
 <param name="Anchor">Sets the cones' anchor with respect to their x/y/z positions. Note that "cm" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</param>
 <param name="HoverLabel">Sets the hover labels of this cone trace.</param>
 <param name="Lighting">Sets the Lighting of this cone trace.</param>
 <param name="LightPosition">Sets the LightPosition of this cone trace.</param>
 <param name="SizeMode">Determines whether `sizeref` is set as a "scaled" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as "absolute" value (in the same units as the vector field).</param>
 <param name="SizeRef">Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum "time" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to "scaled", `sizeref` is unitless, its default value is "0.5" With `sizemode` set to "absolute", `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="T:Plotly.NET.Trace3DStyle">
<summary>
 Create various functions for applying 3D chart styles to traces
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initVolume(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;volume&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initSurface(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;surface&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initStreamTube(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;streamtube&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initScatter3D(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;scatter3d&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initMesh3D(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;mesh3d&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initIsoSurface(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;isosurface&quot; applying the givin trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Trace3D.initCone(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace3D,Plotly.NET.Trace3D})">
<summary>
initializes a trace of type &quot;cone&quot; applying the givin trace styling function
</summary>
</member>
<member name="T:Plotly.NET.Trace3D">
<summary>
 Traces for 3D subplots, using layout.scene as anchors.

 These trace types are compatible with 3D subplots via the scene attribute, which contains special camera controls:

- scatter3d, which can be used to draw individual markers, 3d bubble charts and lines and curves

- surface and mesh: 3d surface trace types

- cone and streamtube: 3d vector field trace types

- volume and isosurface: 3d volume trace types
</summary>
</member>
<member name="M:Plotly.NET.TracePolarStyle.ScatterPolar``11(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AngularUnit},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}})">
 <summary>
 Create a function that applies the styles of a polar scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="R">Sets the radial coordinates</param>
 <param name="R0">Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.</param>
 <param name="DR">Sets the r coordinate step.</param>
 <param name="Theta">Sets the angular coordinates</param>
 <param name="Theta0">Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.</param>
 <param name="DTheta">Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.</param>
 <param name="ThetaUnit">Sets the unit of input "theta" values. Has an effect only when on "linear" angular axes.</param>
 <param name="Text">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Subplot">Sets a reference between this trace's data coordinates and a polar subplot. If "polar" (the default value), the data refer to `layout.polar`. If "polar2", the data refer to `layout.polar2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ClipOnAxis">Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TracePolarStyle.BarPolar``14(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.IConvertible},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AngularUnit},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``11}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``12}})">
 <summary>
 Create a function that applies the styles of a polar bar plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Base">Sets where the bar base is drawn (in radial axis units). In "stack" barmode, traces that set "base" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="R">Sets the radial coordinates</param>
 <param name="R0">Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.</param>
 <param name="DR">Sets the r coordinate step.</param>
 <param name="Theta">Sets the angular coordinates</param>
 <param name="Theta0">Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.</param>
 <param name="DTheta">Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.</param>
 <param name="ThetaUnit">Sets the unit of input "theta" values. Has an effect only when on "linear" angular axes.</param>
 <param name="Width">Sets the bar angular width (in "thetaunit" units).</param>
 <param name="MultiWidth">Sets the bar angular width (in "thetaunit" units).</param>
 <param name="Offset">Shifts the angular position where the bar is drawn (in "thetatunit" units).</param>
 <param name="MultiOffset">Shifts the angular position where the bar is drawn (in "thetatunit" units).</param>
 <param name="Text">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Subplot">Sets a reference between this trace's data coordinates and a polar subplot. If "polar" (the default value), the data refer to `layout.polar`. If "polar2", the data refer to `layout.polar2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="T:Plotly.NET.TracePolarStyle">
<summary>
 Create various functions for applying polar chart styles to traces
</summary>
</member>
<member name="M:Plotly.NET.TracePolar.initScatterPolarGL(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TracePolar,Plotly.NET.TracePolar})">
<summary>
initializes a trace of type &quot;scatterpolargl&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TracePolar.initScatterPolar(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TracePolar,Plotly.NET.TracePolar})">
<summary>
initializes a trace of type &quot;scatterpolar&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TracePolar.initBarPolar(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TracePolar,Plotly.NET.TracePolar})">
<summary>
initializes a trace of type &quot;barpolar&quot; applying the given trace styling function
</summary>
</member>
<member name="T:Plotly.NET.TracePolar">
<summary>
 Traces for polar subplots, using layout.polar as anchors.

 The following trace types are compatible with polar subplots via the polar attribute:

 - scatter-like trace types: scatterpolar and scatterpolargl, which can be used to draw individual markers, curves and filled areas (i.e. radar or spider charts)

 - barpolar: useful for wind roses and other polar bar charts
</summary>
</member>
<member name="M:Plotly.NET.TraceGeoStyle.ScatterGeo``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a scattergeo plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Lat">Sets the latitude coordinates (in degrees North).</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="Locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="Lon">Sets the longitude coordinates (in degrees East).</param>
 <param name="Text">Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon`, `location` and `text`.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon`, `location` and `text`.</param>
 <param name="HoverText">Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Geo">Sets a reference between this trace's geospatial coordinates and a geographic map. If "geo" (the default value), the geospatial coordinates refer to `layout.geo`. If "geo2", the geospatial coordinates refer to `layout.geo2`, and so on.</param>
 <param name="Marker">Sets the marker of the trace.</param>
 <param name="Line">Sets the Line of the trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</param>
 <param name="FillColor">Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceGeoStyle.ChoroplethMap``6(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a choropleth map to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Z">Sets the color values.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="Locations">Sets the coordinates via location IDs or names. See `locationmode` for more info.</param>
 <param name="Text">Sets the text elements associated with each location.</param>
 <param name="MultiText">Sets the text elements associated with each location.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Geo">Sets a reference between this trace's geospatial coordinates and a geographic map. If "geo" (the default value), the geospatial coordinates refer to `layout.geo`. If "geo2", the geospatial coordinates refer to `layout.geo2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="Zmin">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="Zmid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="Zmax">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceGeo.initScatterGeo(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceGeo,Plotly.NET.TraceGeo})">
<summary>
initializes a trace of type &quot;scattergeo&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceGeo.initChoroplethMap(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceGeo,Plotly.NET.TraceGeo})">
<summary>
initializes a trace of type &quot;choropleth&quot; applying the given trace styling function
</summary>
</member>
<member name="T:Plotly.NET.TraceGeo">
<summary>
The following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout
i.e. geo=&quot;geo2&quot; etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which
case default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.

 The following trace types are compatible with geo subplots via the geo attribute:

 - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps

 - choropleth: colored polygons on outline maps

 The following trace types are compatible with mapbox subplots via the mapbox attribute:

 - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps

 - choroplethmapbox: colored polygons on tile maps

 - densitymapbox: density heatmaps on tile maps
</summary>
</member>
<member name="M:Plotly.NET.TraceMapboxStyle.ScatterMapbox``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a mapbox scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Lat">Sets the latitude coordinates (in degrees North).</param>
 <param name="Lon">Sets the longitude coordinates (in degrees East).</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="SubPlot">Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace</param>
 <param name="TextFont">Sets the text font of this trace</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceMapboxStyle.DensityMapbox``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a density mapbox plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Z">Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</param>
 <param name="Radius">Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.</param>
 <param name="Lat">Sets the latitude coordinates (in degrees North).</param>
 <param name="Lon">Sets the longitude coordinates (in degrees East).</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="SubPlot">Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="ColorBar">Sets the color bar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="Zmax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="Zmid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="Zmin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="Below">Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceMapboxStyle.ChoroplethMapbox``6(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a choropleth mapbox plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Z">Sets the color values.</param>
 <param name="GeoJson">Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example "properties.name".</param>
 <param name="Locations">Sets which features found in "geojson" to plot using their feature `id` field.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="SubPlot">Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="ColorBar">Sets the color bar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="Zmax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="Zmid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="Zmin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="Below">Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceMapbox.initScatterMapbox(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceMapbox,Plotly.NET.TraceMapbox})">
<summary>
initializes a trace of type &quot;scattermapbox&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceMapbox.initDensityMapbox(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceMapbox,Plotly.NET.TraceMapbox})">
<summary>
initializes a trace of type &quot;densitymapbox&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceMapbox.initChoroplethMapbox(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceMapbox,Plotly.NET.TraceMapbox})">
<summary>
initializes a trace of type &quot;choroplethmapbox&quot; applying the given trace styling function
</summary>
</member>
<member name="T:Plotly.NET.TraceMapbox">
<summary>
The following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout
i.e. geo=&quot;geo2&quot; etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which
case default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.

 The following trace types are compatible with geo subplots via the geo attribute:

 - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps

 - choropleth: colored polygons on outline maps

 The following trace types are compatible with mapbox subplots via the mapbox attribute:

 - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps

 - choroplethmapbox: colored polygons on tile maps

 - densitymapbox: density heatmaps on tile maps
</summary>
</member>
<member name="M:Plotly.NET.TraceTernaryStyle.ScatterTernary``9(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a ternary scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="A">Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="B">Sets the quantity of component `b` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="C">Sets the quantity of component `c` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="SubPlot">Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace</param>
 <param name="TextFont">Sets the text font of this trace</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ClipOnAxis">Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scatterternary has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".</param>
 <param name="Sum">The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary&lt;i&gt;.sum</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceTernary.initScatterTernary(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceTernary,Plotly.NET.TraceTernary})">
<summary>
initializes a trace of type &quot;scatterternary&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceCarpetStyle.SetAxisAnchor(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId})">
<summary>
 Sets the given axis anchor id(s) on a Trace object.
</summary>
</member>
<member name="M:Plotly.NET.TraceCarpetStyle.ScatterCarpet``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a scatter carpet plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="A">Sets the a-axis coordinates.</param>
 <param name="B">Sets the b-axis coordinates.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="Carpet">An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scatterternary has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceCarpetStyle.ContourCarpet``14(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CoordinateType},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``8}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``9}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``10},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a carpet contour scatter plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Z">Sets the z data.</param>
 <param name="A">Sets the a coordinates.</param>
 <param name="AType">If "array", the heatmap's a coordinates are given by "a" (the default behavior when `a` is provided). If "scaled", the heatmap's a coordinates are given by "a0" and "da" (the default behavior when `a` is not provided).</param>
 <param name="A0">Alternate to `a`. Builds a linear space of x coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.</param>
 <param name="DA">Sets the a coordinate step. See `a0` for more info.</param>
 <param name="B">Sets the b coordinates.</param>
 <param name="BType">If "array", the heatmap's a coordinates are given by "b" (the default behavior when `b` is provided). If "scaled", the heatmap's b coordinates are given by "b0" and "db" (the default behavior when `b` is not provided).</param>
 <param name="B0">Alternate to `b`. Builds a linear space of x coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.</param>
 <param name="DB">Sets the a coordinate step. See `b0` for more info.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="ColorBar">Sets the color bar of this trace.</param>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZAuto">Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMid">Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="AutoContour">Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.</param>
 <param name="Carpet">The `carpet` of the carpet axes on which this contour trace lies</param>
 <param name="Contours">Sets the contours of this trace</param>
 <param name="FillColor">Sets the fill color if `contours.type` is "constraint". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceCarpetStyle.Carpet``15(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``10}},Microsoft.FSharp.Core.FSharpOption{``11},Microsoft.FSharp.Core.FSharpOption{``12},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``13}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a carpet to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="X">A one dimensional array of x coordinates matching the dimensions of `a` and `b`.</param>
 <param name="MultiX">A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.</param>
 <param name="Y">A one dimensional array of y coordinates matching the dimensions of `a` and `b`.</param>
 <param name="MultiY">A two dimensional array of y coordinates at each carpet point.</param>
 <param name="A">An array containing values of the first parameter value</param>
 <param name="A0">Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.</param>
 <param name="DA">Sets the a coordinate step. See `a0` for more info.</param>
 <param name="B">An array containing values of the second parameter value</param>
 <param name="B0">Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.</param>
 <param name="DB">Sets the b coordinate step. See `b0` for more info.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="AAxis">Sets this carpet's a axis.</param>
 <param name="BAxis">Sets this carpet's b axis.</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="Carpet">An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie</param>
 <param name="CheaterSlope">The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.</param>
 <param name="Font">Sets the font of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceCarpet.initScatterCarpet(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceCarpet,Plotly.NET.TraceCarpet})">
<summary>
initializes a trace of type &quot;scattercarpet&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceCarpet.initContourCarpet(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceCarpet,Plotly.NET.TraceCarpet})">
<summary>
initializes a trace of type &quot;contourcarpet&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceCarpet.initCarpet(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceCarpet,Plotly.NET.TraceCarpet})">
<summary>
initializes a trace of type &quot;carpet&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Treemap``8(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapRoot},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a treemap chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</param>
 <param name="Labels">Sets the labels of each of the sectors.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextFont">ets the text font of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Tiling">Sets the tiling for this trace.</param>
 <param name="PathBar">Sets the path bar for this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextFont">Sets the font used for `textinfo` lying inside the sector.</param>
 <param name="OutsideTextFont">Sets the font used for `textinfo` lying outside the sector.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Table``4(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TableCells},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TableCells},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a table to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroupTitle">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="ColumnOrder">Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.</param>
 <param name="ColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="MultiColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Cells">Sets the table cells of this trace.</param>
 <param name="Header">Sets the table header of this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Sunburst``8(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.InsideTextOrientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstRoot},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstLeaf},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a sunburst chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</param>
 <param name="Labels">Sets the labels of each of the sectors.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextFont">ets the text font of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextFont">Sets the font used for `textinfo` lying inside the sector.</param>
 <param name="InsideTextOrientation">Controls the orientation of the text inside chart sectors. When set to "auto", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The "horizontal" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The "radial" option orients text along the radius of the sector. The "tangential" option orients text perpendicular to the radius of the sector.</param>
 <param name="OutsideTextFont">Sets the font used for `textinfo` lying outside the sector.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Leaf">Sets the styles fot the leaves of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="Rotation">Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Sankey``5(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SankeyNodes},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SankeyLinks},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a sankey chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Orientation">Sets the orientation of the Sankey diagram.</param>
 <param name="Node">The nodes of the Sankey plot.</param>
 <param name="Link">The links of the Sankey plot.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Arrangement">If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="ValueFormat">Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</param>
 <param name="ValueSuffix">Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Pie``9(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.InsideTextOrientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a pie chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Values">Sets the values of the sectors. If omitted, we count occurrences of each label.</param>
 <param name="Labels">Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</param>
 <param name="DLabel">Sets the label step. See `label0` for more info.</param>
 <param name="Label0">Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.</param>
 <param name="Pull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="MultiPull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="AutoMargin">Determines whether outside text labels can push the margins.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Direction">Specifies the direction at which succeeding sectors follow one another.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextFont">Sets the font used for `textinfo` lying inside the sector.</param>
 <param name="InsideTextOrientation">Controls the orientation of the text inside chart sectors. When set to "auto", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The "horizontal" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The "radial" option orients text along the radius of the sector. The "tangential" option orients text perpendicular to the radius of the sector.</param>
 <param name="OutsideTextFont">Sets the font used for `textinfo` lying outside the sector.</param>
 <param name="Rotation">Instead of the first slice starting at 12 o'clock, rotate to some other angle.</param>
 <param name="ScaleGroup">If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.ParallelCoord``4(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a parallel coordinates plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Dimensions">Sets the dimensions of this trace.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="LabelAngle">Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="LabelSide">Specifies the location of the `label`. "top" positions labels above, next to the title "bottom" positions labels below the graph Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="RangeFont">Sets the range font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.ParallelCategories``2(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SortAlgorithm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a parallel categories plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Counts">The number of observations represented by each state. Defaults to 1 so that each state represents one observation</param>
 <param name="Dimensions">Sets the dimensions of this trace</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="Arrangement">Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.</param>
 <param name="BundleColors">Sort paths so that like colors are bundled together within each category.</param>
 <param name="SortPaths">Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.</param>
 <param name="Hoveron">Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Indicator``4(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IndicatorMode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IndicatorAlignment},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorDelta},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorNumber},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorGauge},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of an indicator to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroupTitle">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="Mode">Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Value">Sets the number to be displayed.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Align">Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered</param>
 <param name="Delta">Sets the styling options for delta diplay.</param>
 <param name="Number">Sets the styling options for number diplay.</param>
 <param name="Gauge">Sets the styling options for gauge diplay.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.Icicle``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IcicleCount},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleRoot},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleLeaf},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of an icicle chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroupTitle">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</param>
 <param name="Labels">Sets the labels of each of the sectors.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextFont">ets the text font of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Tiling">Sets the tiling for this trace.</param>
 <param name="PathBar">Sets the path bar for this trace.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextFont">Sets the font used for `textinfo` lying inside the sector.</param>
 <param name="OutsideTextFont">Sets the font used for `textinfo` lying outside the sector.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Leaf">Sets the leaves fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomainStyle.FunnelArea``9(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the styles of a funnel area chart to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Values">Sets the values of the sectors. If omitted, we count occurrences of each label.</param>
 <param name="Labels">Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</param>
 <param name="DLabel">Sets the label step. See `label0` for more info.</param>
 <param name="Label0">Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextFont">ets the text font of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="AspectRatio">Sets the ratio between height and width</param>
 <param name="BaseRatio">Sets the ratio between bottom length and maximum top length.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="InsideTextFont">Sets the font used for `textinfo` lying inside the sector.</param>
 <param name="ScaleGroup">If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceDomain.initTreemap(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;treemap&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initTable(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;Table&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initSunburst(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;sunburst&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initSankey(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;sankey&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initPie(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;pie&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initParallelCoord(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;parcoords&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initParallelCategories(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;parcats&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initIndicator(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;indicator&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initIcicle(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;icicle&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceDomain.initFunnelArea(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceDomain,Plotly.NET.TraceDomain})">
<summary>
initializes a trace of type &quot;funnelarea&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.TraceSmithStyle.ScatterSmith``7(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverInfo},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Selection},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverOn},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Create a function that applies the styles of a scatter smith plot to a Trace object
 </summary>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Visible">Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the legend group title for this trace.</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="Imag">Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="Real">Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="TextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="MultiTextTemplate">Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.</param>
 <param name="HoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="MultiHoverText">Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.</param>
 <param name="HoverInfo">Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</param>
 <param name="HoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="MultiHoverTemplate">Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example "&lt;extra&gt;{fullData.name}&lt;/extra&gt;". To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</param>
 <param name="Meta">Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</param>
 <param name="CustomData">Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements</param>
 <param name="Subplot">Sets a reference between this trace's data coordinates and a smith subplot. If "smith" (the default value), the data refer to `layout.smith`. If "smith2", the data refer to `layout.smith2`, and so on.</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="SelectedPoints">Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</param>
 <param name="Selected">Sets the style of selected points of this trace.</param>
 <param name="Unselected">Sets the style of unselected points of this trace.</param>
 <param name="ClipOnAxis">Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".</param>
 <param name="ConnectGaps">Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="HoverOn">Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".</param>
 <param name="UIRevision">Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</param>
</member>
<member name="M:Plotly.NET.TraceSmith.initScatterSmith(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.TraceSmith,Plotly.NET.TraceSmith})">
<summary>
initializes a trace of type &quot;scattersmith&quot; applying the given trace styling function
</summary>
</member>
<member name="M:Plotly.NET.Config.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.Edits},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.ToImageButtonOptions},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.ModeBarButton}})">
 <summary>
 Returns a function that applies the given styles to a Config object.
 </summary>
 <param name="StaticPlot">Determines whether the plot is interactive or not. (default: false)</param>
 <param name="PlotlyServerUrl">When set it determines base URL for the 'Edit in Chart Studio'/`showEditInChartStudio`/`showSendToCloud` mode bar button', and the showLink/sendData on-graph link. To enable sending your data to Chart Studio Cloud, you need to' set both `plotlyServerURL` to \'https://chart-studio.plotly.com\' and also set `showSendToCloud` to true.</param>
 <param name="Editable">Determines whether the graph is editable or not. Sets all pieces of `edits` unless a separate `edits` config item overrides individual parts.</param>
 <param name="Edits">Object holding individual editable pieces of the graph.</param>
 <param name="Autosizable">Determines whether the graphs are plotted with respect to layout.autosize:true and infer its container size. (default: false)</param>
 <param name="Responsive">Determines whether to change the layout size when window is resized.</param>
 <param name="ShowSendToCloud">Should we include a ModeBar button, labeled "Edit in Chart Studio",that sends this chart to chart-studio.plotly.com (formerly plot.ly) or another plotly server as specified by `plotlyServerURL` for editing, export, etc? Note that this button can (depending on `plotlyServerURL` being set) send your data to an external server. However that server does not persist your data until you arrive at the Chart Studio and explicitly click "Save".</param>
 <param name="ShowEditInChartStudio">Same as `showSendToCloud`, but use a pencil icon instead of a floppy-disk. Note that if both `showSendToCloud` and `showEditInChartStudio` are turned,  only `showEditInChartStudio` will be honored.</param>
 <param name="ToImageButtonOptions">Statically override options for toImage modebar button</param>
 <param name="ModeBarButtonsToAdd">ModeBar buttons to add to the graph.</param>
</member>
<member name="M:Plotly.NET.Config.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.Edits},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.ToImageButtonOptions},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.ModeBarButton}})">
 <summary>
 Returns a new Config Object with the given styling.
 </summary>
 <param name="StaticPlot">Determines whether the plot is interactive or not. (default: false)</param>
 <param name="PlotlyServerUrl">When set it determines base URL for the 'Edit in Chart Studio'/`showEditInChartStudio`/`showSendToCloud` mode bar button', and the showLink/sendData on-graph link. To enable sending your data to Chart Studio Cloud, you need to' set both `plotlyServerURL` to \'https://chart-studio.plotly.com\' and also set `showSendToCloud` to true.</param>
 <param name="Editable">Determines whether the graph is editable or not. Sets all pieces of `edits` unless a separate `edits` config item overrides individual parts.</param>
 <param name="Edits">Object holding individual editable pieces of the graph.</param>
 <param name="Autosizable">Determines whether the graphs are plotted with respect to layout.autosize:true and infer its container size. (default: false)</param>
 <param name="Responsive">Determines whether to change the layout size when window is resized.</param>
 <param name="ShowSendToCloud">Should we include a ModeBar button, labeled "Edit in Chart Studio",that sends this chart to chart-studio.plotly.com (formerly plot.ly) or another plotly server as specified by `plotlyServerURL` for editing, export, etc? Note that this button can (depending on `plotlyServerURL` being set) send your data to an external server. However that server does not persist your data until you arrive at the Chart Studio and explicitly click "Save".</param>
 <param name="ShowEditInChartStudio">Same as `showSendToCloud`, but use a pencil icon instead of a floppy-disk. Note that if both `showSendToCloud` and `showEditInChartStudio` are turned,  only `showEditInChartStudio` will be honored.</param>
 <param name="ToImageButtonOptions">Statically override options for toImage modebar button</param>
 <param name="ModeBarButtonsToAdd">ModeBar buttons to add to the graph.</param>
</member>
<member name="T:Plotly.NET.Config">
<summary>
 The Config object gets passed to the plotly renderer and contains render-specific options.
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithZErrorStyle``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Applies the given styles to the error object(s) in the z dimension of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.Chart.WithZError(Plotly.NET.TraceObjects.Error)">
 <summary>
 Sets the error in the z dimension for the chart's trace(s).

 If there is already an error set, the objects are combined.
 </summary>
 <param name="zError">The new error for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithZAxisStyle``3(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given z axis styles on the input chart's scene.

 If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.
 </summary>
 <param name="TitleText">Sets the text of the axis title.</param>
 <param name="TitleFont">Sets the font of the axis title.</param>
 <param name="TitleStandoff">Sets the standoff distance (in px) between the axis labels and the title text.</param>
 <param name="Title">Sets the Title (use this for more finegrained control than the other title-associated arguments)</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="MinMax">Tuple of (Min*Max value). Sets the range of this axis (the axis will go from Min to Max). If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2).</param>
 <param name="Mirror">Determines if and how the axis lines or/and ticks are mirrored to the opposite side of the plotting area.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis.</param>
 <param name="SpikeColor">Sets the spike color. If not set, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Domain">Tuple of (X*Y fractions). Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="BackgroundColor">Sets the background color of this axis' wall. (Only has an effect on 3D scenes)</param>
 <param name="ShowBackground">Sets whether or not this axis' wall has a background color. (Only has an effect on 3D scenes)</param>
 <param name="Id">The target scene id on which the axis styles should be applied. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithZAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given z axis on the input chart's scene, optionally passing a scene axis id.

 If there is already an axis set at the given id, the axis objects are combined.
 </summary>
 <param name="zAxis">The z axis to set on the chart's layout</param>
 <param name="Id">The target scene id on which the axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithYErrorStyle``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Applies the given styles to the error object(s) in the y dimension of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.Chart.WithYError(Plotly.NET.TraceObjects.Error)">
 <summary>
 Sets the error in the y dimension for the chart's trace(s).

 If there is already an error set, the objects are combined.
 </summary>
 <param name="yError">The new error for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithYAxisStyle``3(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
 <summary>
 Sets the given y axis styles on the input chart's layout.

 If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.
 </summary>
 <param name="TitleText">Sets the text of the axis title.</param>
 <param name="TitleFont">Sets the font of the axis title.</param>
 <param name="TitleStandoff">Sets the standoff distance (in px) between the axis labels and the title text.</param>
 <param name="Title">Sets the Title (use this for more finegrained control than the other title-associated arguments)</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="MinMax">Tuple of (Min*Max value). Sets the range of this axis (the axis will go from Min to Max). If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2).</param>
 <param name="Mirror">Determines if and how the axis lines or/and ticks are mirrored to the opposite side of the plotting area.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis.</param>
 <param name="SpikeColor">Sets the spike color. If not set, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Domain">Tuple of (X*Y fractions). Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="BackgroundColor">Sets the background color of this axis' wall. (Only has an effect on 3D scenes)</param>
 <param name="ShowBackground">Sets whether or not this axis' wall has a background color. (Only has an effect on 3D scenes)</param>
 <param name="Id">The target axis id on which the styles should be applied. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithYAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
 <summary>
 Sets the given y axis on the input chart's layout, optionally passing a target axis id.

 If there is already an axis set at the given id, the axis objects are combined.
 </summary>
 <param name="yAxis">The y axis to set on the chart's layout</param>
 <param name="Id">The target axis id with which the axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithXErrorStyle``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Applies the given styles to the error object(s) in the x dimension of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.Chart.WithXError(Plotly.NET.TraceObjects.Error)">
 <summary>
 Sets the error in the x dimension for the chart's trace(s).

 If there is already an error set, the objects are combined.
 </summary>
 <param name="xError">The new error for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithXAxisStyle``3(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
 <summary>
 Sets the given x axis styles on the input chart's layout.

 If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.
 </summary>
 <param name="TitleText">Sets the text of the axis title.</param>
 <param name="TitleFont">Sets the font of the axis title.</param>
 <param name="TitleStandoff">Sets the standoff distance (in px) between the axis labels and the title text.</param>
 <param name="Title">Sets the Title (use this for more finegrained control than the other title-associated arguments)</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="MinMax">Tuple of (Min*Max value). Sets the range of this axis (the axis will go from Min to Max). If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2).</param>
 <param name="Mirror">Determines if and how the axis lines or/and ticks are mirrored to the opposite side of the plotting area.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis.</param>
 <param name="SpikeColor">Sets the spike color. If not set, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Domain">Tuple of (X*Y fractions). Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="BackgroundColor">Sets the background color of this axis' wall. (Only has an effect on 3D scenes)</param>
 <param name="ShowBackground">Sets whether or not this axis' wall has a background color. (Only has an effect on 3D scenes)</param>
 <param name="Id">The target axis id on which the styles should be applied. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithXAxisRangeSlider(Plotly.NET.LayoutObjects.RangeSlider,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
<summary>
 Sets the range slider for the xAxis
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithXAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
 <summary>
 Sets the given x axis on the input chart's layout, optionally passing a target axis id.

 If there is already an axis set at the given id, the axis objects are combined.
 </summary>
 <param name="xAxis">The x axis to set on the chart's layout</param>
 <param name="Id">The target axis id with which the axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithUpdateMenus(System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.UpdateMenu},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>

 </summary>
 <param name="updateMenus">The updatmenus to add to the input charts layout</param>
 <param name="Append">If true, the input images will be appended to existing annotations, otherwise existing annotations will be removed (default: true)</param>
</member>
<member name="M:Plotly.NET.Chart.WithTraceInfo(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Visible},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title})">
 <summary>
 Sets trace information on the given chart.
 </summary>
 <param name="Name">Sets the name of the chart's trace(s). When the chart is a multichart (it contains multiple traces), the name is suffixed by '_%i' where %i is the index of the trace.</param>
 <param name="Visible">Wether or not the chart's traces are visible</param>
 <param name="ShowLegend">Determines whether or not item(s) corresponding to this chart's trace(s) is/are shown in the legend.</param>
 <param name="LegendRank">Sets the legend rank for the chart's trace(s). Items and groups with smaller ranks are presented on top/left side while with `"reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</param>
 <param name="LegendGroup">Sets the legend group for the chart's trace(s). Traces part of the same legend group hide/show at the same time when toggling legend items.</param>
 <param name="LegendGroupTitle">Sets the title for the chart's trace legend group </param>
</member>
<member name="M:Plotly.NET.Chart.withTernaryStyle``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Ternary styles on the target Ternary object on the input chart's layout.

 If there is already a Ternary set, the styles are applied to it. If there is no Ternary present, a new Ternary object with the given styles will be set.
 </summary>
 <param name="AAxis">Sets the ternary A Axis</param>
 <param name="BAxis">Sets the ternary B Axis</param>
 <param name="CAxis">Sets the ternary C Axis</param>
 <param name="Domain">Sets the ternary domain</param>
 <param name="Sum">The number each triplet should sum to, and the maximum range of each axis</param>
 <param name="BGColor">Sets the background color of the ternary layout.</param>
 <param name="Id">The target Ternary id</param>
</member>
<member name="M:Plotly.NET.Chart.WithTernary(Plotly.NET.LayoutObjects.Ternary,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Ternary for the chart's layout

 If there is already a Ternary set, the objects are combined.
 </summary>
 <param name="ternary">The Ternary to set on the chart's layout</param>
 <param name="Id">The target ternary id on which the Ternary should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithSmithStyle(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ImaginaryAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RealAxis},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Smith styles on the target Smith object on the input chart's layout.

 If there is already a Smith set, the styles are applied to it. If there is no Smith present, a new Smith object with the given styles will be set.
 </summary>
</member>
<member name="M:Plotly.NET.Chart.WithSmith(Plotly.NET.LayoutObjects.Smith,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Smith for the chart's layout

 If there is already a Smith set, the objects are combined.
 </summary>
 <param name="smith">The new Smith for the chart's layout</param>
 <param name="Id">The target smith id on which the smith object should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithShapes(System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>

 </summary>
 <param name="shapes">The shapes to add to the input charts layout</param>
 <param name="Append">If true, the input annotations will be appended to existing annotations, otherwise existing annotations will be removed (default: true)</param>
</member>
<member name="M:Plotly.NET.Chart.WithSceneStyle(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AspectMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AspectRatio},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Camera},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Scene styles on the target Scene object on the input chart's layout.

 If there is already a Scene set, the styles are applied to it. If there is no Scene present, a new Scene object with the given styles will be set.
 </summary>
 <param name="Annotations">An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="AspectMode">If "cube", this scene's axes are drawn as a cube, regardless of the axes' ranges. If "data", this scene's axes are drawn in proportion with the axes' ranges. If "manual", this scene's axes are drawn in proportion with the input of "aspectratio" (the default behavior if "aspectratio" is provided). If "auto", this scene's axes are drawn using the results of "data" except when one axis is more than four times the size of the two others, where in that case the results of "cube" are used.</param>
 <param name="AspectRatio">Sets this scene's axis aspectratio.</param>
 <param name="BGColor">Sets this scene's background color.</param>
 <param name="Camera">Sets this scene's camera</param>
 <param name="Domain">Sets this scene's domain</param>
 <param name="DragMode">Determines the mode of drag interactions for this scene.</param>
 <param name="HoverMode">Determines the mode of hover interactions for this scene.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.</param>
 <param name="XAxis">Sets this scene's xaxis</param>
 <param name="YAxis">Sets this scene's yaxis</param>
 <param name="ZAxis">Sets this scene's zaxis</param>
 <param name="Id">The target scene id</param>
</member>
<member name="M:Plotly.NET.Chart.WithScene(Plotly.NET.LayoutObjects.Scene,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Scene for the chart's layout

 If there is already a Scene set, the objects are combined.
 </summary>
 <param name="scene">The Scene to set on the chart's layout</param>
 <param name="Id">The target scene id on which the scene should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithRealAxis(Plotly.NET.LayoutObjects.RealAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the RealAxis on the smith object with the given id on the input chart's layout.

 If there is already a RealAxis set on the smith object, the RealAxis objects are combined.
 </summary>
 <param name="realAxis">The new RealAxis for the chart layout's smith object</param>
 <param name="Id">The target smith id on which the RealAxis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithRadialAxis(Plotly.NET.LayoutObjects.RadialAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the RadialAxis on the polar object with the given id on the input chart's layout.

 If there is already a RadialAxis set on the polar object, the RadialAxis objects are combined.
 </summary>
 <param name="radialAxis">The new RadialAxis for the chart layout's polar object</param>
 <param name="Id">The target polar id on which the RadialAxis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithPolarStyle(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RadialAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AngularAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PolarGridShape},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Polar styles on the target Polar object on the input chart's layout.

 If there is already a Polar set, the styles are applied to it. If there is no Polar present, a new Polar object with the given styles will be set.
 </summary>
 <param name="Domain">Sets the domain of this polar subplot</param>
 <param name="Sector">Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with "0" corresponding to rightmost limit of the polar subplot.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the polar subplot.</param>
 <param name="BGColor">Set the background color of the subplot</param>
 <param name="RadialAxis">Sets the radial axis of the polar subplot.</param>
 <param name="AngularAxis">Sets the angular axis of the polar subplot.</param>
 <param name="GridShape">Determines if the radial axis grid lines and angular axis line are drawn as "circular" sectors or as "linear" (polygon) sectors. Has an effect only when the angular axis has `type` "category". Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is "circular" (so that radial axis scale is the same as the data scale).</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.</param>
 <param name="Id">The target polar id</param>
</member>
<member name="M:Plotly.NET.Chart.WithPolar(Plotly.NET.LayoutObjects.Polar,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Polar for the chart's layout

 If there is already a Polar set, the objects are combined.
 </summary>
 <param name="polar">The new Polar for the chart's layout</param>
 <param name="Id">The target polar id on which the polar object should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithMathTex(Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Adds the necessary script tags to render tex strings to the chart&apos;s DisplayOptions
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithMarkerStyle(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Gradient},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Applies the given styles to the marker object(s) of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</param>
 <param name="Color">Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</param>
 <param name="Colors">Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the marker's color bar.</param>
 <param name="Colorscale"></param>
 <param name="Gradient">Sets the marker's gradient</param>
 <param name="Outline">Sets the marker's outline.</param>
 <param name="Opacity">Sets the marker opacity.</param>
 <param name="MaxDisplayed">Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.</param>
 <param name="MultiOpacity">Sets the individual marker opacity.</param>
 <param name="Pattern">Sets the pattern within the marker.</param>
 <param name="ReverseScale">Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.</param>
 <param name="Size">Sets the marker's size.</param>
 <param name="MultiSize">Sets the individual marker's size.</param>
 <param name="SizeMin">Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</param>
 <param name="SizeMode">Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</param>
 <param name="SizeRef">Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</param>
 <param name="Symbol">Sets the marker symbol.</param>
 <param name="MultiSymbol">Sets the individual marker symbols.</param>
 <param name="Symbol3D">Sets the marker symbol for 3d traces.</param>
 <param name="MultiSymbol3D">Sets the individual marker symbols for 3d traces.</param>
 <param name="OutlierColor">Sets the color of the outlier sample points.</param>
 <param name="OutlierWidth">Sets the width of the outlier sample points.</param>
</member>
<member name="M:Plotly.NET.Chart.WithMarker(Plotly.NET.TraceObjects.Marker)">
 <summary>
 Sets the marker for the chart's trace(s).

 If there is already a marker set, the objects are combined.
 </summary>
 <param name="marker">The new marker for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.withMapboxStyle(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxStyle},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.MapboxLayer}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Mapbox styles on the target Mapbox object on the input chart's layout.

 If there is already a Mapbox set, the styles are applied to it. If there is no Mapbox present, a new Mapbox object with the given styles will be set.
 </summary>
 <param name="Domain">Sets the domain of the Mapbox subplot</param>
 <param name="AccessToken">Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.</param>
 <param name="Style">Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`. These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option. Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox/name/version</param>
 <param name="Center">Sets the (lon,lat) coordinates of the center of the map view</param>
 <param name="Zoom">Sets the zoom level of the map (mapbox.zoom).</param>
 <param name="Bearing">Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).</param>
 <param name="Pitch">Sets the pitch angle of the map (in degrees, where "0" means perpendicular to the surface of the map) (mapbox.pitch).</param>
 <param name="Layers">Sets the layers of this Mapbox</param>
 <param name="Id">The target mapbox id</param>
</member>
<member name="M:Plotly.NET.Chart.WithMapbox(Plotly.NET.LayoutObjects.Mapbox,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Mapbox for the chart's layout

 If there is already a Mapbox set, the objects are combined.
 </summary>
 <param name="mapbox">The Mapbox to set on the chart's layout</param>
 <param name="Id">The target mapbox id on which the Mapbox should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithLineStyle(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Applies the given styles to the line object(s) of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</param>
 <param name="Color">Sets the line color.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="Colorscale">Sets the line colorscale</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="ShowScale">Wether or not to show the color bar</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="Dash">Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").</param>
 <param name="Shape">Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</param>
 <param name="Simplify">Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</param>
 <param name="Smoothing">Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).</param>
 <param name="Width">Sets the line width (in px).</param>
 <param name="MultiWidth">Sets the individual line width (in px).</param>
 <param name="OutlierColor">Sets the color of the outline of outliers</param>
 <param name="OutlierWidth">Sets the width of the outline of outliers</param>
</member>
<member name="M:Plotly.NET.Chart.WithLine(Plotly.NET.Line)">
 <summary>
 Sets the line for the chart's trace(s).

 If there is already a Line set, the objects are combined.
 </summary>
 <param name="line">The new line for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithLegendStyle(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceGroupClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemSizing},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceOrder},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.YAnchorPosition})">
 <summary>
 Sets the given Legend styles on the input chart's Legend.

 If there is already a Legend set , the styles are applied to it. If there is no Legend present, a new Legend object with the given styles will be set.
 </summary>
 <param name="BGColor">Sets the legend background color. Defaults to `layout.paper_bgcolor`.</param>
 <param name="BorderColor">Sets the color of the border enclosing the legend.</param>
 <param name="Borderwidth">Sets the width (in px) of the border enclosing the legend.</param>
 <param name="Font">Sets the font used to text the legend items.</param>
 <param name="GroupClick">Determines the behavior on legend group item click. "toggleitem" toggles the visibility of the individual item clicked on the graph. "togglegroup" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.</param>
 <param name="GroupTitleFont">Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.</param>
 <param name="ItemClick">Determines the behavior on legend item click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item click interactions.</param>
 <param name="ItemDoubleClick">Determines the behavior on legend item double-click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item double-click interactions.</param>
 <param name="ItemSizing">Determines if the legend items symbols scale with their corresponding "trace" attributes or remain "constant" independent of the symbol size on the graph.</param>
 <param name="ItemWidth">Sets the width (in px) of the legend item symbols (the part other than the title.text).</param>
 <param name="Orientation">Sets the orientation of the legend.</param>
 <param name="Title">Sets the title of the legend.</param>
 <param name="TraceGroupGap">Sets the amount of vertical space (in px) between legend groups.</param>
 <param name="TraceOrder">Determines the order at which the legend items are displayed. If "normal", the items are displayed top-to-bottom in the same order as the input data. If "reversed", the items are displayed in the opposite order as "normal". If "grouped", the items are displayed in groups (when a trace `legendgroup` is provided). if "grouped+reversed", the items are displayed in the opposite order as "grouped".</param>
 <param name="UIRevision">Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.</param>
 <param name="VerticalAlign">Sets the vertical alignment of the symbols with respect to their associated text.</param>
 <param name="X">Sets the x position (in normalized coordinates) of the legend. Defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends.</param>
 <param name="XAnchor">Sets the legend's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the legend. Value "auto" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.</param>
 <param name="Y">Sets the y position (in normalized coordinates) of the legend. Defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends on graphs w/o range sliders and defaults to "1.1" for horizontal legends on graph with one or multiple range sliders.</param>
 <param name="YAnchor">Sets the legend's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the legend. Value "auto" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.</param>
</member>
<member name="M:Plotly.NET.Chart.WithLegend(Plotly.NET.LayoutObjects.Legend)">
 <summary>
 Sets the Legend for the chart's layout

 If there is already a Legend set, the objects are combined.
 </summary>
 <param name="legend">The new Legend for the chart's layout</param>
</member>
<member name="M:Plotly.NET.Chart.WithLayoutStyle``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Legend},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Margin},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.UniformText},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.DefaultColorScales},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ModeBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ClickMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SelectDirection},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Transition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{DynamicObj.DynamicObj},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LayoutGrid},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Shape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ActiveShape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.WaterfallMode},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.FunnelMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Shape}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.LayoutImage}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Slider}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.UpdateMenu}})">
 <summary>
 Applies the given styles to the chart's Layout object. Overwrites attributes with the same name that are already set.
 </summary>
 <param name="Title">Sets the title of the layout.</param>
 <param name="ShowLegend">Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.</param>
 <param name="Legend">Sets the legend styles of the layout.</param>
 <param name="Margin">Sets the margins around the layout.</param>
 <param name="AutoSize">Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.</param>
 <param name="Width">Sets the plot's width (in px).</param>
 <param name="Height">Sets the plot's height (in px).</param>
 <param name="Font">Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.</param>
 <param name="UniformText">Determines how the font size for various text elements are uniformed between each trace type.</param>
 <param name="Separators">Sets the decimal and thousand separators. For example, ". " puts a '.' before decimals and a space between thousands. In English locales, dflt is ".," but other locales may alter this default.</param>
 <param name="PaperBGColor">Sets the background color of the paper where the graph is drawn.</param>
 <param name="PlotBGColor">Sets the background color of the plotting area in-between x and y axes.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.</param>
 <param name="Colorscale">Sets the default colorscales that are used by plots using autocolorscale.</param>
 <param name="Colorway">Sets the default trace colors.</param>
 <param name="ModeBar">Sets the modebar of the layout.</param>
 <param name="HoverMode">Determines the mode of hover interactions. If "closest", a single hoverlabel will appear for the "closest" point within the `hoverdistance`. If "x" (or "y"), multiple hoverlabels will appear for multiple points at the "closest" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If "x unified" (or "y unified"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.</param>
 <param name="ClickMode">Determines the mode of single click interactions. "event" is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes "lasso" and "select", but with no event data attached (kept for compatibility reasons). The "select" flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. "select" with `hovermode`: "x" can be confusing, consider explicitly setting `hovermode`: "closest" when using this feature. Selection events are sent accordingly as long as "event" flag is set as well. When the "event" flag is missing, `plotly_click` and `plotly_selected` events are not fired.</param>
 <param name="DragMode">Determines the mode of drag interactions. "select" and "lasso" apply only to scatter traces with markers or text. "orbit" and "turntable" apply only to 3D scenes.</param>
 <param name="SelectDirection">When `dragmode` is set to "select", this limits the selection of the drag to horizontal, vertical or diagonal. "h" only allows horizontal selection, "v" only vertical, "d" only diagonal and "any" sets no limit.</param>
 <param name="HoverDistance">Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.</param>
 <param name="SpikeDistance">Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.</param>
 <param name="Hoverlabel">Sets the style ov hover labels.</param>
 <param name="Transition">Sets transition options used during Plotly.react updates.</param>
 <param name="DataRevision">If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.</param>
 <param name="UIRevision">Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision="time"` and `yaxis.uirevision="cost"`. Then if only the y data is changed, you can update `yaxis.uirevision="quantity"` and the y axis range will reset but the x axis range will retain any user-driven zoom.</param>
 <param name="EditRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="SelectRevision">Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</param>
 <param name="Template">Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace. Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.</param>
 <param name="Meta">Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.</param>
 <param name="Computed">Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in "full-json" mode.</param>
 <param name="Grid">Sets the layout grid for arranging multiple plots</param>
 <param name="Calendar">Sets the default calendar system to use for interpreting and displaying dates throughout the plot.</param>
 <param name="NewShape">Controls the behavior of newly drawn shapes</param>
 <param name="ActiveShape">Sets the styling of the active shape</param>
 <param name="HideSources">Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).</param>
 <param name="BarGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="BarMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="BarNorm">Sets the normalization for bar traces on the graph. With "fraction", the value of each bar is divided by the sum of all values at that location coordinate. "percent" is the same but multiplied by 100 to show percentages.</param>
 <param name="ExtendPieColors">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="HiddenLabels">If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="PieColorWay">Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.</param>
 <param name="BoxGap">Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have "width" set.</param>
 <param name="BoxGroupGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="BoxMode">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGap">Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinGroupGap">Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have "width" set.</param>
 <param name="ViolinMode">Determines how violins at the same location coordinate are displayed on the graph. If "group", the violins are plotted next to one another centered around the shared location. If "overlay", the violins are plotted over one another, you might need to set "opacity" to see them multiple violins. Has no effect on traces that have "width" set.</param>
 <param name="WaterfallGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="WaterfallGroupGap">Sets the gap (in plot fraction) between bars of the same location coordinate.</param>
 <param name="WaterfallMode">Determines how bars at the same location coordinate are displayed on the graph. With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="FunnelGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelGroupGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
 <param name="FunnelMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="ExtendFunnelAreaColors">If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="FunnelAreaColorWay">Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.</param>
 <param name="ExtendSunBurstColors">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="SunBurstColorWay">If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="ExtendTreeMapColors">If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="TreeMapColorWay">Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.</param>
 <param name="ExtendIcicleColors">If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.</param>
 <param name="IcicleColorWay">Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.</param>
 <param name="Annotations">A collection containing all Annotations of this layout. An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="Shapes">A collection containing all Shapes of this layout.</param>
 <param name="Images">A collection containing all Images of this layout. </param>
 <param name="Sliders">A collection containing all Sliders of this layout. </param>
 <param name="UpdateMenus">A collection containing all UpdateMenus of this layout. </param>
</member>
<member name="M:Plotly.NET.Chart.WithLayoutImages(System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.LayoutImage},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>

 </summary>
 <param name="images">The images to add to the input charts layout</param>
 <param name="Append">If true, the input images will be appended to existing annotations, otherwise existing annotations will be removed (default: true)</param>
</member>
<member name="M:Plotly.NET.Chart.WithLayoutGridStyle(Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
 <summary>
 Sets the given LayoutGrid styles on the input chart's LayoutGrid.

 If there is already a LayoutGrid set , the styles are applied to it. If there is no LayoutGrid present, a new LayoutGrid object with the given styles will be set.
 </summary>
 <param name ="Rows">The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="Columns">The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="SubPlots">Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</param>
 <param name ="XAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</param>
 <param name ="YAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</param>
 <param name ="RowOrder">Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</param>
 <param name ="Pattern">If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</param>
 <param name ="XGap">Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</param>
 <param name ="YGap">Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</param>
 <param name ="Domain">Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</param>
 <param name ="XSide">Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.</param>
 <param name ="YSide">Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.</param>
</member>
<member name="M:Plotly.NET.Chart.WithLayoutGrid(Plotly.NET.LayoutObjects.LayoutGrid)">
 <summary>
 Sets the LayoutGrid for the chart's layout

 If there is already a LayoutGrid set, the objects are combined.
 </summary>
 <param name="layoutGrid">The new LayoutGrid for the chart's layout</param>
</member>
<member name="M:Plotly.NET.Chart.WithLayout(Plotly.NET.Layout)">
 <summary>
 Sets the given layout on the input chart.

 If there is already an layout set, the objects are combined.
 </summary>
</member>
<member name="M:Plotly.NET.Chart.WithImaginaryAxis(Plotly.NET.LayoutObjects.ImaginaryAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the ImaginaryAxis on the smith object with the given id on the input chart's layout.

 If there is already a ImaginaryAxis set on the smith object, the ImaginaryAxis objects are combined.
 </summary>
 <param name="imaginaryAxis">The new ImaginaryAxis for the chart layout's smith object</param>
 <param name="Id">The target smith id on which the ImaginaryAxis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithHeadTags(System.Collections.Generic.IEnumerable{System.String},Plotly.NET.GenericChart.GenericChart)">
<summary>
 Sets the given additional head tags on the chart&apos;s DisplayOptions. They will be included in the document&apos;s &lt;head&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithGeoStyle(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoFitBounds},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoResolution},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoScope},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjection},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Geo styles on the target geo on the input chart's layout.

 If there is already a Geo set, the styles are applied to it. If there is no Geo present, a new Geo object with the given styles will be set.
 </summary>
 <param name="FitBounds">Determines if and how this subplot's view settings are auto-computed to fit trace data</param>
 <param name="Resolution">Sets the resolution of the base layers</param>
 <param name="Scope">Set the scope of the map.</param>
 <param name="Projection">Determines the type of projection used to display the map</param>
 <param name="Center">Sets the (lon,lat) coordinates of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise. For all projection types, the map's latitude center lies at the middle of the latitude range by default.</param>
 <param name="Visible">Wether or not the base layers are visible</param>
 <param name="Domain">The domain of this geo subplot</param>
 <param name="ShowCoastLines">Sets whether or not the coastlines are drawn.</param>
 <param name="CoastLineColor">Sets the coastline color.</param>
 <param name="CoastLineWidth">Sets the coastline stroke width (in px).</param>
 <param name="ShowLand">Sets whether or not land masses are filled in color.</param>
 <param name="LandColor">Sets the land mass color.</param>
 <param name="ShowOcean">Sets whether or not oceans are filled in color.</param>
 <param name="OceanColor">Sets the ocean color</param>
 <param name="ShowLakes">Sets whether or not lakes are drawn.</param>
 <param name="LakeColor">Sets the color of the lakes.</param>
 <param name="ShowRivers">Sets whether or not rivers are drawn.</param>
 <param name="RiverColor">Sets color of the rivers.</param>
 <param name="RiverWidth">Sets the stroke width (in px) of the rivers.</param>
 <param name="ShowCountries">Sets whether or not country boundaries are drawn.</param>
 <param name="CountryColor">Sets line color of the country boundaries.</param>
 <param name="CountryWidth">Sets line width (in px) of the country boundaries.</param>
 <param name="ShowSubunits">Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.</param>
 <param name="SubunitColor">Sets the color of the subunits boundaries.</param>
 <param name="SubunitWidth">Sets the stroke width (in px) of the subunits boundaries.</param>
 <param name="ShowFrame">Sets whether or not a frame is drawn around the map.</param>
 <param name="FrameColor">Sets the color the frame.</param>
 <param name="FrameWidth">Sets the stroke width (in px) of the frame.</param>
 <param name="BgColor">Set the background color of the map</param>
 <param name="LatAxis">Sets the latitudinal axis for this geo trace</param>
 <param name="LonAxis">Sets the longitudinal axis for this geo trace</param>
 <param name="Id">the target geo id</param>
</member>
<member name="M:Plotly.NET.Chart.WithGeoProjection(Plotly.NET.StyleParam.GeoProjectionType,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjectionRotation},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the given Geo Projection styles on the target geo on the input chart's layout.

 If there is already a Geo set, the styles are applied to it. If there is no Geo present, a new Geo object with the given styles will be set.
 </summary>
 <param name="projectionType">Sets the type of projection</param>
 <param name="Rotation">Sets the rotation applied to the map</param>
 <param name="Parallels">For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.</param>
 <param name="Scale">Zooms in or out on the map view. A scale of "1" corresponds to the largest zoom level that fits the map's lon and lat ranges.</param>
 <param name="Id">the target geo id</param>
</member>
<member name="M:Plotly.NET.Chart.WithGeo(Plotly.NET.LayoutObjects.Geo,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the Geo for the chart's layout

 If there is already a Geo set, the objects are combined.
 </summary>
 <param name="geo">The new Geo for the chart's layout</param>
 <param name="Id">The target geo id on which the Geo should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithDescription(Plotly.NET.ChartDescription,Plotly.NET.GenericChart.GenericChart)">
<summary>
 Show chart in browser
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithConfigStyle(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.Edits},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ConfigObjects.ToImageButtonOptions},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.ModeBarButton}})">
 <summary>
 Applies the given styles to the chart's Config object. Overwrites attributes with the same name that are already set.
 </summary>
 <param name="StaticPlot">Determines whether the plot is interactive or not. (default: false)</param>
 <param name="PlotlyServerUrl">When set it determines base URL for the 'Edit in Chart Studio'/`showEditInChartStudio`/`showSendToCloud` mode bar button', and the showLink/sendData on-graph link. To enable sending your data to Chart Studio Cloud, you need to' set both `plotlyServerURL` to \'https://chart-studio.plotly.com\' and also set `showSendToCloud` to true.</param>
 <param name="Editable">Determines whether the graph is editable or not. Sets all pieces of `edits` unless a separate `edits` config item overrides individual parts.</param>
 <param name="Edits">Object holding individual editable pieces of the graph.</param>
 <param name="Autosizable">Determines whether the graphs are plotted with respect to layout.autosize:true and infer its container size. (default: false)</param>
 <param name="Responsive">Determines whether to change the layout size when window is resized.</param>
 <param name="ShowSendToCloud">Should we include a ModeBar button, labeled "Edit in Chart Studio",that sends this chart to chart-studio.plotly.com (formerly plot.ly) or another plotly server as specified by `plotlyServerURL` for editing, export, etc? Note that this button can (depending on `plotlyServerURL` being set) send your data to an external server. However that server does not persist your data until you arrive at the Chart Studio and explicitly click "Save".</param>
 <param name="ShowEditInChartStudio">Same as `showSendToCloud`, but use a pencil icon instead of a floppy-disk. Note that if both `showSendToCloud` and `showEditInChartStudio` are turned,  only `showEditInChartStudio` will be honored.</param>
 <param name="ToImageButtonOptions">Statically override options for toImage modebar button</param>
 <param name="ModeBarButtonsToAdd">ModeBar buttons to add to the graph.</param>
</member>
<member name="M:Plotly.NET.Chart.WithConfig(Plotly.NET.Config)">
<summary>
 Sets the given config on the input chart.

 If there is already a config set, the objects are combined.
 &lt;/summary&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithColorbarStyle(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Applies the given styles to the ColorBar object(s) of the chart's trace(s). Overwrites attributes with the same name that are already set.
 </summary>
 <param name="TitleText">Sets the text of the colorbar title.</param>
 <param name="TitleFont">Sets the font of the colorbar title.</param>
 <param name="TitleStandoff">Sets the standoff distance (in px) between the colorbar labels and the title text.</param>
 <param name="Title">Sets the Title (use this for more finegrained control than the other title-associated arguments)</param>
 <param name="Len">Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</param>
 <param name="LenMode">Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.</param>
 <param name="BGColor">Sets the color of padded area.</param>
 <param name="BorderColor">Sets the axis line color.</param>
 <param name="OutlineColor">Sets the axis line color.</param>
 <param name="X">Sets the x position of the color bar (in plot fraction).</param>
 <param name="XAnchor">Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar.</param>
 <param name="XPad">Sets the amount of padding (in px) along the x direction.</param>
 <param name="Y">Sets the y position of the color bar (in plot fraction).</param>
 <param name="YAnchor">Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar.</param>
 <param name="YPad">Sets the amount of padding (in px) along the y direction.</param>
</member>
<member name="M:Plotly.NET.Chart.WithColorBar(Plotly.NET.ColorBar)">
 <summary>
 Sets the ColorBar for the chart's trace(s).

 If there is already a ColorBar set, the objects are combined.
 </summary>
 <param name="colorbar">The new ColorBar for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithColorAxisAnchor(System.Int32)">
 <summary>
 Sets the color axis id for the chart's trace(s).
 </summary>
 <param name="id">The new color axis id for the chart's trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithColorAxis(Plotly.NET.LayoutObjects.ColorAxis,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
<summary>
 Sets the color axis with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithCAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the c axis on the ternary object with the given id on the input chart's layout.

 If there is already a c axis set on the ternary object, the c axis objects are combined.
 </summary>
 <param name="cAxis">The new c axis for the chart layout's ternary object</param>
 <param name="Id">The target ternary id on which the c axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithBAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the b axis on the ternary object with the given id on the input chart's layout.

 If there is already a b axis set on the ternary object, the b axis objects are combined.
 </summary>
 <param name="bAxis">The new b axis for the chart layout's ternary object</param>
 <param name="Id">The target ternary id on which the b axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithAxisAnchor(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the axis anchor ids for the chart's cartesian and/or carpet trace(s).

 If the traces are not of these types, nothing will be set and a warning message will be displayed.
 </summary>
 <param name="X">The new x axis anchor id for the chart's cartesian and/or carpet trace(s)</param>
 <param name="Y">The new x axis anchor id for the chart's cartesian and/or carpet trace(s)</param>
</member>
<member name="M:Plotly.NET.Chart.WithAnnotations(System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>

 </summary>
 <param name="annotations">The annotations to add to the input charts layout</param>
 <param name="Append">If true, the input annotations will be appended to existing annotations, otherwise existing annotations will be removed (default: true)</param>
</member>
<member name="M:Plotly.NET.Chart.WithAngularAxis(Plotly.NET.LayoutObjects.AngularAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the AngularAxis on the polar object with the given id on the input chart's layout.

 If there is already a AngularAxis set on the polar object, the AngularAxis objects are combined.
 </summary>
 <param name="angularAxis">The new AngularAxis for the chart layout's polar object</param>
 <param name="Id">The target polar id on which the AngularAxis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.WithAdditionalHeadTags(System.Collections.Generic.IEnumerable{System.String},Plotly.NET.GenericChart.GenericChart)">
<summary>
 Adds the given additional html tags on the chart&apos;s DisplayOptions. They will be included in the document&apos;s &lt;head&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.WithAAxis(Plotly.NET.LayoutObjects.LinearAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Sets the a axis on the ternary object with the given id on the input chart's layout.

 If there is already a a axis set on the ternary object, the a axis objects are combined.
 </summary>
 <param name="aAxis">The new a axis for the chart layout's ternary object</param>
 <param name="Id">The target ternary id on which the a axis should be set. Default is 1.</param>
</member>
<member name="M:Plotly.NET.Chart.ShowAsImage(Plotly.NET.StyleParam.ImageFormat,Plotly.NET.GenericChart.GenericChart)">
 <summary>
 Saves the given chart as a temporary html file containing a static image of the chart and opens it in the browser.

 IMPORTANT: this is not the same as static image generation. The file still needs to be opened in the browser to generate the image, as it is done via a js script in the html.

 For real programmatic static image export use Plotly.NET.ImageExport (https://www.nuget.org/packages/Plotly.NET.ImageExport/)

 This yields basically the same results as using `StaticPlot = true` for the chart's config.
 </summary>
 <param name="format">The image format for the static chart</param>
 <param name="ch">The chart to show in the browser</param>
</member>
<member name="M:Plotly.NET.Chart.Show(Plotly.NET.GenericChart.GenericChart)">
 <summary>
 Saves the given chart as a temporary html file and opens it in the browser.
 </summary>
 <param name="ch">The chart to show in the browser</param>
</member>
<member name="M:Plotly.NET.Chart.SetZError(Plotly.NET.TraceObjects.Error,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the error for the z dimension for the chart's trace(s).
 </summary>
 <param name="zError">The new Error in the x dimension for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Error object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetYError(Plotly.NET.TraceObjects.Error,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the error for the y dimension for the chart's trace(s).
 </summary>
 <param name="yError">The new Error in the x dimension for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Error object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetXError(Plotly.NET.TraceObjects.Error,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the error for the x dimension for the chart's trace(s).
 </summary>
 <param name="xError">The new Error in the x dimension for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Error object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetTernary(Plotly.NET.LayoutObjects.Ternary,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Ternary object with the given id on the input chart's layout.
 </summary>
 <param name="ternary">The Ternary object to set on the chart's layout</param>
 <param name="id">The target Ternary id with which the Ternary object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Ternary set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetSmith(Plotly.NET.LayoutObjects.Smith,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Smith object with the given id on the input chart's layout.
 </summary>
 <param name="smith">The Smith object to set on the chart's layout</param>
 <param name="id">The target smith id with which the Smith object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Smith set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetScene(Plotly.NET.LayoutObjects.Scene,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Scene object with the given id on the input chart's layout.
 </summary>
 <param name="scene">The Scene object to set on the chart's layout</param>
 <param name="id">The target scene id with which the Scene object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Scene set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetRealAxis(Plotly.NET.LayoutObjects.RealAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the RealAxis on the smith object with the given id on the input chart's layout.
 </summary>
 <param name="realAxis">The RealAxis to set on the target smith object on the chart's layout</param>
 <param name="id">The target smith id with which the RealAxis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetRadialAxis(Plotly.NET.LayoutObjects.RadialAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the RadialAxis on the polar object with the given id on the input chart's layout.
 </summary>
 <param name="radialAxis">The RadialAxis to set on the target polar object on the chart's layout</param>
 <param name="id">The target polar id with which the RadialAxis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetPolar(Plotly.NET.LayoutObjects.Polar,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Polar object with the given id on the input chart's layout.
 </summary>
 <param name="polar">The Polar object to set on the chart's layout</param>
 <param name="id">The target polar id with which the Polar object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Polar set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetMarker(Plotly.NET.TraceObjects.Marker,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the marker for the chart's trace(s).
 </summary>
 <param name="marker">The new marker for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already a marker (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetMapbox(Plotly.NET.LayoutObjects.Mapbox,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Mapbox object with the given id on the input chart's layout.
 </summary>
 <param name="mapbox">The Mapbox object to set on the chart's layout</param>
 <param name="id">The target Mapbox id with which the Mapbox object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Mapbox set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetLine(Plotly.NET.Line,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the line for the chart's trace(s).
 </summary>
 <param name="line">The new Line for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already a Line (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetLegend(Plotly.NET.LayoutObjects.Legend,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the Legend for the chart's layout.
 </summary>
 <param name="legend">The new Legend for the chart's layout</param>
 <param name="Combine">Wether or not to combine the objects if there is already a Legend object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetLayoutGrid(Plotly.NET.LayoutObjects.LayoutGrid,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the LayoutGrid for the chart's layout.
 </summary>
 <param name="layoutGrid">The new LayoutGrid for the chart's layout</param>
 <param name="Combine">Wether or not to combine the objects if there is already a ColorBar object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetLayout(Plotly.NET.Layout)">
<summary>
 Sets the given layout on the input chart.

 If there is already an layout set, the object is replaced.
 &lt;/summary&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.SetImaginaryAxis(Plotly.NET.LayoutObjects.ImaginaryAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the imaginary Axis on the polar object with the given id on the input chart's layout.
 </summary>
 <param name="imaginaryAxis">The ImaginaryAxis to set on the target polar object on the chart's layout</param>
 <param name="id">The target polar id with which the ImaginaryAxis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetGeo(Plotly.NET.LayoutObjects.Geo,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given Geo object with the given id on the input chart's layout.
 </summary>
 <param name="geo">The Geo object to set on the chart's layout</param>
 <param name="id">The target Geo id with which the Geo object should be set.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an Geo set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetConfig(Plotly.NET.Config)">
<summary>
 Sets the given config on the input chart.

 If there is already a config set, the object is replaced.
 &lt;/summary&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.SetColorBar(Plotly.NET.ColorBar,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the ColorBar for the chart's trace(s).
 </summary>
 <param name="colorBar">The new ColorBar for the chart's trace(s)</param>
 <param name="Combine">Wether or not to combine the objects if there is already a ColorBar object set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetCAxis(Plotly.NET.LayoutObjects.LinearAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the c axis on the ternary object with the given id on the input chart's layout.
 </summary>
 <param name="cAxis">The c Axis to set on the target ternary object on the chart's layout</param>
 <param name="id">The target ternary id with which the c Axis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetBAxis(Plotly.NET.LayoutObjects.LinearAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the b axis on the ternary object with the given id on the input chart's layout.
 </summary>
 <param name="bAxis">The b Axis to set on the target ternary object on the chart's layout</param>
 <param name="id">The target ternary id with which the b Axis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetAxis(Plotly.NET.LayoutObjects.LinearAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the given axis with the given id on the input chart's layout.
 </summary>
 <param name="axis">The x axis to set on the chart's layout</param>
 <param name="id">The target axis id with which the axis should be set.</param>
 <param name="SceneAxis">If set on a scene, define wether it is the x, y or z axis. default is x.</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetAngularAxis(Plotly.NET.LayoutObjects.AngularAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the angular axis on the polar object with the given id on the input chart's layout.
 </summary>
 <param name="angularAxis">The AngularAxis to set on the target polar object on the chart's layout</param>
 <param name="id">The target polar id with which the AngularAxis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SetAAxis(Plotly.NET.LayoutObjects.LinearAxis,Plotly.NET.StyleParam.SubPlotId,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Sets the a axis on the ternary object with the given id on the input chart's layout.
 </summary>
 <param name="aAxis">The a Axis to set on the target ternary object on the chart's layout</param>
 <param name="id">The target ternary id with which the a Axis should be set.(default is 1)</param>
 <param name="Combine">Wether or not to combine the objects if there is already an axis set (default is false)</param>
</member>
<member name="M:Plotly.NET.Chart.SaveHtml(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Saves the given Chart as html file at the given path (.html file extension is added if not present).
 Optionally opens the generated file in the browser.
 </summary>
 <param name="path">The path to save the chart html at.</param>
 <param name="OpenInBrowser">Wether or not to open the generated file in the browser (default: false)</param>
</member>
<member name="M:Plotly.NET.Chart.Combine(System.Collections.Generic.IEnumerable{Plotly.NET.GenericChart.GenericChart})">
<summary>
 Create a combined chart with the given charts merged
</summary>
</member>
<member name="M:Plotly.NET.Chart.SingleStack``1(Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
<summary>
 Creates a chart stack (a subplot grid with one column) from the input charts.
 &lt;/summary&gt;
 &lt;param name =&quot;SubPlots&quot;&gt;Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like &quot;xy&quot; or &quot;x3y2&quot;, or &quot;&quot; to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.&lt;/param&gt;
 &lt;param name =&quot;XAxes&quot;&gt;Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like &quot;y&quot;, &quot;y2&quot;, etc., or &quot;&quot; to not put a y axis in that row. Entries other than &quot;&quot; must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.&lt;/param&gt;
 &lt;param name =&quot;YAxes&quot;&gt;Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like &quot;x&quot;, &quot;x2&quot;, etc., or &quot;&quot; to not put an x axis in that column. Entries other than &quot;&quot; must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.&lt;/param&gt;
 &lt;param name =&quot;RowOrder&quot;&gt;Is the first row the top or the bottom? Note that columns are always enumerated from left to right.&lt;/param&gt;
 &lt;param name =&quot;Pattern&quot;&gt;If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: &quot;coupled&quot; gives one x axis per column and one y axis per row. &quot;independent&quot; uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.&lt;/param&gt;
 &lt;param name =&quot;XGap&quot;&gt;Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.&lt;/param&gt;
 &lt;param name =&quot;YGap&quot;&gt;Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.&lt;/param&gt;
 &lt;param name =&quot;Domain&quot;&gt;Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.&lt;/param&gt;
 &lt;param name =&quot;XSide&quot;&gt;Sets where the x axis labels and titles go. &quot;bottom&quot; means the very bottom of the grid. &quot;bottom plot&quot; is the lowest plot that each x axis is used in. &quot;top&quot; and &quot;top plot&quot; are similar.&lt;/param&gt;
 &lt;param name =&quot;YSide&quot;&gt;Sets where the y axis labels and titles go. &quot;left&quot; means the very left edge of the grid. &quot;left plot&quot; is the leftmost plot that each y axis is used in. &quot;right&quot; and &quot;right plot&quot; are similar.&lt;/param&gt;
</summary>
</member>
<member name="M:Plotly.NET.Chart.Invisible">
 <summary>Creates a chart that is completely invisible when rendered. The Chart object however is NOT empty! Combining this chart with other charts will have unforseen consequences (it has for example invisible axes that can override other axes if used in Chart.Combine)</summary>
</member>
<member name="M:Plotly.NET.Chart.Grid``2(Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
 <summary>
 Creates a subplot grid with the the dimensions of the input 2D sequence containing the charts to render in the respective cells.

 ATTENTION: when the individual rows do not have the same amount of charts, they will be filled with dummy charts TO THE RIGHT.

 prevent this behaviour by using Chart.Invisible at the cells that should be empty.
 </summary>
 <param name ="SubPlots">Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</param>
 <param name ="XAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</param>
 <param name ="YAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</param>
 <param name ="RowOrder">Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</param>
 <param name ="Pattern">If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</param>
 <param name ="XGap">Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</param>
 <param name ="YGap">Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</param>
 <param name ="Domain">Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</param>
 <param name ="XSide">Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.</param>
 <param name ="YSide">Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.</param>
</member>
<member name="M:Plotly.NET.Chart.Grid``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
 <summary>
 Creates a subplot grid with the given dimensions (nRows x nCols) for the input charts.
 </summary>
 <param name ="nRows">The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="nCols">The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="SubPlots">Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</param>
 <param name ="XAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</param>
 <param name ="YAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</param>
 <param name ="RowOrder">Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</param>
 <param name ="Pattern">If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</param>
 <param name ="XGap">Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</param>
 <param name ="YGap">Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</param>
 <param name ="Domain">Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</param>
 <param name ="XSide">Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.</param>
 <param name ="YSide">Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.</param>
</member>
<member name="T:Plotly.NET.Chart">
<summary>
 Provides a set of static methods for creating and styling charts.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.WaterfallMeasure">
<summary>
How to compute differences between bars in Waterfall Charts
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Visible">
<summary>
 Determines whether or not this trace is visible. If &quot;legendonly&quot;, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.TickOptions">
<summary>
 Determines whether ticks are drawn or not. If &quot;&quot;, this axis&apos; ticks are not drawn. If &quot;outside&quot; (&quot;inside&quot;), this axis&apos; are drawn outside (inside) the axis lines.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.TickMode">
<summary>
 Sets the tick mode for this axis. If &quot;auto&quot;, the number of ticks is set via `nticks`. If &quot;linear&quot;, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (&quot;linear&quot; is the default value if `tick0` and `dtick` are provided).
 If &quot;array&quot;, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (&quot;array&quot; is the default value if `tickvals` is provided).
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.TextInfo">
<summary>
 Determines which trace information appear on the graph and  on hove (HoverInfo)
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.TextPosition">
<summary>
 Sets the positions of the `text` elements. Note that not all options work for every type of trace, e.g. Pie Charts only support &quot;inside&quot; | &quot;outside&quot; | &quot;auto&quot; | &quot;none&quot;

 - Cartesian plots: Sets the positions of the `text` elements with respects to the (x,y) coordinates.

 - Pie Charts and derivatives: Specifies the location of the text with respects to the sector.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.SurfacePattern">
<summary>
 Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.TimeStepMode">
<summary>
 Determines whether spikelines are stuck to the cursor or to the closest datapoints.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.SpikeSnap">
<summary>
 Determines whether spikelines are stuck to the cursor or to the closest datapoints.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.SpikeMode">
<summary>
 Determines the drawing mode for the spike line
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.SmoothAlg">
<summary>
 Choose between algorithms (&apos;best&apos; or &apos;fast&apos;) to smooth data linked to &apos;z&apos;. The default value is false corresponding to no smoothing.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ShowExponent">
<summary>
 If &quot;all&quot;, all exponents are shown besides their significands. If &quot;first&quot;, only the exponent of the first tick is shown. If &quot;last&quot;, only the exponent of the last tick is shown. If &quot;none&quot;, no exponents appear.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ShowTickOption">
<summary>
 If &quot;all&quot;, all tick labels are displayed with a prefix. If &quot;first&quot;, only the first tick is displayed with a prefix. If &quot;last&quot;, only the last tick is displayed with a suffix. If &quot;none&quot;, tick prefixes are hidden.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Shape">
<summary>
 Determines the line shape. With &quot;spline&quot; the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ShapeType">
<summary>
 Specifies the shape type to be drawn. If &quot;line&quot;, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If &quot;circle&quot;, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2))
 with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If &quot;rect&quot;, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`)
 If &quot;path&quot;, draw a custom SVG path using `path`.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.RangebreakPattern">
<summary>
 Determines a pattern on the time line that generates breaks.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Range">
<summary>
 Defines a Range between min and max value
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.RangeMode">
<summary>
 If &quot;normal&quot;, the range is computed in relation to the extrema of the input data. If &quot;tozero&quot;`, the range extends to 0, regardless of the input data If &quot;nonnegative&quot;, the range is non-negative, regardless of the input data.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.QuartileMethod">
<summary>
 Sets the method used to compute the sample&apos;s Q1 and Q3 quartiles
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.PolarGridShape">
<summary>
 Sets the method used to compute the sample&apos;s Q1 and Q3 quartiles
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.MapboxStyle">
<summary>
 Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.
 These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens,
 or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.
 Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: open-street-map, white-bg, carto-positron, carto-darkmatter, stamen-terrain, stamen-toner, stamen-watercolor
 The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox-&lt;name&gt;-&lt;version&gt;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Mirror">
<summary>
 Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If &quot;true&quot;, the axis lines are mirrored.
 If &quot;ticks&quot;, the axis lines and ticks are mirrored. If &quot;false&quot;, mirroring is disable. If &quot;all&quot;, axis lines are mirrored on all shared-axes subplots. If &quot;allticks&quot;, axis lines and ticks are mirrored on all shared-axes subplots.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridYSide">
<summary>
 Sets where the y axis labels and titles go on a layout grid.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridXSide">
<summary>
 Sets where the x axis labels and titles go on a layout grid.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridPattern.Coupled">
<summary>
 Gives one x axis per column and one y axis per row
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridPattern.Independent">
<summary>
 Uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridPattern">
<summary>
 Pattern to use for autogenerating Axis Ids when not specifically specifying subplot axes IDs in LayoutGrids
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutGridRowOrder">
<summary>
 Determines wether the rows of a LayoutGrid are enumerated from the top or the bottom.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LocationFormat">
<summary>
 Determines the set of locations used to match entries in `locations` to regions on the map. Default: ISO-3
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Layer">
<summary>
 Specifies whether shapes are drawn below or above traces. Default is Above
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.LayoutImageSizing">
<summary>
 Specifies whether shapes are drawn below or above traces. Default is Above
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.HoverMode">
<summary>
 Sets this figure&apos;s behavior when a user hovers over it. When set to &apos;x&apos;, all data sharing the same &apos;x&apos; coordinate will be shown on screen
 with corresponding trace labels. When set to &apos;y&apos; all data sharing the same &apos;y&apos; coordinates will be shown on the screen with corresponding
 trace labels. When set to &apos;closest&apos;, information about the data point closest to where the viewer is hovering will appear.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.HistFunc">
<summary>
 Sets the binning function used for this histogram trace. The default value is &apos;count&apos; where the histogram values are computed
 by counting the number of values lying inside each bin. With &apos;histfunc&apos; set to &apos;sum&apos;, &apos;avg&apos;, &apos;min&apos; or &apos;max&apos;, the histogram values
 are computed using the sum, the average, the minimum or the &apos;maximum&apos; of the values lying inside each bin respectively.
 default: Count
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.HistNorm">
<summary>
 Sets the type of normalization for this histogram trace. By default (&apos;histnorm&apos; set to &apos;&apos;) the height of each bar
 displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin.
 If set to &apos;percent&apos;, the height of each bar displays the percentage of total occurrences found within the corresponding bin.
 If set to &apos;probability&apos;, the height of each bar displays the probability that an event will fall into the corresponding bin.
 If set to &apos;density&apos;, the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin
 interval such that summing the area of all bins will yield the total number of occurrences. If set to &apos;probability density&apos;,
 the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by
 the size of the bin interval such that summing the area of all bins will yield 1.
 default: None
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.GeoResolution">
<summary>
Used for the Layout.geo field. Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.GeoFitBounds">
<summary>
Used for the Layout.geo field. Determines if this subplot&apos;s view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If &quot;locations&quot;, only the trace&apos;s visible locations are considered in the `fitbounds` computations. If &quot;geojson&quot;, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to &quot;false&quot;.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Fill">
<summary>
 Sets the area to fill with a solid color. (default: &quot;none&quot; )
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.FontFamily">
<summary>
 Names of installed font families
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ExponentFormat">
<summary>
 Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If &quot;none&quot;, it appears as 1,000,000,000. If &quot;e&quot;, 1e+9. If &quot;E&quot;, 1E+9.
 If &quot;power&quot;, 1x10^9 (with 9 in a super script). If &quot;SI&quot;, 1G. If &quot;B&quot;, 1B.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.DrawingStyle">
<summary>
 Dash: Sets the drawing style of the lines segments in this trace.
 Sets the style of the lines. Set to a dash string type or a dash length in px.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Direction">
<summary>
 Specifies the direction at which succeeding sectors follow one another.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Delaunayaxis">
<summary>
 Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation.
 It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
 Default is &quot;z&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.DragMode">
<summary>
 Sets this figure&apos;s behavior when a user preforms a mouse &apos;drag&apos; in the plot area. When set to &apos;zoom&apos;, a portion of the plot will be highlighted,
 when the viewer exits the drag, this highlighted section will be zoomed in on. When set to &apos;pan&apos;, data in the plot will move along with the viewers
 dragging motions. A user can always depress the &apos;shift&apos; key to access the whatever functionality has not been set as the default. In 3D plots, the
 default drag mode is &apos;rotate&apos; which rotates the scene.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConeSizeMode">
<summary>
 Sets the cones&apos; anchor with respect to their x/y/z positions. Note that &quot;cm&quot; denote the cone&apos;s center of mass which corresponds to 1/4 from the tail to tip.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConeAnchor">
<summary>
 Sets the cones&apos; anchor with respect to their x/y/z positions. Note that &quot;cm&quot; denote the cone&apos;s center of mass which corresponds to 1/4 from the tail to tip.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.AxisConstraint">
<summary>
 If the axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the &quot;range&quot;, or by decreasing the &quot;domain&quot;. Default is &quot;domain&quot; for axes containing image traces, &quot;range&quot; otherwise.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConnectorMode">
<summary>
The shape of connector lines in Waterfall charts.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.CategoryOrder">
<summary>
 Specifies the ordering logic for the case of categorical variables. By default, plotly uses &quot;trace&quot;, which specifies the order that is present in the data supplied.
 Set `categoryorder` to &quot;category ascending&quot; or &quot;category descending&quot; if order should be determined by the alphanumerical order of the category names.
 Set `categoryorder` to &quot;array&quot; to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the &quot;trace&quot; mode.
 The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to &quot;total ascending&quot; or &quot;total descending&quot; if order should be determined by the numerical order of the values.
 Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Colorscale">
<summary>
 The colorscale must be a collection containing a mapping of a normalized value (between 0.0 and 1.0) to it&apos;s color. At minimum, a mapping for the lowest (0.0) and highest (1.0) values are required.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Currentbin">
<summary>
 Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in
 the current cumulative value. &quot;include&quot; is the default for compatibility with various other tools, however it introduces
 a half-bin bias to the results. &quot;exclude&quot; makes the opposite half-bin bias, and &quot;half&quot; removes it.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.CumulativeDirection">
<summary>
 Only applies if cumulative is enabled. If &quot;increasing&quot; (default) we sum all prior bins, so the result increases from left to right.
 If &quot;decreasing&quot; we sum later bins so the result decreases from left to right.  default: &quot;increasing&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Calendar">
<summary>
 Sets the calendar system to use with `x y z` date data. Default: &quot;gregorian&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.OutsideExclusiveInterval">
<summary>
 &quot;](&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.OutsideRightInclusiveInterval">
<summary>
 &quot;](&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.OutsideLeftInclusiveInterval">
<summary>
 &quot;)(&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.OutsideInclusiveInterval">
<summary>
 &quot;][&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.InsideExclusiveInterval">
<summary>
 &quot;()&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.InsideRightInclusiveInterval">
<summary>
 &quot;(]&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.InsideLeftInclusiveInterval">
<summary>
 &quot;[)&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.InsideInclusiveInterval">
<summary>
 &quot;[]&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.GreaterThanOrEqual">
<summary>
 &quot;&gt;=&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.GreaterThan">
<summary>
 &quot;&gt;&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.LesserThanOrEqual">
<summary>
 &quot;&lt;=&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.LesserThan">
<summary>
 &quot;&lt;&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ConstraintOperation.Equal">
<summary>
 &quot;=&quot;
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.BarMode">
<summary>
 For bar and histogram plots only. This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location
 appear on the plot. If set to &apos;stack&apos; the bars are stacked on top of one another. If set to &apos;group&apos;, the bars are plotted next to one another, centered
 around the shared location. If set to &apos;overlay&apos;, the bars are simply plotted over one another, you may need to set the opacity to see this.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.AxisType">
<summary>
 Sets the axis type. By default (Auto), plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.AutoRange">
<summary>
 Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to &quot;false&quot;.
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.Align">
<summary>
 Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
</summary>
</member>
<member name="M:Plotly.NET.StyleParam.ModeUtils.showLines(System.Boolean,Plotly.NET.StyleParam.Mode)">
<summary>
 Takes the current mode and adds the Lines flag
</summary>
</member>
<member name="M:Plotly.NET.StyleParam.ModeUtils.showMarker(System.Boolean,Plotly.NET.StyleParam.Mode)">
<summary>
 Takes the current mode and adds the Markers flag
</summary>
</member>
<member name="M:Plotly.NET.StyleParam.ModeUtils.showText(System.Boolean,Plotly.NET.StyleParam.Mode)">
<summary>
 Takes the current mode and adds the Text flag
</summary>
</member>
<member name="T:Plotly.NET.StyleParam.ModeUtils">
<summary>
 Functions to manipulate StyleParam Mode
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Padding.init(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Set the padding of the slider component along each side
 </summary>
 <param name="B">The amount of padding (in px) along the bottom of the component</param>
 <param name="L">The amount of padding (in px) on the left side of the component</param>
 <param name="R">The amount of padding (in px) on the right side of the component</param>
 <param name="T">The amount of padding (in px) along the top of the component</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.LayoutImage">
<summary>
 Dimensions type inherits from dynamic object
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Button">
<summary>
 Dimensions type inherits from dynamic object
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.RangeSelector">
<summary>
 Dimensions type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Margin.init``6(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{``5})">
<summary>
 Init Margin type
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Margin">
<summary>
 Margin
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Domain.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Initialized Dimensions object
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Domain">
<summary>
 Dimensions type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Shape.init``4(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShapeType},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Init Shape type
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Shape">
<summary>
 Shape type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Hoverlabel.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Align},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Initialized Line object
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Hoverlabel">
<summary>
 Hoverlabel type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Annotation.init``10(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AnnotationAlignment},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ArrowHead},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ArrowSide},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ClickToShow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{``7},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.YAnchorPosition},Microsoft.FSharp.Core.FSharpOption{``8},Microsoft.FSharp.Core.FSharpOption{``9},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Init Annotation type
</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.Annotation">
<summary>
 Text annotations inside a plot
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.LayoutGrid.style(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
 <summary>Returns a function that applies the given styles to a LayoutGrid.</summary>
 <param name ="Rows">The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="Columns">The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="SubPlots">Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</param>
 <param name ="XAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</param>
 <param name ="YAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</param>
 <param name ="RowOrder">Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</param>
 <param name ="Pattern">If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</param>
 <param name ="XGap">Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</param>
 <param name ="YGap">Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</param>
 <param name ="Domain">Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</param>
 <param name ="XSide">Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.</param>
 <param name ="YSide">Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LayoutGrid.init(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Tuple{Plotly.NET.StyleParam.LinearAxisId,Plotly.NET.StyleParam.LinearAxisId}[][]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId[]},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridRowOrder},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridPattern},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridXSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LayoutGridYSide})">
 <summary>Initializes a LayoutGrid object</summary>
 <param name ="Rows">The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="Columns">The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</param>
 <param name ="SubPlots">Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</param>
 <param name ="XAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</param>
 <param name ="YAxes">Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</param>
 <param name ="RowOrder">Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</param>
 <param name ="Pattern">If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</param>
 <param name ="XGap">Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</param>
 <param name ="YGap">Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</param>
 <param name ="Domain">Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</param>
 <param name ="XSide">Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.</param>
 <param name ="YSide">Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.LayoutGrid">
<summary>
 A plot grid that can contain subplots with shared axes.
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Legend.style(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceGroupClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemSizing},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceOrder},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.YAnchorPosition})">
 <summary>
 Returns a function that applies the given styles to a Legend object
 </summary>
 <param name="BGColor">Sets the legend background color. Defaults to `layout.paper_bgcolor`.</param>
 <param name="BorderColor">Sets the color of the border enclosing the legend.</param>
 <param name="Borderwidth">Sets the width (in px) of the border enclosing the legend.</param>
 <param name="Font">Sets the font used to text the legend items.</param>
 <param name="GroupClick">Determines the behavior on legend group item click. "toggleitem" toggles the visibility of the individual item clicked on the graph. "togglegroup" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.</param>
 <param name="GroupTitleFont">Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.</param>
 <param name="ItemClick">Determines the behavior on legend item click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item click interactions.</param>
 <param name="ItemDoubleClick">Determines the behavior on legend item double-click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item double-click interactions.</param>
 <param name="ItemSizing">Determines if the legend items symbols scale with their corresponding "trace" attributes or remain "constant" independent of the symbol size on the graph.</param>
 <param name="ItemWidth">Sets the width (in px) of the legend item symbols (the part other than the title.text).</param>
 <param name="Orientation">Sets the orientation of the legend.</param>
 <param name="Title">Sets the title of the legend.</param>
 <param name="TraceGroupGap">Sets the amount of vertical space (in px) between legend groups.</param>
 <param name="TraceOrder">Determines the order at which the legend items are displayed. If "normal", the items are displayed top-to-bottom in the same order as the input data. If "reversed", the items are displayed in the opposite order as "normal". If "grouped", the items are displayed in groups (when a trace `legendgroup` is provided). if "grouped+reversed", the items are displayed in the opposite order as "grouped".</param>
 <param name="UIRevision">Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.</param>
 <param name="VerticalAlign">Sets the vertical alignment of the symbols with respect to their associated text.</param>
 <param name="X">Sets the x position (in normalized coordinates) of the legend. Defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends.</param>
 <param name="XAnchor">Sets the legend's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the legend. Value "auto" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.</param>
 <param name="Y">Sets the y position (in normalized coordinates) of the legend. Defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends on graphs w/o range sliders and defaults to "1.1" for horizontal legends on graph with one or multiple range sliders.</param>
 <param name="YAnchor">Sets the legend's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the legend. Value "auto" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Legend.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceGroupClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemClickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceItemSizing},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TraceOrder},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.VerticalAlign},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.YAnchorPosition})">
 <summary>
 Returns a new Legend object with the given styles
 </summary>
 <param name="BGColor">Sets the legend background color. Defaults to `layout.paper_bgcolor`.</param>
 <param name="BorderColor">Sets the color of the border enclosing the legend.</param>
 <param name="Borderwidth">Sets the width (in px) of the border enclosing the legend.</param>
 <param name="Font">Sets the font used to text the legend items.</param>
 <param name="GroupClick">Determines the behavior on legend group item click. "toggleitem" toggles the visibility of the individual item clicked on the graph. "togglegroup" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.</param>
 <param name="GroupTitleFont">Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.</param>
 <param name="ItemClick">Determines the behavior on legend item click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item click interactions.</param>
 <param name="ItemDoubleClick">Determines the behavior on legend item double-click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item double-click interactions.</param>
 <param name="ItemSizing">Determines if the legend items symbols scale with their corresponding "trace" attributes or remain "constant" independent of the symbol size on the graph.</param>
 <param name="ItemWidth">Sets the width (in px) of the legend item symbols (the part other than the title.text).</param>
 <param name="Orientation">Sets the orientation of the legend.</param>
 <param name="Title">Sets the title of the legend.</param>
 <param name="TraceGroupGap">Sets the amount of vertical space (in px) between legend groups.</param>
 <param name="TraceOrder">Determines the order at which the legend items are displayed. If "normal", the items are displayed top-to-bottom in the same order as the input data. If "reversed", the items are displayed in the opposite order as "normal". If "grouped", the items are displayed in groups (when a trace `legendgroup` is provided). if "grouped+reversed", the items are displayed in the opposite order as "grouped".</param>
 <param name="UIRevision">Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.</param>
 <param name="VerticalAlign">Sets the vertical alignment of the symbols with respect to their associated text.</param>
 <param name="X">Sets the x position (in normalized coordinates) of the legend. Defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends.</param>
 <param name="XAnchor">Sets the legend's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the legend. Value "auto" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.</param>
 <param name="Y">Sets the y position (in normalized coordinates) of the legend. Defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends on graphs w/o range sliders and defaults to "1.1" for horizontal legends on graph with one or multiple range sliders.</param>
 <param name="YAnchor">Sets the legend's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the legend. Value "auto" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Legend">
<summary>
 Legend
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Rangebreak.style``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangebreakPattern},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Creates a function that applies the given style parameters to a Rangebreak object
 </summary>
 <param name="Enabled">Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for "date" axis type.</param>
 <param name="Bounds">Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.</param>
 <param name="Pattern">Determines a pattern on the time line that generates breaks. If "day of week" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If "hour" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).</param>
 <param name="Values">Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.</param>
 <param name="DValue">Sets the size of each `values` item. The default is one day in milliseconds.</param>
 <param name="Name">When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</param>
 <param name="TemplateItemName">Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Rangebreak.init``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangebreakPattern},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Initialize a Rangebreak object.
 </summary>
 <param name="Enabled">Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for "date" axis type.</param>
 <param name="Bounds">Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.</param>
 <param name="Pattern">Determines a pattern on the time line that generates breaks. If "day of week" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If "hour" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).</param>
 <param name="Values">Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.</param>
 <param name="DValue">Sets the size of each `values` item. The default is one day in milliseconds.</param>
 <param name="Name">When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</param>
 <param name="TemplateItemName">Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LinearAxis.style``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraint},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraintDirection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Rangebreak}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryTickAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelOverflow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeSnap},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CheaterType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Create a function that applies the given style parameters to a LinearAxis object
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="Title">Sets the axis title.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="FixedRange">Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</param>
 <param name="ScaleAnchor">If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.</param>
 <param name="ScaleRatio">If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.</param>
 <param name="Constrain">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image traces, "range" otherwise.</param>
 <param name="ConstrainToward">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top", "middle" (default), and "bottom" for y axes.</param>
 <param name="Matches">If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.</param>
 <param name="Rangebreaks">Sets breaks in the axis range</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TicksOn">Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom of labels.</param>
 <param name="TickLabelMode">Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.</param>
 <param name="TickLabelPosition">Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.</param>
 <param name="TickLabelOverflow">Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases the default is "hide past div".</param>
 <param name="Mirror">Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="AutoMargin">Determines whether long tick labels automatically grow the figure margins.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest</param>
 <param name="SpikeColor">Sets the spike color. If undefined, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="SpikeDash">Sets the dash style of lines</param>
 <param name="SpikeMode">Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on the axis the series is plotted on</param>
 <param name="SpikeSnap">Determines whether spikelines are stuck to the cursor or to the closest datapoints.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="ZeroLineWidth">Sets the width (in px) of the zero line.</param>
 <param name="ShowDividers">Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory" axes.</param>
 <param name="DividerColor">Sets the color of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="DividerWidth">Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="Domain">Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="Calendar">Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`</param>
 <param name="ArrayDTick">The stride between grid lines along the axis</param>
 <param name="ArrayTick0">The starting index of grid lines along the axis</param>
 <param name="CheaterType">The type of cheater plot when interpreted as cheater plot</param>
 <param name="EndLine">Determines whether or not a line is drawn at along the final value of this axis. If "true", the end line is drawn on top of the grid lines.</param>
 <param name="EndLineColor">Sets the line color of the end line.</param>
 <param name="EndLineWidth">Sets the width (in px) of the end line.</param>
 <param name="LabelPadding">Extra padding between label and the axis</param>
 <param name="LabelPrefix">Sets a axis label prefix.</param>
 <param name="LabelSuffix">Sets a axis label suffix.</param>
 <param name="MinorGridColor">Sets the color of the grid lines.</param>
 <param name="MinorGridCount">Sets the number of minor grid ticks per major grid tick</param>
 <param name="MinorGridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="Smoothing">Smoothing applied to the axis lines</param>
 <param name="StartLine">Determines whether or not a line is drawn at along the starting value of this axis. If "true", the start line is drawn on top of the grid lines.</param>
 <param name="StartLineColor">Sets the line color of the start line.</param>
 <param name="StartLineWidth">Sets the width (in px) of the start line.</param>
 <param name="BackgroundColor">Sets the background color of the axis.</param>
 <param name="ShowBackground">Wether or not to show the background of the axis.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LinearAxis.initIndicatorGauge``4(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initialize a LinearAxis object that can be used as a positional scale for indicator gauges.
 </summary>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LinearAxis.initCategorical``6(Plotly.NET.StyleParam.CategoryOrder,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraint},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraintDirection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Rangebreak}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryTickAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelOverflow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeSnap},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar})">
 <summary>
 Initialize a categorical LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.
 </summary>
 <param name="categoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="Title">Sets the axis title.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="FixedRange">Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</param>
 <param name="ScaleAnchor">If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.</param>
 <param name="ScaleRatio">If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.</param>
 <param name="Constrain">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image traces, "range" otherwise.</param>
 <param name="ConstrainToward">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top", "middle" (default), and "bottom" for y axes.</param>
 <param name="Matches">If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.</param>
 <param name="Rangebreaks">Sets breaks in the axis range</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TicksOn">Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom of labels.</param>
 <param name="TickLabelMode">Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.</param>
 <param name="TickLabelPosition">Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.</param>
 <param name="TickLabelOverflow">Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases the default is "hide past div".</param>
 <param name="Mirror">Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="AutoMargin">Determines whether long tick labels automatically grow the figure margins.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest</param>
 <param name="SpikeColor">Sets the spike color. If undefined, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="SpikeDash">Sets the dash style of lines</param>
 <param name="SpikeMode">Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on the axis the series is plotted on</param>
 <param name="SpikeSnap">Determines whether spikelines are stuck to the cursor or to the closest datapoints.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="ZeroLineWidth">Sets the width (in px) of the zero line.</param>
 <param name="ShowDividers">Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory" axes.</param>
 <param name="DividerColor">Sets the color of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="DividerWidth">Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="Domain">Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="Calendar">Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LinearAxis.initCarpet``5(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CheaterType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Initialize a LinearAxis object that can be used as a positional scale for carpet plots.
 </summary>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="Title">Sets the axis title.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="FixedRange">Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="ArrayDTick">The stride between grid lines along the axis</param>
 <param name="ArrayTick0">The starting index of grid lines along the axis</param>
 <param name="CheaterType">The type of cheater plot when interpreted as cheater plot</param>
 <param name="EndLine">Determines whether or not a line is drawn at along the final value of this axis. If "true", the end line is drawn on top of the grid lines.</param>
 <param name="EndLineColor">Sets the line color of the end line.</param>
 <param name="EndLineWidth">Sets the width (in px) of the end line.</param>
 <param name="LabelPadding">Extra padding between label and the axis</param>
 <param name="LabelPrefix">Sets a axis label prefix.</param>
 <param name="LabelSuffix">Sets a axis label suffix.</param>
 <param name="MinorGridColor">Sets the color of the grid lines.</param>
 <param name="MinorGridCount">Sets the number of minor grid ticks per major grid tick</param>
 <param name="MinorGridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="Smoothing">Smoothing applied to the axis lines</param>
 <param name="StartLine">Determines whether or not a line is drawn at along the starting value of this axis. If "true", the start line is drawn on top of the grid lines.</param>
 <param name="StartLineColor">Sets the line color of the start line.</param>
 <param name="StartLineWidth">Sets the width (in px) of the start line.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.LinearAxis.init``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraint},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisConstraintDirection},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Rangebreak}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryTickAnchor},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelOverflow},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mirror},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpikeSnap},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSlider},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RangeSelector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initialize a LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="Title">Sets the axis title.</param>
 <param name="AxisType">Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="FixedRange">Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</param>
 <param name="ScaleAnchor">If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.</param>
 <param name="ScaleRatio">If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.</param>
 <param name="Constrain">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image traces, "range" otherwise.</param>
 <param name="ConstrainToward">If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top", "middle" (default), and "bottom" for y axes.</param>
 <param name="Matches">If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.</param>
 <param name="Rangebreaks">Sets breaks in the axis range</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TicksOn">Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom of labels.</param>
 <param name="TickLabelMode">Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.</param>
 <param name="TickLabelPosition">Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.</param>
 <param name="TickLabelOverflow">Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases the default is "hide past div".</param>
 <param name="Mirror">Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="AutoMargin">Determines whether long tick labels automatically grow the figure margins.</param>
 <param name="ShowSpikes">Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest</param>
 <param name="SpikeColor">Sets the spike color. If undefined, will use the series color</param>
 <param name="SpikeThickness">Sets the width (in px) of the zero line.</param>
 <param name="SpikeDash">Sets the dash style of lines</param>
 <param name="SpikeMode">Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on the axis the series is plotted on</param>
 <param name="SpikeSnap">Determines whether spikelines are stuck to the cursor or to the closest datapoints.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="ZeroLine">Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.</param>
 <param name="ZeroLineColor">Sets the line color of the zero line.</param>
 <param name="ZeroLineWidth">Sets the width (in px) of the zero line.</param>
 <param name="ShowDividers">Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory" axes.</param>
 <param name="DividerColor">Sets the color of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="DividerWidth">Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.</param>
 <param name="Anchor">If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.</param>
 <param name="Side">Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.</param>
 <param name="Overlaying">If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="Domain">Sets the domain of this axis (in plot fraction).</param>
 <param name="Position">Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.</param>
 <param name="RangeSlider">Sets a range slider for this axis</param>
 <param name="RangeSelector">Sets a range selector for this axis. This object contains toggable presets for the rangeslider.</param>
 <param name="Calendar">Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`</param>
 <param name="BackgroundColor">Sets the background color of this axis' wall. (Only has an effect on 3D scenes)</param>
 <param name="ShowBackground">Sets whether or not this axis' wall has a background color. (Only has an effect on 3D scenes)</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.LinearAxis">
 <summary>Linear axes can be used as x and y scales on 2D plots, and as x,y, and z scales on 3D plots.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.ColorAxis.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a function that applies the given style parameters to a ColorAxis object
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.</param>
 <param name="ColorBar">Sets the colorbar associated with this color axis.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="ReverseScale">Determines whether or not a colorbar is displayed for this trace.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.ColorAxis.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initializes a ColorAxis object
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</param>
 <param name="CMin">Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.</param>
 <param name="CMax">Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.</param>
 <param name="ColorBar">Sets the colorbar associated with this color axis.</param>
 <param name="ColorScale">Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</param>
 <param name="ShowScale">Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</param>
 <param name="ReverseScale">Determines whether or not a colorbar is displayed for this trace.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.SliderCurrentValue.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition})">
 <summary>
 Object containing the current slider value style
 </summary>
 <param name="Font">Sets the font of the current value label text</param>
 <param name="Offset">The amount of space, in pixels, between the current value label and the slider</param>
 <param name="Prefix">When currentvalue.visible is true, this sets the prefix of the label</param>
 <param name="Suffix">When currentvalue.visible is true, this sets the suffix of the label</param>
 <param name="Visible">Shows the currently-selected value above the slider</param>
 <param name="XAnchor">The alignment of the value readout relative to the length of the slider</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.SliderStep.init(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Method},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initializes the slider with style parameters
 </summary>
 <param name="Args">Sets the arguments values to be passed to the Plotly method set in `method` on slide</param>
 <param name="Execute">
 When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped.
 This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually
 without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.
 </param>
 <param name="Label">Sets the text label to appear on the slider</param>
 <param name="Method">
 Sets the Plotly method to be called when the slider value is changed.
 If the `skip` method is used, the API slider will function as normal but
 will perform no API calls and will not bind automatically to state updates.
 This may be used to create a component interface and attach to slider events manually via JavaScript
 </param>
 <param name="Name">
 When used in a template, named items are created in the output figure in addition to any items the figure already has in this array.
 You can modify these items in the output figure by making your own item with `templateitemname` matching this
 `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it).
 Has no effect outside of a template
 </param>
 <param name="TemplateItemName">
 Used to refer to a named item in this array in the template.
 Named items from the template will be created even without a matching item in the input figure,
 but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications
 (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item,
 this item will be hidden unless you explicitly show it with `visible: true`
 </param>
 <param name="Value">Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided</param>
 <param name="Visible">Determines whether or not this step is included in the slider</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.SliderStep">
 <summary>
 The object including the slider steps style and update parameters
 </summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Slider.init(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.SliderCurrentValue},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.UnitMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Padding},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.SliderStep}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Transition},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.XAnchorPosition},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.YAnchorPosition})">
 <summary>
 Initializes the slider with style parameters
 </summary>
 <param name="Active">Determines which button (by index starting from 0) is considered active</param>
 <param name="ActiveBgColor">Sets the background color of the slider grip while dragging</param>
 <param name="BgColor">Sets the background color of the slider</param>
 <param name="BorderColor">Sets the background color of the slider</param>
 <param name="BorderWidth">Sets the color of the border enclosing the slider</param>
 <param name="CurrentValue">Object containing the current slider value style</param>
 <param name="Font">Sets the font of the slider step labels</param>
 <param name="Len">
 Sets the length of the slider This measure excludes the padding of both ends.
 That is, the slider's length is this length minus the padding on both ends
 </param>
 <param name="LenMode">
 Determines whether this slider length is set in units of plot "fraction" or in "pixels.
 Use `len` to set the value
 </param>
 <param name="MinorTickLen">Sets the length in pixels of minor step tick marks</param>
 <param name="Name">
 When used in a template, named items are created in the output figure in addition
 to any items the figure already has in this array.
 You can modify these items in the output figure by making your own item with `templateitemname`
 matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it).
 Has no effect outside of a template.
 </param>
 <param name="Padding">Set the padding of the slider component along each side</param>
 <param name="Steps">The steps of the slider including step arguments</param>
 <param name="TemplateItemName">
 Used to refer to a named item in this array in the template.
 Named items from the template will be created even without a matching item
 in the input figure, but you can modify one by making an item with
 `templateitemname` matching its `name`, alongside your modifications
 (including `visible: false` or `enabled: false` to hide it).
 If there is no template or no matching item, this item will be hidden unless
 you explicitly show it with `visible: true`.
 </param>
 <param name="TickColor">Sets the color of the border enclosing the slider</param>
 <param name="TickLen">Sets the length in pixels of step tick marks</param>
 <param name="TickWidth">Sets the tick width (in px)</param>
 <param name="Transition">Object containing the information about steps transition</param>
 <param name="Visible">Determines whether or not the slider is visible</param>
 <param name="X">Sets the x position (in normalized coordinates) of the slider</param>
 <param name="XAnchor">
 Sets the slider's horizontal position anchor.
 This anchor binds the `x` position to the "left", "center" or "right" of the range selector
 </param>
 <param name="Y">Sets the y position (in normalized coordinates) of the slider</param>
 <param name="YAnchor">
 Sets the slider's vertical position anchor.
 This anchor binds the `y` position to the "top", "middle" or "bottom" of the range selector
 </param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Slider">
 <summary>
 The layout object for custom slider implementation
 </summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.GeoProjection.style(Plotly.NET.StyleParam.GeoProjectionType,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjectionRotation},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>Create a function that applies the given style parameters to a GeoProjection object.</summary>
 <param name="projectionType">Sets the type of projection</param>
 <param name="Rotation">Sets the rotation applied to the map</param>
 <param name="Parallels">For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.</param>
 <param name="Scale">Zooms in or out on the map view. A scale of "1" corresponds to the largest zoom level that fits the map's lon and lat ranges.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.GeoProjection.init(Plotly.NET.StyleParam.GeoProjectionType,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjectionRotation},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>Initialize a GeoProjection object that determines the map projection in geo traces.</summary>
 <param name="projectionType">Sets the type of projection</param>
 <param name="Rotation">Sets the rotation applied to the map</param>
 <param name="Parallels">For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.</param>
 <param name="Scale">Zooms in or out on the map view. A scale of "1" corresponds to the largest zoom level that fits the map's lon and lat ranges.</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.GeoProjection">
 <summary>Determines the map projection in geo traces.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.GeoProjectionRotation.style(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Create a function that applies the given style parameters to a GeoProjectionRotation object</summary>
 <param name="Longitude">Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.</param>
 <param name="Latitude">Rotates the map along meridians (in degrees North).</param>
 <param name="Roll">Roll the map (in degrees) For example, a roll of "180" makes the map appear upside down.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.GeoProjectionRotation.init(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Initialize a GeoProjectionRotation object that determines Map rotation in GeoProjections</summary>
 <param name="Longitude">Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.</param>
 <param name="Latitude">Rotates the map along meridians (in degrees North).</param>
 <param name="Roll">Roll the map (in degrees) For example, a roll of "180" makes the map appear upside down.</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.GeoProjectionRotation">
 <summary>Determines Map rotation in GeoProjections</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Geo.style(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoFitBounds},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoResolution},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoScope},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjection},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis})">
 <summary>Create a function that applies the given style parameters to a Geo object.</summary>
 <param name="FitBounds">Determines if and how this subplot's view settings are auto-computed to fit trace data</param>
 <param name="Resolution">Sets the resolution of the base layers</param>
 <param name="Scope">Set the scope of the map.</param>
 <param name="Projection">Determines the type of projection used to display the map</param>
 <param name="Center">Sets the (lon,lat) coordinates of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise. For all projection types, the map's latitude center lies at the middle of the latitude range by default.</param>
 <param name="Visible">Wether or not the base layers are visible</param>
 <param name="Domain">The domain of this geo subplot</param>
 <param name="ShowCoastLines">Sets whether or not the coastlines are drawn.</param>
 <param name="CoastLineColor">Sets the coastline color.</param>
 <param name="CoastLineWidth">Sets the coastline stroke width (in px).</param>
 <param name="ShowLand">Sets whether or not land masses are filled in color.</param>
 <param name="LandColor">Sets the land mass color.</param>
 <param name="ShowOcean">Sets whether or not oceans are filled in color.</param>
 <param name="OceanColor">Sets the ocean color</param>
 <param name="ShowLakes">Sets whether or not lakes are drawn.</param>
 <param name="LakeColor">Sets the color of the lakes.</param>
 <param name="ShowRivers">Sets whether or not rivers are drawn.</param>
 <param name="RiverColor">Sets color of the rivers.</param>
 <param name="RiverWidth">Sets the stroke width (in px) of the rivers.</param>
 <param name="ShowCountries">Sets whether or not country boundaries are drawn.</param>
 <param name="CountryColor">Sets line color of the country boundaries.</param>
 <param name="CountryWidth">Sets line width (in px) of the country boundaries.</param>
 <param name="ShowSubunits">Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.</param>
 <param name="SubunitColor">Sets the color of the subunits boundaries.</param>
 <param name="SubunitWidth">Sets the stroke width (in px) of the subunits boundaries.</param>
 <param name="ShowFrame">Sets whether or not a frame is drawn around the map.</param>
 <param name="FrameColor">Sets the color the frame.</param>
 <param name="FrameWidth">Sets the stroke width (in px) of the frame.</param>
 <param name="BgColor">Set the background color of the map</param>
 <param name="LatAxis">Sets the latitudinal axis for this geo trace</param>
 <param name="LonAxis">Sets the longitudinal axis for this geo trace</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Geo.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoFitBounds},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoResolution},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoScope},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjection},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis})">
 <summary>Initialize a Geo object that determines the style of the map shown in geo traces</summary>
 <param name="FitBounds">Determines if and how this subplot's view settings are auto-computed to fit trace data</param>
 <param name="Resolution">Sets the resolution of the base layers</param>
 <param name="Scope">Set the scope of the map.</param>
 <param name="Projection">Determines the type of projection used to display the map</param>
 <param name="Center">Sets the (lon,lat) coordinates of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise. For all projection types, the map's latitude center lies at the middle of the latitude range by default.</param>
 <param name="Visible">Wether or not the base layers are visible</param>
 <param name="Domain">The domain of this geo subplot</param>
 <param name="ShowCoastLines">Sets whether or not the coastlines are drawn.</param>
 <param name="CoastLineColor">Sets the coastline color.</param>
 <param name="CoastLineWidth">Sets the coastline stroke width (in px).</param>
 <param name="ShowLand">Sets whether or not land masses are filled in color.</param>
 <param name="LandColor">Sets the land mass color.</param>
 <param name="ShowOcean">Sets whether or not oceans are filled in color.</param>
 <param name="OceanColor">Sets the ocean color</param>
 <param name="ShowLakes">Sets whether or not lakes are drawn.</param>
 <param name="LakeColor">Sets the color of the lakes.</param>
 <param name="ShowRivers">Sets whether or not rivers are drawn.</param>
 <param name="RiverColor">Sets color of the rivers.</param>
 <param name="RiverWidth">Sets the stroke width (in px) of the rivers.</param>
 <param name="ShowCountries">Sets whether or not country boundaries are drawn.</param>
 <param name="CountryColor">Sets line color of the country boundaries.</param>
 <param name="CountryWidth">Sets line width (in px) of the country boundaries.</param>
 <param name="ShowSubunits">Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.</param>
 <param name="SubunitColor">Sets the color of the subunits boundaries.</param>
 <param name="SubunitWidth">Sets the stroke width (in px) of the subunits boundaries.</param>
 <param name="ShowFrame">Sets whether or not a frame is drawn around the map.</param>
 <param name="FrameColor">Sets the color the frame.</param>
 <param name="FrameWidth">Sets the stroke width (in px) of the frame.</param>
 <param name="BgColor">Set the background color of the map</param>
 <param name="LatAxis">Sets the latitudinal axis for this geo trace</param>
 <param name="LonAxis">Sets the longitudinal axis for this geo trace</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Geo">
 <summary>Determines the style of the map shown in geo traces</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.MapboxLayerSymbol.style(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerSymbolPlacement},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition})">
 <summary>Create a function that applies the given style parameters to a MapboxLayer object.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.MapboxLayerSymbol.init(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerSymbolPlacement},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition})">
 <summary>Initialize a MapboxLayer object</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.MapboxLayerSymbol">
 <summary></summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.MapboxLayer.style``3(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerSourceType},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerType},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{``1,``2}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.MapboxLayerSymbol},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Create a function that applies the given style parameters to a MapboxLayer object.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.MapboxLayer.init``3(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerSourceType},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxLayerType},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{``1,``2}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.MapboxLayerSymbol},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Initialize a MapboxLayer object</summary>
</member>
<member name="T:Plotly.NET.LayoutObjects.MapboxLayer">
 <summary></summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Mapbox.style(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxStyle},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.MapboxLayer}})">
 <summary>Create a function that applies the given style parameters to a Mapbox object.</summary>
 <param name="Domain">Sets the domain of the Mapbox subplot</param>
 <param name="AccessToken">Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.</param>
 <param name="Style">Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`. These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option. Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox/name/version</param>
 <param name="Center">Sets the (lon,lat) coordinates of the center of the map view</param>
 <param name="Zoom">Sets the zoom level of the map (mapbox.zoom).</param>
 <param name="Bearing">Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).</param>
 <param name="Pitch">Sets the pitch angle of the map (in degrees, where "0" means perpendicular to the surface of the map) (mapbox.pitch).</param>
 <param name="Layers">Sets the layers of this Mapbox</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Mapbox.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MapboxStyle},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.MapboxLayer}})">
 <summary>
 Returns a new Mapbox object with the given styles applied.
 </summary>
 <param name="Domain">Sets the domain of the Mapbox subplot</param>
 <param name="AccessToken">Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.</param>
 <param name="Style">Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`. These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option. Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox/name/version</param>
 <param name="Center">Sets the (lon,lat) coordinates of the center of the map view</param>
 <param name="Zoom">Sets the zoom level of the map (mapbox.zoom).</param>
 <param name="Bearing">Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).</param>
 <param name="Pitch">Sets the pitch angle of the map (in degrees, where "0" means perpendicular to the surface of the map) (mapbox.pitch).</param>
 <param name="Layers">Sets the layers of this Mapbox</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Mapbox">
 <summary>Determines the style of the map shown in mapbox traces</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.tryGetTypedMember``1(System.String,Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Returns Some(dynamic member value) of the object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="ternary">The object to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.style``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color})">
 <summary>
 Creates a function that applies the given style parameters to a Ternary object.
 </summary>
 <param name="AAxis">Sets the ternary A Axis</param>
 <param name="BAxis">Sets the ternary B Axis</param>
 <param name="CAxis">Sets the ternary C Axis</param>
 <param name="Domain">Sets the ternary domain</param>
 <param name="Sum">The number each triplet should sum to, and the maximum range of each axis</param>
 <param name="BGColor">Sets the background color of the ternary layout.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.setCAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the c axis object of the given ternary object.
 </summary>
 <param name="cAxis">The new c axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.setBAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the b axis object of the given ternary object.
 </summary>
 <param name="bAxis">The new b axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.setAAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the a axis object of the given ternary object.
 </summary>
 <param name="aAxis">The new a axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.init``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color})">
 <summary>
 Initializes a ternary object
 </summary>
 <param name="AAxis">Sets the ternary A Axis</param>
 <param name="BAxis">Sets the ternary B Axis</param>
 <param name="CAxis">Sets the ternary C Axis</param>
 <param name="Domain">Sets the ternary domain</param>
 <param name="Sum">The number each triplet should sum to, and the maximum range of each axis</param>
 <param name="BGColor">Sets the background color of the ternary layout.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.getCAxis(Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Returns the c axis of the given ternary object.

 If there is no c axis set, returns an empty LinearAxis object.
 </summary>
 <param name="ternary">The ternary object to get the c axis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.getBAxis(Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Returns the b axis of the given ternary object.

 If there is no b axis set, returns an empty LinearAxis object.
 </summary>
 <param name="ternary">The ternary object to get the b axis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Ternary.getAAxis(Plotly.NET.LayoutObjects.Ternary)">
 <summary>
 Returns the a axis of the given ternary object.

 If there is no a axis set, returns an empty LinearAxis object.
 </summary>
 <param name="ternary">The ternary object to get the a axis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.tryGetTypedMember``1(System.String,Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Returns Some(dynamic member value) of the scene object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="scene">The scene to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.style(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AspectMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AspectRatio},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Camera},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis})">
 <summary>
 Creates a function that applies the given style parameters to a Scene object
 </summary>
 <param name="Annotations">An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="AspectMode">If "cube", this scene's axes are drawn as a cube, regardless of the axes' ranges. If "data", this scene's axes are drawn in proportion with the axes' ranges. If "manual", this scene's axes are drawn in proportion with the input of "aspectratio" (the default behavior if "aspectratio" is provided). If "auto", this scene's axes are drawn using the results of "data" except when one axis is more than four times the size of the two others, where in that case the results of "cube" are used.</param>
 <param name="AspectRatio">Sets this scene's axis aspectratio.</param>
 <param name="BGColor">Sets this scene's background color.</param>
 <param name="Camera">Sets this scene's camera</param>
 <param name="Domain">Sets this scene's domain</param>
 <param name="DragMode">Determines the mode of drag interactions for this scene.</param>
 <param name="HoverMode">Determines the mode of hover interactions for this scene.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.</param>
 <param name="XAxis">Sets this scene's xaxis</param>
 <param name="YAxis">Sets this scene's yaxis</param>
 <param name="ZAxis">Sets this scene's zaxis</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.setZAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the z axis object of the given scene.
 </summary>
 <param name="zAxis">The new z axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.setYAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the y axis object of the given scene.
 </summary>
 <param name="yAxis">The new y axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.setXAxis(Plotly.NET.LayoutObjects.LinearAxis)">
 <summary>
 Returns a function that sets the x axis object of the given scene.
 </summary>
 <param name="xAxis">The new x axis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.init(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.LayoutObjects.Annotation}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AspectMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AspectRatio},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Camera},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DragMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HoverMode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis})">
 <summary>
 Initialize a categorical Scene object that can be used as a laxout anchor for a 3D coordinate system.
 </summary>
 <param name="Annotations">An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.</param>
 <param name="AspectMode">If "cube", this scene's axes are drawn as a cube, regardless of the axes' ranges. If "data", this scene's axes are drawn in proportion with the axes' ranges. If "manual", this scene's axes are drawn in proportion with the input of "aspectratio" (the default behavior if "aspectratio" is provided). If "auto", this scene's axes are drawn using the results of "data" except when one axis is more than four times the size of the two others, where in that case the results of "cube" are used.</param>
 <param name="AspectRatio">Sets this scene's axis aspectratio.</param>
 <param name="BGColor">Sets this scene's background color.</param>
 <param name="Camera">Sets this scene's camera</param>
 <param name="Domain">Sets this scene's domain</param>
 <param name="DragMode">Determines the mode of drag interactions for this scene.</param>
 <param name="HoverMode">Determines the mode of hover interactions for this scene.</param>
 <param name="UIRevision">Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.</param>
 <param name="XAxis">Sets this scene's xaxis</param>
 <param name="YAxis">Sets this scene's yaxis</param>
 <param name="ZAxis">Sets this scene's zaxis</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.getZAxis(Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Returns the z axis object of the given scene.

 If there is no z axis set, returns an empty LinearAxis object.
 </summary>
 <param name="scene">The scene to get the z axis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.getYAxis(Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Returns the y axis object of the given scene.

 If there is no y axis set, returns an empty LinearAxis object.
 </summary>
 <param name="scene">The scene to get the y axis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Scene.getXAxis(Plotly.NET.LayoutObjects.Scene)">
 <summary>
 Returns the x axis object of the given scene.

 If there is no x axis set, returns an empty LinearAxis object.
 </summary>
 <param name="scene">The scene to get the x axis from</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Scene">
<summary>
 Scene
</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.AngularAxis.style``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AngularUnit},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer})">
 <summary>
 Creates a function that applies the given style parameters to a AngularAxis object
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="AxisType">Sets the angular axis type. If "linear", set `thetaunit` to determine the unit in which axis value are shown. If "category, use `period` to set the number of integer coordinates around polar axis.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="ThetaUnit">Sets the format unit of the formatted "theta" values. Has an effect only when `angularaxis.type` is "linear".</param>
 <param name="Period">Set the angular period. Has an effect only when `angularaxis.type` is "category".</param>
 <param name="Direction">Sets the direction corresponding to positive angles.</param>
 <param name="Rotation">Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to "counterclockwise" get a `rotation` of "0" which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to "clockwise" get a rotation of "90" which corresponds to due North (like on a compass),</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar&lt;N&gt;.uirevision`.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.AngularAxis.init``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AngularUnit},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer})">
 <summary>
 Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="AxisType">Sets the angular axis type. If "linear", set `thetaunit` to determine the unit in which axis value are shown. If "category, use `period` to set the number of integer coordinates around polar axis.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="ThetaUnit">Sets the format unit of the formatted "theta" values. Has an effect only when `angularaxis.type` is "linear".</param>
 <param name="Period">Set the angular period. Has an effect only when `angularaxis.type` is "category".</param>
 <param name="Direction">Sets the direction corresponding to positive angles.</param>
 <param name="Rotation">Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to "counterclockwise" get a `rotation` of "0" which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to "clockwise" get a rotation of "90" which corresponds to due North (like on a compass),</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar&lt;N&gt;.uirevision`.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.AngularAxis">
 <summary>Angular axes can be used as a scale for the angular coordinates in polar plots.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.RadialAxis.style``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar})">
 <summary>
 Creates a function that applies the given style parameters to a RadialAxis object
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="AxisType">Sets the angular axis type. If "linear", set `thetaunit` to determine the unit in which axis value are shown. If "category, use `period` to set the number of integer coordinates around polar axis.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. If "normal", the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="Angle">Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.</param>
 <param name="Side">Determines on which side of radial axis line the tick and tick labels appear.</param>
 <param name="Title">Sets the title of the Radial Axis.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar&lt;N&gt;.uirevision`.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="Calendar">Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.RadialAxis.init``6(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoTypeNumbers},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AutoRange},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.RangeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryOrder},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Title},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickOptions},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowExponent},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ExponentFormat},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.TickFormatStop}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Calendar})">
 <summary>
 Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.
 </summary>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
 <param name="AxisType">Sets the angular axis type. If "linear", set `thetaunit` to determine the unit in which axis value are shown. If "category, use `period` to set the number of integer coordinates around polar axis.</param>
 <param name="AutoTypeNumbers">Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</param>
 <param name="AutoRange">Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".</param>
 <param name="RangeMode">If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. If "normal", the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).</param>
 <param name="Range">Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="CategoryOrder">Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.</param>
 <param name="CategoryArray">Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.</param>
 <param name="Angle">Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.</param>
 <param name="Side">Determines on which side of radial axis line the tick and tick labels appear.</param>
 <param name="Title">Sets the title of the Radial Axis.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar&lt;N&gt;.uirevision`.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="TickMode">Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `TickVals` and the tick text is `TickText`. ("array" is the default value if `TickVals` is provided).</param>
 <param name="NTicks">Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".</param>
 <param name="Tick0">Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L&lt;f&gt;" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</param>
 <param name="DTick">Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L&lt;f&gt;", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M&lt;n&gt;" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `TickText`.</param>
 <param name="TickText">Sets the text displayed at the ticks position via `TickVals`. Only has an effect if `tickmode` is set to "array". Used with `TickVals`.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickPrefix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="ShowTickSuffix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="ShowExponent">If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.</param>
 <param name="ExponentFormat">Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.</param>
 <param name="MinExponent">Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `TickFormat` is "SI" or "B".</param>
 <param name="SeparateThousands">If "true", even 4-digit integers are separated</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format. And for dates see: https://github.com/d3/d3-time-format#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with TickFormat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickFormatStops">Set rules for customizing TickFormat on different zoom levels</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="Calendar">Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.RadialAxis">
 <summary>Radial axes can be used as a scale for the radial coordinates in polar plots.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.tryGetTypedMember``1(System.String,Plotly.NET.LayoutObjects.Polar)">
 <summary>
 Returns Some(dynamic member value) of the object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="polar">The object to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.style(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RadialAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AngularAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PolarGridShape},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BarMode},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Create a function that applies the given style parameters to a Polar object
 </summary>
 <param name="Domain">Sets the domain of this polar subplot</param>
 <param name="Sector">Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with "0" corresponding to rightmost limit of the polar subplot.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the polar subplot.</param>
 <param name="BGColor">Set the background color of the subplot</param>
 <param name="RadialAxis">Sets the radial axis of the polar subplot.</param>
 <param name="AngularAxis">Sets the angular axis of the polar subplot.</param>
 <param name="GridShape">Determines if the radial axis grid lines and angular axis line are drawn as "circular" sectors or as "linear" (polygon) sectors. Has an effect only when the angular axis has `type` "category". Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is "circular" (so that radial axis scale is the same as the data scale).</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.</param>
 <param name="BarMode">Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to an "opacity" to see multiple bars.</param>
 <param name="BarGap">Sets the gap (in plot fraction) between bars of adjacent location coordinates.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.setRadialAxis(Plotly.NET.LayoutObjects.RadialAxis)">
 <summary>
 Returns a function that sets the RadialAxis object of the given polar object.
 </summary>
 <param name="radialAxis">The new RadialAxis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.setAngularAxis(Plotly.NET.LayoutObjects.AngularAxis)">
 <summary>
 Returns a function that sets the AngularAxis object of the given polar object.
 </summary>
 <param name="angularAxis">The new AngularAxis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RadialAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.AngularAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PolarGridShape},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
 Initialize a Polar object that contains layout options concerned with polar plots.
 </summary>
 <param name="Domain">Sets the domain of this polar subplot</param>
 <param name="Sector">Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with "0" corresponding to rightmost limit of the polar subplot.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the polar subplot.</param>
 <param name="BGColor">Set the background color of the subplot</param>
 <param name="RadialAxis">Sets the radial axis of the polar subplot.</param>
 <param name="AngularAxis">Sets the angular axis of the polar subplot.</param>
 <param name="GridShape">Determines if the radial axis grid lines and angular axis line are drawn as "circular" sectors or as "linear" (polygon) sectors. Has an effect only when the angular axis has `type` "category". Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is "circular" (so that radial axis scale is the same as the data scale).</param>
 <param name="UIRevision">Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.getRadialAxis(Plotly.NET.LayoutObjects.Polar)">
 <summary>
 Returns the RadialAxis object of the given polar object.

 If there is no RadialAxis set, returns an empty RadialAxis object.
 </summary>
 <param name="polar">The polar object to get the RadialAxis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Polar.getAngularAxis(Plotly.NET.LayoutObjects.Polar)">
 <summary>
 Returns the AngularAxis object of the given polar object.

 If there is no AngularAxis set, returns an empty AngularAxis object.
 </summary>
 <param name="polar">The polar object to get the AngularAxis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.ImaginaryAxis.style``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a function that applies the given style parameters to a ImaginaryAxis object
 </summary>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickSuffix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickPrefix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.ImaginaryAxis.init``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initialize an ImaginaryAxis object that can be used as a imaginary scale for smith coordinates.
 </summary>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickSuffix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickPrefix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.ImaginaryAxis">
 <summary>Angular axes can be used as a scale for the angular coordinates in polar plots.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.RealAxis.style``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a function that applies the given style parameters to a RealAxis object
 </summary>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickSuffix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickPrefix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="Side">Determines on which side of real axis line the tick and tick labels appear.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.RealAxis.init``1(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Layer},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ShowTickOption},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickLabelPosition},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Initialize an RealAxis object that can be used as a real scale for smith coordinates.
 </summary>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="GridColor">Sets the color of the grid lines.</param>
 <param name="GridWidth">Sets the width (in px) of the grid lines.</param>
 <param name="HoverFormat">Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="Layer">Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.</param>
 <param name="LineColor">Sets the axis line color.</param>
 <param name="LineWidth">Sets the width (in px) of the axis line.</param>
 <param name="ShowGrid">Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.</param>
 <param name="ShowLine">Determines whether or not a line bounding this axis is drawn.</param>
 <param name="ShowTickLabels">Determines whether or not the tick labels are drawn.</param>
 <param name="ShowTickSuffix">If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.</param>
 <param name="ShowTickPrefix">Same as `showtickprefix` but for tick suffixes.</param>
 <param name="Side">Determines on which side of real axis line the tick and tick labels appear.</param>
 <param name="TickAngle">Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</param>
 <param name="TickColor">Sets the tick color.</param>
 <param name="TickFont">Sets the tick font.</param>
 <param name="TickFormat">Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"</param>
 <param name="TickLen">Sets the tick length (in px).</param>
 <param name="TickPrefix">Sets a tick label prefix.</param>
 <param name="Ticks">Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.</param>
 <param name="TickSuffix">Sets a tick label suffix.</param>
 <param name="TickVals">Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.</param>
 <param name="TickWidth">Sets the tick width (in px).</param>
 <param name="Visible">A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.RealAxis">
 <summary>Angular axes can be used as a scale for the angular coordinates in polar plots.</summary>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.tryGetTypedMember``1(System.String,Plotly.NET.LayoutObjects.Smith)">
 <summary>
 Returns Some(dynamic member value) of the object's underlying DynamicObj when a dynamic member eith the given name exists, and None otherwise.
 </summary>
 <param name="propName">The name of the dynamic member to get the value of</param>
 <param name="smith">The object to get the dynamic member value from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.style(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ImaginaryAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RealAxis})">
 <summary>
 Create a function that applies the given style parameters to a Smith object
 </summary>
 <param name="BGColor">Set the background color of the subplot</param>
 <param name="Domain">Sets the domain of this smith subplot</param>
 <param name="ImaginaryAxis">Sets the imaginary axis of this smith subplot</param>
 <param name="RealAxis">Sets the real axis of this smith subplot</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.setRealAxis(Plotly.NET.LayoutObjects.RealAxis)">
 <summary>
 Returns a function that sets the RealAxis object of the given smith object.
 </summary>
 <param name="realAxis">The new RealAxis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.setImaginaryAxis(Plotly.NET.LayoutObjects.ImaginaryAxis)">
 <summary>
 Returns a function that sets the ImaginaryAxis object of the given smith object.
 </summary>
 <param name="imaginaryAxis">The new ImaginaryAxis object</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.ImaginaryAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.RealAxis})">
 <summary>
 Initialize a Smith object that contains layout options concerned with smith plots.
 </summary>
 <param name="BGColor">Set the background color of the subplot</param>
 <param name="Domain">Sets the domain of this smith subplot</param>
 <param name="ImaginaryAxis">Sets the imaginary axis of this smith subplot</param>
 <param name="RealAxis">Sets the real axis of this smith subplot</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.getRealAxis(Plotly.NET.LayoutObjects.Smith)">
 <summary>
 Returns the RealAxis object of the given smith object.

 If there is no RealAxis set, returns an empty RealAxis object.
 </summary>
 <param name="smith">The smith object to get the RealAxis from</param>
</member>
<member name="M:Plotly.NET.LayoutObjects.Smith.getImaginaryAxis(Plotly.NET.LayoutObjects.Smith)">
 <summary>
 Returns the ImaginaryAxis object of the given smith object.

 If there is no ImaginaryAxis set, returns an empty ImaginaryAxis object.
 </summary>
 <param name="smith">The smith object to get the ImaginaryAxis from</param>
</member>
<member name="T:Plotly.NET.LayoutObjects.Smith">
<summary>
 The smith subplot is used by TraceSmith traces.
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Pattern.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternFillMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>

 </summary>
 <param name="BGColor">When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background. </param>
 <param name="FGColor">When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</param>
 <param name="FGOpacity">Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.</param>
 <param name="FillMode">Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</param>
 <param name="Shape">Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</param>
 <param name="MultiShape">Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</param>
 <param name="Size">Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</param>
 <param name="MultiSize">Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</param>
 <param name="Solidity">Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</param>
</member>
<member name="M:Plotly.NET.TraceObjects.Marker.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Gradient},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Returns a function that applies the given styles to a Marker object.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</param>
 <param name="Color">Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</param>
 <param name="Colors">Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the marker's color bar.</param>
 <param name="Colorscale"></param>
 <param name="Gradient">Sets the marker's gradient</param>
 <param name="Outline">Sets the marker's outline.</param>
 <param name="Opacity">Sets the marker opacity.</param>
 <param name="MaxDisplayed">Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.</param>
 <param name="MultiOpacity">Sets the individual marker opacity.</param>
 <param name="Pattern">Sets the pattern within the marker.</param>
 <param name="ReverseScale">Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.</param>
 <param name="Size">Sets the marker's size.</param>
 <param name="MultiSize">Sets the individual marker's size.</param>
 <param name="SizeMin">Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</param>
 <param name="SizeMode">Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</param>
 <param name="SizeRef">Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</param>
 <param name="Symbol">Sets the marker symbol.</param>
 <param name="MultiSymbol">Sets the individual marker symbols.</param>
 <param name="Symbol3D">Sets the marker symbol for 3d traces.</param>
 <param name="MultiSymbol3D">Sets the individual marker symbols for 3d traces.</param>
 <param name="OutlierColor">Sets the color of the outlier sample points.</param>
 <param name="OutlierWidth">Sets the width of the outlier sample points.</param>
</member>
<member name="M:Plotly.NET.TraceObjects.Marker.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Gradient},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Returns a new Marker object with the given styling.
 </summary>
 <param name="AutoColorScale">Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</param>
 <param name="CAuto">Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</param>
 <param name="CMax">Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</param>
 <param name="CMid">Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</param>
 <param name="CMin">Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</param>
 <param name="Color">Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</param>
 <param name="Colors">Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</param>
 <param name="ColorAxis">Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</param>
 <param name="ColorBar">Sets the marker's color bar.</param>
 <param name="Colorscale"></param>
 <param name="Gradient">Sets the marker's gradient</param>
 <param name="Outline">Sets the marker's outline.</param>
 <param name="Opacity">Sets the marker opacity.</param>
 <param name="MaxDisplayed">Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.</param>
 <param name="MultiOpacity">Sets the individual marker opacity.</param>
 <param name="Pattern">Sets the pattern within the marker.</param>
 <param name="ReverseScale">Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.</param>
 <param name="Size">Sets the marker's size.</param>
 <param name="MultiSize">Sets the individual marker's size.</param>
 <param name="SizeMin">Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</param>
 <param name="SizeMode">Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</param>
 <param name="SizeRef">Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</param>
 <param name="Symbol">Sets the marker symbol.</param>
 <param name="MultiSymbol">Sets the individual marker symbols.</param>
 <param name="Symbol3D">Sets the marker symbol for 3d traces.</param>
 <param name="MultiSymbol3D">Sets the individual marker symbols for 3d traces.</param>
 <param name="OutlierColor">Sets the color of the outlier sample points.</param>
 <param name="OutlierWidth">Sets the width of the outlier sample points.</param>
</member>
<member name="T:Plotly.NET.TraceObjects.Marker">
<summary>
 The marker object determines the style of the markers representing datums in various types of plots.
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.StreamTubeStarts.style``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}})">
 <summary>
 Creates a function that applies the given style parameters to a TubeStarts object
 </summary>
 <param name="X">Sets the x components of the starting position of the streamtubes</param>
 <param name="Y">Sets the y components of the starting position of the streamtubes</param>
 <param name="Z">Sets the z components of the starting position of the streamtubes</param>
</member>
<member name="M:Plotly.NET.TraceObjects.StreamTubeStarts.init``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}})">
 <summary>
 Initializes a TubeStarts object
 </summary>
 <param name="X">Sets the x components of the starting position of the streamtubes</param>
 <param name="Y">Sets the y components of the starting position of the streamtubes</param>
 <param name="Z">Sets the z components of the starting position of the streamtubes</param>
</member>
<member name="T:Plotly.NET.TraceObjects.StreamTubeStarts">
<summary>
 An object to set the Lighting of a 3D Scene
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.LightPosition.style(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Creates a function that applies the given style parameters to a LightPosition object
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <param name="Z"></param>
</member>
<member name="M:Plotly.NET.TraceObjects.LightPosition.init(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Initialize a LightPosition object
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <param name="Z"></param>
</member>
<member name="M:Plotly.NET.TraceObjects.Lighting.style(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Creates a function that applies the given style parameters to a Lighting object
 </summary>
 <param name="Ambient">Ambient light increases overall color visibility but can wash out the image.</param>
 <param name="Diffuse">Represents the extent that incident rays are reflected in a range of angles.</param>
 <param name="FaceNormalEpsilon">Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</param>
 <param name="Fresnel">Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</param>
 <param name="Roughness">Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</param>
 <param name="Specular">Represents the level that incident rays are reflected in a single direction, causing shine.</param>
 <param name="VertexNormalEpsilon">Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</param>
</member>
<member name="M:Plotly.NET.TraceObjects.Lighting.init(Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Initialize a Lighting object
 </summary>
 <param name="Ambient">Ambient light increases overall color visibility but can wash out the image.</param>
 <param name="Diffuse">Represents the extent that incident rays are reflected in a range of angles.</param>
 <param name="FaceNormalEpsilon">Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</param>
 <param name="Fresnel">Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</param>
 <param name="Roughness">Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</param>
 <param name="Specular">Represents the level that incident rays are reflected in a single direction, causing shine.</param>
 <param name="VertexNormalEpsilon">Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</param>
</member>
<member name="T:Plotly.NET.TraceObjects.Lighting">
<summary>
 An object to set the Lighting of a 3D Scene
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.FontSelectionStyle.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color})">
<summary>
 Init Font()
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Pathbar.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PathbarEdgeShape},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font})">
<summary>
Applies the given styles to the given pathbar object

Parameters:

Visible  : Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.

Side     : Determines on which side of the the treemap the `pathbar` should be presented.

EdgeShape: Determines which shape is used for edges between `pathbar` labels.

Thickness: Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.

Textfont : Sets the font used inside `pathbar`.
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Pathbar.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PathbarEdgeShape},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font})">
<summary>
Initializes pathbar object (used in Chart.Treemap)

Parameters:

Visible  : Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.

Side     : Determines on which side of the the treemap the `pathbar` should be presented.

EdgeShape: Determines which shape is used for edges between `pathbar` labels.

Thickness: Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.

Textfont : Sets the font used inside `pathbar`.
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Contours.initSurface(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour})">
<summary>
 Initialized Contours object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Contours">
<summary>
 Contours type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Contour.init(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.ContourProject},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Initialized a Contour object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Contour">
<summary>
 Contour object inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Dimension.initSplom``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.AxisType},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Initializes dimensions object to be used with SPLOM plots
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Dimension.initParallel``4(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TickMode},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Initializes dimensions object to be used with parcats and parcoords plots
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Dimension">
<summary>
 Dimensions type inherits from dynamic object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.WaterfallConnector">
<summary>
 Styles for connector lines in Waterfall Charts.

 Parameters:

 Line          : Sets the Line style for this WaterfallConnector

 Visible       : Wether or not connectors are visible

 ConnectorMode : Sets the shape of connector lines.
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.FunnelConnector">
<summary>
 Styles for connector lines in Funnel Charts.

 Parameters:

 Line          : Sets the Line style for this WaterfallConnector

 Visible       : Wether or not connectors are visible

 ConnectorMode : Sets the shape of connector lines.
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Box.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Initialized Line object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Box">
<summary>
 Box type inherits from dynamic object (parent violin)
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.MeanLine.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Initialized Line object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.MeanLine">
<summary>
 Meanline type inherits from dynamic object (parent violin)
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Bins">
<summary>
 Bin type inherits from dynamic object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.Cumulative">
<summary>
 Cumulative type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.Error.style``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a function that applies the given style parameters to an Error object
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="M:Plotly.NET.TraceObjects.Error.init``2(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ErrorType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
 <summary>
 Returns a new Error object with the given styling.
 </summary>
 <param name ="Visible">Determines whether or not this set of error bars is visible.</param>
 <param name ="Type">Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.</param>
 <param name ="Symmetric">Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</param>
 <param name ="Array">Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</param>
 <param name ="Arrayminus">Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</param>
 <param name ="Value">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.</param>
 <param name ="Valueminus">Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</param>
 <param name ="Traceref"></param>
 <param name ="Tracerefminus"></param>
 <param name ="Copy_ystyle"></param>
 <param name ="Color">Sets the stoke color of the error bars.</param>
 <param name ="Thickness">Sets the thickness (in px) of the error bars.</param>
 <param name ="Width">Sets the width (in px) of the cross-bar at both ends of the error bars.</param>
</member>
<member name="T:Plotly.NET.TraceObjects.Error">
<summary>
 Error type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.TraceObjects.TableCells.init``2(Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.HorizontalAlign}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TableFill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}})">
<summary>
 Initialized Cells object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.TableCells">
<summary>
 Cells type inherits from dynamic object
</summary>
</member>
<member name="T:Plotly.NET.TraceObjects.TableFill">
<summary>
 CellColor type inherits from dynamic object
</summary>
</member>
<member name="M:Plotly.NET.ConfigObjects.Edits.style(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Returns a function that apllioes the given styles to an Edits Object.
 </summary>
 <param name="AnnotationPosition">Determines if the main anchor of the annotation is editable. The main anchor corresponds to the text (if no arrow) or the arrow (which drags the whole thing leaving the arrow length and direction unchanged).</param>
 <param name="AnnotationTail">Has only an effect for annotations with arrows. Enables changing the length and direction of the arrow.</param>
 <param name="AnnotationText">Enables editing annotation text.</param>
 <param name="AxisTitleText">Enables editing axis title text.</param>
 <param name="ColorbarPosition">Enables moving colorbars.</param>
 <param name="ColorbarTitleText">Enables moving colorbars.</param>
 <param name="LegendPosition">Enables moving colorbars.</param>
 <param name="LegendText">Enables editing the trace name fields from the legend</param>
 <param name="ShapePosition">Enables editing the trace name fields from the legend</param>
 <param name="TitleText">Enables editing the global layout title.</param>
</member>
<member name="M:Plotly.NET.ConfigObjects.Edits.init(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Returns a new Edits Object with the given styling.
 </summary>
 <param name="AnnotationPosition">Determines if the main anchor of the annotation is editable. The main anchor corresponds to the text (if no arrow) or the arrow (which drags the whole thing leaving the arrow length and direction unchanged).</param>
 <param name="AnnotationTail">Has only an effect for annotations with arrows. Enables changing the length and direction of the arrow.</param>
 <param name="AnnotationText">Enables editing annotation text.</param>
 <param name="AxisTitleText">Enables editing axis title text.</param>
 <param name="ColorbarPosition">Enables moving colorbars.</param>
 <param name="ColorbarTitleText">Enables moving colorbars.</param>
 <param name="LegendPosition">Enables moving colorbars.</param>
 <param name="LegendText">Enables editing the trace name fields from the legend</param>
 <param name="ShapePosition">Enables editing the trace name fields from the legend</param>
 <param name="TitleText">Enables editing the global layout title.</param>
</member>
<member name="T:Plotly.NET.ConfigObjects.Edits">
<summary>
 The Edits object holds information about which elements of the chart are editable.
</summary>
</member>
<member name="P:Plotly.NET.ChartTemplates.plotly">
<summary>
 the default template, as used in the python lib by default.
</summary>
</member>
<member name="T:Plotly.NET.ChartTemplates.ColorWays">
<summary>
 A colorway is an array of colors that contains the default colors for traces
</summary>
</member>
<member name="M:Plotly.NET.Defaults.reset">
<summary>
 reset global defaults to the initial values
</summary>
</member>
<member name="P:Plotly.NET.Defaults.DefaultTemplate">
<summary>
 The default chart template. Default: ChartTemplates.plotly
</summary>
</member>
<member name="P:Plotly.NET.Defaults.DefaultDisplayOptions">
<summary>
 The display options used for generating html. Default: DisplayOptions.init ()
</summary>
</member>
<member name="P:Plotly.NET.Defaults.DefaultConfig">
<summary>
 The default chart config. Default: Config.init (Responsive = true)
</summary>
</member>
<member name="P:Plotly.NET.Defaults.DefaultHeight">
<summary>
 The default height of the chart container in generated html files. Default: 600 (px)
</summary>
</member>
<member name="P:Plotly.NET.Defaults.DefaultWidth">
<summary>
 The default width of the chart container in generated html files. Default: 600 (px)
</summary>
</member>
<member name="T:Plotly.NET.Defaults">
<summary>
 Contains mutable global default values.

 Changing these values will apply the default values to all consecutive Chart generations.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.getTraceIDs(Plotly.NET.GenericChart.GenericChart)">
<summary>
 returns a list of TraceIDs representing the types of all traces contained in the chart.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.getTraceID(Plotly.NET.GenericChart.GenericChart)">
<summary>
 returns a single TraceID (when all traces of the charts are of the same type), or traceID.Multi if the chart contains traces of multiple different types
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.ofTraceObjects(System.Boolean,Microsoft.FSharp.Collections.FSharpList{Plotly.NET.Trace})">
<summary>
 Converts from a list of trace objects and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in `Defaults`
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.ofTraceObject(System.Boolean,Plotly.NET.Trace)">
<summary>
 Converts from a trace object and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in `Defaults`
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.existsTrace(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace,System.Boolean},Plotly.NET.GenericChart.GenericChart)">
<summary>
 Returns true if the given chart contains a trace for which the predicate function returns true
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.countTrace(Plotly.NET.GenericChart.GenericChart)">
<summary>
 Returns the number of traces within the GenericChart
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.mapiTrace(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace,Plotly.NET.Trace}},Plotly.NET.GenericChart.GenericChart)">
<summary>
 Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.
 The integer index passed to the function indicates the index (from 0) of element being transformed.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.mapTrace(Microsoft.FSharp.Core.FSharpFunc{Plotly.NET.Trace,Plotly.NET.Trace},Plotly.NET.GenericChart.GenericChart)">
<summary>
 Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.toEmbeddedImage(Plotly.NET.StyleParam.ImageFormat,Plotly.NET.GenericChart.GenericChart)">
<summary>
 Converts a GenericChart to an image and embeds it into a html page
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.toChartImage(Plotly.NET.StyleParam.ImageFormat,Plotly.NET.GenericChart.GenericChart)">
<summary>
 Converts a GenericChart to its Image representation

 This function is obsolete and will soon be dropped.

 Either use a static plot config (e.g. myChart |&gt; Chart.withConfig(Config.init(StaticPlot=true)) https://plotly.net/00_3_chart-config.html#Static-plots

 or use the Plotly.NET.ImageExport package https://www.nuget.org/packages/Plotly.NET.ImageExport/
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.toEmbeddedHTML(Plotly.NET.GenericChart.GenericChart)">
<summary>
 Converts a GenericChart to it HTML representation and embeds it into a html page.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.toChartHtmlWithSize(System.Int32,System.Int32,Plotly.NET.GenericChart.GenericChart)">
<summary>
 Converts a GenericChart to it HTML representation and set the size of the div
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.toChartHTML(Plotly.NET.GenericChart.GenericChart)">
<summary>
 Converts a GenericChart to it HTML representation. The div layer has a default size of 600 if not specified otherwise.
</summary>
</member>
<member name="M:Plotly.NET.GenericChart.tryGetLayoutSize(Plotly.NET.GenericChart.GenericChart)">
<summary>
 Returns a tuple containing the width and height of a GenericChart&apos;s layout if the property is set, otherwise returns None
</summary>
</member>
<member name="T:Plotly.NET.GenericChart">
<summary>
 Module to represent a GenericChart
</summary>
</member>
<member name="T:Plotly.NET.HTML">
<summary>
 HTML template for Plotly.js
</summary>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Waterfall``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,Plotly.NET.StyleParam.WaterfallMeasure}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.WaterfallConnector},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a waterfall chart.

 Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values
 </summary>
 <param name="xymeasures">Sets the x and y coordinates of the plotted data, together with a measure for each (x,y) pair that defines the type of computation done for each pair.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="TotalsColor">Sets the color of total values</param>
 <param name="Totals">Sets the style options of total values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="MultiWidth">Sets the individual bar width of each datum (in position axis units).</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="Connector">Sets the waterfall connector of this trace</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Waterfall``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.WaterfallConnector},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.WaterfallMeasure}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a waterfall chart.

 Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values
 </summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="TotalsColor">Sets the color of total values</param>
 <param name="Totals">Sets the style options of total values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="MultiWidth">Sets the individual bar width of each datum (in position axis units).</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="Connector">Sets the waterfall connector of this trace</param>
 <param name="Measure">An array containing types of measures. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Waterfall``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.WaterfallConnector},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.WaterfallMeasure}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a waterfall chart.

 Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="TotalsColor">Sets the color of total values</param>
 <param name="Totals">Sets the style options of total values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="MultiWidth">Sets the individual bar width of each datum (in position axis units).</param>
 <param name="Opacity">Sets the opacity of the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="TextFont">Sets the font used for `text`.</param>
 <param name="Connector">Sets the waterfall connector of this trace</param>
 <param name="Measure">An array containing types of measures. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Violin``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Box},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.MeanLine},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ScaleMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpanMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a violin plot.

 A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.

 In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) array is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided.
 </summary>
 <param name="xy">Sets the xy sample data or coordinate pairs</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="Points">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the violins are shown with no sample points. Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to "outliers".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Orientation">Sets the orientation of the violin(s). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="Width">Sets the width of the violin in data coordinates. If "0" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the violin (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="ShowBox">Wether and how to draw a miniature box plot</param>
 <param name="BoxWidth">Sets the width of the miniature box plot</param>
 <param name="BoxFillColor">Sets the fill color of the miniature box plot</param>
 <param name="Box">Sets the styles of the miniature box plot (use this for more finegrained control than the other box-associated arguments)</param>
 <param name="BandWidth">Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</param>
 <param name="MeanLine">Wether and how to draw the meanline</param>
 <param name="ScaleGroup">If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together</param>
 <param name="ScaleMode">Sets the metric by which the width of each violin is determined."width" means each violin has the same (max) width"count" means the violins are scaled by the number of sample points makingup each violin.</param>
 <param name="Side">Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under "overlay" mode, where one trace has `side` set to "positive" and the other to "negative".</param>
 <param name="Span">Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to "manual".</param>
 <param name="SpanMode">Sets the method by which the span in data space where the density function will be computed. "soft" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. "hard" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode "manual" and fill in the `span` attribute.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Violin``2(System.Collections.Generic.IEnumerable{``0},Plotly.NET.StyleParam.Orientation,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Box},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.MeanLine},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ScaleMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpanMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a violin plot.

 A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.

 In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) array is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided.
 </summary>
 <param name="data">Sets the sample data or coordinate pairs</param>
 <param name="orientation">Sets the orientation of the violin(s). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Points">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the violins are shown with no sample points. Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to "outliers".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Width">Sets the width of the violin in data coordinates. If "0" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the violin (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="ShowBox">Wether and how to draw a miniature box plot</param>
 <param name="BoxWidth">Sets the width of the miniature box plot</param>
 <param name="BoxFillColor">Sets the fill color of the miniature box plot</param>
 <param name="Box">Sets the styles of the miniature box plot (use this for more finegrained control than the other box-associated arguments)</param>
 <param name="BandWidth">Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</param>
 <param name="MeanLine">Wether and how to draw the meanline</param>
 <param name="ScaleGroup">If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together</param>
 <param name="ScaleMode">Sets the metric by which the width of each violin is determined."width" means each violin has the same (max) width"count" means the violins are scaled by the number of sample points makingup each violin.</param>
 <param name="Side">Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under "overlay" mode, where one trace has `side` set to "positive" and the other to "negative".</param>
 <param name="Span">Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to "manual".</param>
 <param name="SpanMode">Sets the method by which the span in data space where the density function will be computed. "soft" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. "hard" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode "manual" and fill in the `span` attribute.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Violin``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Box},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.MeanLine},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ScaleMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ViolinSide},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SpanMode},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a violin plot.

 A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.

 In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) array is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided.
 </summary>
 <param name="X">Sets the x sample data or coordinates.</param>
 <param name="Y">Sets the y sample data or coordinates.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Points">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the violins are shown with no sample points. Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to "outliers".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Orientation">Sets the orientation of the violin(s). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="Width">Sets the width of the violin in data coordinates. If "0" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the violin (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="ShowBox">Wether and how to draw a miniature box plot</param>
 <param name="BoxWidth">Sets the width of the miniature box plot</param>
 <param name="BoxFillColor">Sets the fill color of the miniature box plot</param>
 <param name="Box">Sets the styles of the miniature box plot (use this for more finegrained control than the other box-associated arguments)</param>
 <param name="BandWidth">Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</param>
 <param name="MeanLine">Wether and how to draw the meanline</param>
 <param name="ScaleGroup">If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together</param>
 <param name="ScaleMode">Sets the metric by which the width of each violin is determined."width" means each violin has the same (max) width"count" means the violins are scaled by the number of sample points makingup each violin.</param>
 <param name="Side">Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under "overlay" mode, where one trace has `side` set to "positive" and the other to "negative".</param>
 <param name="Span">Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to "manual".</param>
 <param name="SpanMode">Sets the method by which the span in data space where the density function will be computed. "soft" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. "hard" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode "manual" and fill in the `span` attribute.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedFunnel``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FunnelConnector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a stacked Funnel chart, a variation of the funnel chart where multiple funnel bars of each stage are stacked on top of each other.
 To create this type of chart, combine multiple of these charts via `Chart.combine`.

 Funnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a "drop-off" representation wherein each item appears in each stage it traversed. See also the "funnelarea" trace type for a different approach to visualizing funnel data.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="Offset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="MarkerColor">Sets the color of the bars.</param>
 <param name="MarkerOutline">Sets the color of the bar outline.</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="TextInfo">Determines which trace information appear on the graph. In the case of having multiple funnels, percentages and totals are computed separately (per trace).</param>
 <param name="ConnectorLineColor">Sets the line color of the funnel connector</param>
 <param name="ConnectorLineStyle">Sets the line style of the funnel connector</param>
 <param name="ConnectorFillColor">Sets the fill color of the funnel connector</param>
 <param name="ConnectorLine">Sets the line of the funnel connector (use this for more finegrained control than the other connector line associated arguments).</param>
 <param name="Connector">Sets the funnel connector (use this for more finegrained control than the other connector-associated arguments).</param>
 <param name="InsideTextFont">Sets the font used for `text` lying inside the bar.</param>
 <param name="OutsideTextFont">Sets the font used for `text` lying outside the bar.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedColumn``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a stacked column chart, with bars plotted vertically. Values with the same key are stacked on top of each other in the Y dimension.
 To create this type of chart, combine multiple of these charts via `Chart.combine`.

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="keysValues">Sets the (key,value) pairs that are plotted as the size and key of each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedColumn``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a stacked column chart, with bars plotted vertically. Values with the same key are stacked on top of each other in the Y dimension.
 To create this type of chart, combine multiple of these charts via `Chart.combine`.

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="values">Sets the values that are plotted as the size of each bar.</param>
 <param name="Keys">Sets the keys associated with each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedBar``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a stacked bar chart, with bars plotted horizontally. Values with the same key are stacked on top of each other in the X dimension.
 To create this type of chart, combine multiple of these charts via `Chart.combine`.

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="keysValues">Sets the (key,value) pairs that are plotted as the size and key of each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedBar``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a stacked bar chart, with bars plotted horizontally. Values with the same key are stacked on top of each other in the X dimension.
 To create this type of chart, combine multiple of these charts via `Chart.combine`.

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="values">Sets the values that are plotted as the size of each bar.</param>
 <param name="Keys">Sets the keys associated with each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedArea``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary> Creates a stacked Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis. Multiple Charts of this type are stacked on top of each others y dimensions</summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.StackedArea``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary> Creates a stacked Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis. Multiple Charts of this type are stacked on top of each others y dimensions</summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Splom``3(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SplomDiagonal},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a scatter plot matrix (SPLOM) from multiple input dimensions.

 Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.
 </summary>
 <param name="keyValues">Sets the dimensions of the scatter plot matrix as (dimensionKey,dimensionValues) pairs, where each such pair corresponds to a generated axis.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the marker.</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker. Use `Color.fromColorScaleValues` to map marker colors to a colorscale.</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the symbol of all marker</param>
 <param name="MultiMarkerSymbol">Sets the symbol of each individual marker</param>
 <param name="Marker">Sets the markers (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="ShowDiagonal">Wether or not to show the matrix diagional</param>
 <param name="Diagonal">Sets the styles applied to the scatter plot matrix diagonal</param>
 <param name="ShowLowerHalf">Determines whether or not subplots on the lower half from the diagonal are displayed.</param>
 <param name="ShowUpperHalf">Determines whether or not subplots on the upper half from the diagonal are displayed.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Splom``1(System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SplomDiagonal},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a scatter plot matrix (SPLOM) from multiple input dimensions.

 Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.
 </summary>
 <param name="dimensions">Sets the dimensions of the scatter plot matrix, where each item corresponds to a generated axis.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the marker.</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker. Use `Color.fromColorScaleValues` to map marker colors to a colorscale.</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the symbol of all marker</param>
 <param name="MultiMarkerSymbol">Sets the symbol of each individual marker</param>
 <param name="Marker">Sets the markers (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="ShowDiagonal">Wether or not to show the matrix diagional</param>
 <param name="Diagonal">Sets the styles applied to the scatter plot matrix diagonal</param>
 <param name="ShowLowerHalf">Determines whether or not subplots on the lower half from the diagonal are displayed.</param>
 <param name="ShowUpperHalf">Determines whether or not subplots on the upper half from the diagonal are displayed.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.SplineArea``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a Spline area chart, which uses a smoothed Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis.</summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.SplineArea``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a Spline area chart, which uses a smoothed Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis.</summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Spline``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.
 Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X.
 </summary>
 <param name="xy">Sets the x,y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Spline``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.
 Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Scatter``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble
 </summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Scatter``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter plot.

 Scatter charts are the basis of Point, Line, and Bubble Charts, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Range``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Displays a range of data by plotting three Y values per data point (upper, mid, lower).

 The mid Y value usually resembles some kind of central tendency and the upper/lower Y values some kind of spread.
 </summary>
 <param name="xy">Sets the x and y coordinates of the plotted data (x is used for all y data, the y coordinates are those of the mod values).</param>
 <param name="upper">Sets the y coordinates of the plotted data for the upper Y value.</param>
 <param name="lower">Sets the y coordinates of the plotted data for the lower Y value.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="GroupName">Sets the name of the legendgroup for the three traces of this plot.</param>
 <param name="ShowMarkers">Determines whether or not an To show markers for each datum.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum for the mid Y values.</param>
 <param name="MultiText">Sets individual text for each datum for the mid Y values.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker for the mid Y values.</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker for the mid Y values.</param>
 <param name="MarkerOutline">Sets the outline of the marker for the mid Y values.</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum for the mid Y values.</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum for the mid Y values.</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments) for the mid Y values.</param>
 <param name="LineColor">Sets the color of the line for the mid Y values.</param>
 <param name="LineColorScale">Sets the colorscale of the line for the mid Y values.</param>
 <param name="LineWidth">Sets the width of the line for the mid Y values.</param>
 <param name="LineDash">sets the drawing style of the line for the mid Y values.</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments) for the mid Y values.</param>
 <param name="RangeColor">Sets the color of the range between upper and lower Y values.</param>
 <param name="UpperText">Sets a text associated with each datum for the upper Y values.</param>
 <param name="MultiUpperText">Sets individual text for each datum for the upper Y values.</param>
 <param name="LowerText">Sets a text associated with each datum for the lower Y values.</param>
 <param name="MultiLowerText">Sets individual text for each datum for the lower Y values.</param>
 <param name="TextFont">Sets the text font for all Text items</param>
 <param name="LowerName">Sets the name of the lower Y value trace.</param>
 <param name="LowerLine">Sets the line for the lower Y values.</param>
 <param name="LowerMarker">Sets the marker for the lower Y values.</param>
 <param name="UpperName">Sets the name of the uper Y value trace.</param>
 <param name="UpperLine">Sets the line for the upper Y values.</param>
 <param name="UpperMarker">Sets the marker for the upper Y values.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Range``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Displays a range of data by plotting three Y values per data point (upper, mid, lower).

 The mid Y value usually resembles some kind of central tendency and the upper/lower Y values some kind of spread.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data for the mid Y value.</param>
 <param name="upper">Sets the y coordinates of the plotted data for the upper Y value.</param>
 <param name="lower">Sets the y coordinates of the plotted data for the lower Y value.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name of the mid Y values. The trace name appear as the legend item and on hover</param>
 <param name="GroupName">Sets the name of the legendgroup for the three traces of this plot.</param>
 <param name="ShowMarkers">Determines whether or not an To show markers for each datum.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum for the mid Y values.</param>
 <param name="MultiText">Sets individual text for each datum for the mid Y values.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker for the mid Y values.</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker for the mid Y values.</param>
 <param name="MarkerOutline">Sets the outline of the marker for the mid Y values.</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum for the mid Y values.</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum for the mid Y values.</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments) for the mid Y values.</param>
 <param name="LineColor">Sets the color of the line for the mid Y values.</param>
 <param name="LineColorScale">Sets the colorscale of the line for the mid Y values.</param>
 <param name="LineWidth">Sets the width of the line for the mid Y values.</param>
 <param name="LineDash">sets the drawing style of the line for the mid Y values.</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments) for the mid Y values.</param>
 <param name="RangeColor">Sets the color of the range between upper and lower Y values.</param>
 <param name="UpperText">Sets a text associated with each datum for the upper Y values.</param>
 <param name="MultiUpperText">Sets individual text for each datum for the upper Y values.</param>
 <param name="LowerText">Sets a text associated with each datum for the lower Y values.</param>
 <param name="MultiLowerText">Sets individual text for each datum for the lower Y values.</param>
 <param name="TextFont">Sets the text font for all Text items</param>
 <param name="LowerName">Sets the name of the lower Y value trace.</param>
 <param name="LowerLine">Sets the line for the lower Y values.</param>
 <param name="LowerMarker">Sets the marker for the lower Y values.</param>
 <param name="UpperName">Sets the name of the uper Y value trace.</param>
 <param name="UpperLine">Sets the line for the upper Y values.</param>
 <param name="UpperMarker">Sets the marker for the upper Y values.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.PointDensity``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourColoring},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a point density plot - a combination of a Scatter plot and Histogram2DContour.

 Additionally to plotting the (x,y) data as points on a 2D plane, a density contour plot is computed by grouping a set of points specified by their x and y coordinates into bins, and applying a count aggregation function to compute the value to be used to compute contours.
 The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case). The resulting distribution is visualized as a contour plot.

 </summary>
 <param name="x">Sets the x coordinates of the plotted data as well as the sample data to be binned on the x axis.</param>
 <param name="y">Sets the y coordinates of the plotted data as well as the sample data to be binned on the y axis.</param>
 <param name="PointOpacity">Sets the opacity of the point trace.</param>
 <param name="PointMarkerColor">Sets the marker color of the point trace.</param>
 <param name="PointMarkerSymbol">Sets the marker symbol of the point trace.</param>
 <param name="PointMarkerSize">Sets the marker size of the point trace.</param>
 <param name="ContourLineColor">Sets the color of the contour lines of the histogram2dcontour trace.</param>
 <param name="ContourLineSmoothing">Sets the smoothing of the contour lines of the histogram2dcontour trace.</param>
 <param name="ContourLineWidth">Sets the width of the contour lines of the histogram2dcontour trace.</param>
 <param name="ShowContourLines">Wether or not to show contour lines</param>
 <param name="ShowContourLabels">Wether or not to show contour labels</param>
 <param name="ContourColoring">Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="ContourOpacity">Sets the opacity of the histogram2dcontour trace.</param>
 <param name="ColorBar">Sets the color bar.</param>
 <param name="ColorScale">Sets the colorscale of the histogram2dcontour trace.</param>
 <param name="ShowScale">wether or not to show the colorbar</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Point``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a Point chart, which uses Points in a 2D space to visualize data. </summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Point``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Point chart, which uses Points in a 2D space to visualize data.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.OHLC``1(System.Collections.Generic.IEnumerable{System.Tuple{System.DateTime,Plotly.NET.TraceObjects.StockData}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates an OHLC chart.

 The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.
 </summary>
 <param name="stockTimeSeries">a series of (time,StockData), where StockData contains opwn, high, low and close values.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="TickWidth">Sets the width of the open/close tick marks relative to the "x" minimal interval.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.OHLC``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates an OHLC chart.

 The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.
 </summary>
 <param name="open">Sets the open values.</param>
 <param name="high">Sets the high values.</param>
 <param name="low">Sets the low values.</param>
 <param name="close">Sets the close values.</param>
 <param name="x">Sets the x coordinates. If absent, linear coordinate will be generated.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="TickWidth">Sets the width of the open/close tick marks relative to the "x" minimal interval.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Line``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X.</summary>
 <param name="xy">Sets the x,y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Line``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary> Creates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X.</summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Image``2(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. `autorange: 'reversed'`), constrained to the domain (ie. `constrain: 'domain'`) and it will have the same scale as its x axis (ie. `scaleanchor: 'x,`) in order for pixels to be rendered as squares.
 </summary>
 <param name="z">A 2-dimensional array containing Plotly.NETs ARGB color object.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Image``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorModel},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ColorComponentBound},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. `autorange: 'reversed'`), constrained to the domain (ie. `constrain: 'domain'`) and it will have the same scale as its x axis (ie. `scaleanchor: 'x,`) in order for pixels to be rendered as squares.
 </summary>
 <param name="Z">A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.</param>
 <param name="Source">Specifies the data URI of the image to be visualized. The URI consists of "data:image/[&lt;media subtype&gt;][;base64],&lt;data&gt;"</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</param>
 <param name="ColorModel">Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.</param>
 <param name="ZMax">Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</param>
 <param name="ZMin">Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Histogram2DContour``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Computes a 2D histogram contour plot, also known as a density contour plot, which is a 2-dimensional generalization of a histogram which resembles a contour plot but is computed by grouping a set of points specified by their x and y coordinates into bins, and applying an aggregation function such as count or sum (if z is provided) to compute the value to be used to compute contours.

 The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot.
 </summary>
 <param name="x">Sets the sample data to be binned on the x axis.</param>
 <param name="y">Sets the sample data to be binned on the y axis.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Z">Sets the aggregation data.</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="BinGroup">Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of "1" on two histogram2d traces will make them their x-bins and y-bins match separately.</param>
 <param name="XBinGroup">Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBinGroup">Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="ContourLineDash">Sets the contour line dash style</param>
 <param name="ContourLineColor">Sets the contour line color</param>
 <param name="ContourLineSmoothing">Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.</param>
 <param name="ContourLine">Sets the contour lines (use this for more finegrained control than the other contourline-associated arguments).</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="Contours">Sets the style of the contours</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Histogram2D``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the 2-dimensional input data as 2D Histogram.

The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap.
 </summary>
 <param name="x">Sets the sample data to be binned on the x axis.</param>
 <param name="y">Sets the sample data to be binned on the y axis.</param>
 <param name="Z">Sets the aggregation data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Histogram``2(System.Collections.Generic.IEnumerable{``0},Plotly.NET.StyleParam.Orientation,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Cumulative},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a histogram, automatically determining if the data is to be used for the x or y dimension based on the `orientation` parameter.

 A histogram is an approximate representation of the distribution of numerical data. To construct a histogram, the first step is to "bin"  the range of values - that is, divide the entire range of values into a series of intervals - and then count how many values fall into each interval.
 The bins are usually specified as consecutive, non-overlapping intervals of a variable.

 Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided.
 </summary>
 <param name="data">Sets the sample data to be binned</param>
 <param name="orientation">Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="BinGroup">Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same "orientation" under `barmode` "stack", "relative" and "group" are forced into the same bingroup, Using `bingroup`, traces under `barmode` "overlay" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d" trace can share the same `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="MarkerColor">Sets the color of the histogram's bars.</param>
 <param name="Marker">Sets the marker for the histogram's bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Line">Sets the outline of the histogram's bars.</param>
 <param name="XError">Sets the x error of this trace.</param>
 <param name="YError">Sets the y error of this trace.</param>
 <param name="Cumulative">Sets wether and how the cumulative distribution is displayed</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Histogram``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistFunc},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HistNorm},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Bins},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Error},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Cumulative},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Hoverlabel},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a histogram.

 A histogram is an approximate representation of the distribution of numerical data. To construct a histogram, the first step is to "bin"  the range of values - that is, divide the entire range of values into a series of intervals - and then count how many values fall into each interval.
 The bins are usually specified as consecutive, non-overlapping intervals of a variable.

 The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided.
 </summary>
 <param name="X">Sets the sample data to be binned on the x axis.</param>
 <param name="Y">Sets the sample data to be binned on the y axis.</param>
 <param name="Orientation">Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="HistFunc">Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</param>
 <param name="HistNorm">Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="NBinsX">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</param>
 <param name="NBinsY">Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</param>
 <param name="BinGroup">Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same "orientation" under `barmode` "stack", "relative" and "group" are forced into the same bingroup, Using `bingroup`, traces under `barmode` "overlay" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d" trace can share the same `bingroup`</param>
 <param name="XBins">Sets the binning across the x dimension</param>
 <param name="YBins">Sets the binning across the y dimension</param>
 <param name="MarkerColor">Sets the color of the histogram's bars.</param>
 <param name="Marker">Sets the marker for the histogram's bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Line">Sets the outline of the histogram's bars.</param>
 <param name="XError">Sets the x error of this trace.</param>
 <param name="YError">Sets the y error of this trace.</param>
 <param name="Cumulative">Sets wether and how the cumulative distribution is displayed</param>
 <param name="HoverLabel">Sets the style of the hoverlabels of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Heatmap``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a heatmap.

 A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.
 </summary>
 <param name="zData">Sets the 2-dimensional z data, which will be visualized with the color scale.</param>
 <param name="colNames">Sets names for each column (as x coordinates)</param>
 <param name="rowNames">Sets names for each row (as y coordinates)</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="UseWebGL">Wether or not to use WebGL to render this trace</param>
 <param name="ReverseYAxis">Wether or not to reverse the y axis. If true, (0,0) will lie on the top left and increase downwards.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Heatmap``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a heatmap.

 A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.
 </summary>
 <param name="zData">Sets the 2-dimensional z data, which will be visualized with the color scale.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="UseWebGL">Wether or not to use WebGL to render this trace</param>
 <param name="ReverseYAxis">Wether or not to reverse the y axis. If true, (0,0) will lie on the top left and increase downwards.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Funnel``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FunnelConnector},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Funnel chart.

 Funnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a "drop-off" representation wherein each item appears in each stage it traversed. See also the "funnelarea" trace type for a different approach to visualizing funnel data.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="Width">Sets the bar width (in position axis units).</param>
 <param name="Offset">Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="Orientation">Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="MarkerColor">Sets the color of the bars.</param>
 <param name="MarkerOutline">Sets the color of the bar outline.</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="TextInfo">Determines which trace information appear on the graph. In the case of having multiple funnels, percentages and totals are computed separately (per trace).</param>
 <param name="ConnectorLineColor">Sets the line color of the funnel connector</param>
 <param name="ConnectorLineStyle">Sets the line style of the funnel connector</param>
 <param name="ConnectorFillColor">Sets the fill color of the funnel connector</param>
 <param name="ConnectorLine">Sets the line of the funnel connector (use this for more finegrained control than the other connector line associated arguments).</param>
 <param name="Connector">Sets the funnel connector (use this for more finegrained control than the other connector-associated arguments).</param>
 <param name="InsideTextFont">Sets the font used for `text` lying inside the bar.</param>
 <param name="OutsideTextFont">Sets the font used for `text` lying outside the bar.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Contour``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourColoring},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstraintOperation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a 2D contour plot, which shows the contour lines of a 2D numerical array z, i.e. interpolated lines of isovalues of z.

 A contour line (also isoline, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value

 The data from which contour lines are computed is set in `z`. Data in `z` must be a 2D array of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to "true", the above behavior is flipped.
 </summary>
 <param name="zData">Sets the z data which is used for computing the contour lines.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="ContourLineDash">Sets the contour line dash style</param>
 <param name="ContourLineColor">Sets the contour line color</param>
 <param name="ContourLineSmoothing">Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.</param>
 <param name="ContourLine">Sets the contour lines (use this for more finegrained control than the other contourline-associated arguments).</param>
 <param name="ContoursColoring">Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.</param>
 <param name="ContoursOperation">Sets the constraint operation. "=" keeps regions equal to `value` "&lt;" and "&lt;=" keep regions less than `value` "&gt;" and "&gt;=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</param>
 <param name="ContoursType">If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</param>
 <param name="ShowContourLabels">Determines whether to label the contour lines with their values.</param>
 <param name="ContourLabelFont">Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</param>
 <param name="Contours">Sets the styles of the contours (use this for more finegrained control than the other contour-associated arguments).</param>
 <param name="FillColor">Sets the fill color if `contours.type` is "constraint". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="NContours">Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Column``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a column chart, with bars plotted vertically

 A column chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="keysValues">Sets the (key,value) pairs that are plotted as the size and key of each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Column``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a column chart, with bars plotted vertically

 A column chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="values">Sets the values that are plotted as the size of each bar.</param>
 <param name="Keys">Sets the keys associated with each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Candlestick``1(System.Collections.Generic.IEnumerable{System.Tuple{System.DateTime,Plotly.NET.TraceObjects.StockData}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a candlestick chart.

 The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.
 </summary>
 <param name="stockTimeSeries">a series of (time,StockData), where StockData contains opwn, high, low and close values.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Candlestick``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.FinanceMarker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a candlestick chart.

 The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.
 </summary>
 <param name="open">Sets the open values.</param>
 <param name="high">Sets the high values.</param>
 <param name="low">Sets the low values.</param>
 <param name="close">Sets the close values.</param>
 <param name="x">Sets the x coordinates. If absent, linear coordinate will be generated.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Line">Sets the line of this trace.</param>
 <param name="IncreasingColor">Sets the color of increasing values</param>
 <param name="Increasing">Sets the style options of increasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="DecreasingColor">Sets the color of decreasing values</param>
 <param name="Decreasing">Sets the style options of decreasing values (use this for more finegrained control than the other increasing-associated arguments).</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Bubble``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.</summary>
 <param name="xysizes">Sets the x coordinates, y coordinates, and bubble sizes of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Bubble``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.</summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="sizes">Sets the bubble size of the plotted data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.BoxPlot``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.QuartileMethod},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a box plot.

 A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.
 The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.

 The sample data from which statistics are computed is set in `x` for vertically spanning boxes and in `y` for horizontally spanning boxes.
 </summary>
 <param name="xy">Sets the xy sample data or coordinate pairs</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the box (use this for more finegrained control than the other marker-associated arguments).</param>// <param name="Opacity">Sets the opacity of this trace.</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="BoxPoints">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the box(es) are shown with no sample points Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to "all" under the q1/median/q3 signature. Otherwise defaults to "outliers".</param>
 <param name="BoxMean">If "true", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If "sd" the standard deviation is also drawn. Defaults to "true" when `mean` is set. Defaults to "sd" when `sd` is set Otherwise defaults to "false".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Orientation">Sets the orientation of the box(es). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Notched">Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 " IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to "false" unless `notchwidth` or `notchspan` is set.</param>
 <param name="NotchWidth">Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</param>
 <param name="QuartileMethod">Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.BoxPlot``2(System.Collections.Generic.IEnumerable{``0},Plotly.NET.StyleParam.Orientation,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.QuartileMethod},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a box plot.

 A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.
 The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.

 The sample data from which statistics are computed is set in `x` for vertically spanning boxes and in `y` for horizontally spanning boxes.
 </summary>
 <param name="data">Sets the sample data or coordinates</param>
 <param name="orientation">Sets the orientation of the box.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the box (use this for more finegrained control than the other marker-associated arguments).</param>// <param name="Opacity">Sets the opacity of this trace.</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="BoxPoints">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the box(es) are shown with no sample points Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to "all" under the q1/median/q3 signature. Otherwise defaults to "outliers".</param>
 <param name="BoxMean">If "true", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If "sd" the standard deviation is also drawn. Defaults to "true" when `mean` is set. Defaults to "sd" when `sd` is set Otherwise defaults to "false".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Notched">Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 " IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to "false" unless `notchwidth` or `notchspan` is set.</param>
 <param name="NotchWidth">Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</param>
 <param name="QuartileMethod">Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.BoxPlot``3(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxPoints},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BoxMean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.QuartileMethod},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes the distribution of the input data as a box plot.

 A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.
 The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.

 The sample data from which statistics are computed is set in `x` for vertically spanning boxes and in `y` for horizontally spanning boxes.
 </summary>
 <param name="X">Sets the x sample data or coordinates</param>
 <param name="Y">Sets the y sample data or coordinates</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="FillColor">Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="MarkerColor">Sets the marker color.</param>
 <param name="Marker">Sets the marker for the box (use this for more finegrained control than the other marker-associated arguments).</param>// <param name="Opacity">Sets the opacity of this trace.</param>
 <param name="WhiskerWidth">Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</param>
 <param name="BoxPoints">If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the box(es) are shown with no sample points Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to "all" under the q1/median/q3 signature. Otherwise defaults to "outliers".</param>
 <param name="BoxMean">If "true", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If "sd" the standard deviation is also drawn. Defaults to "true" when `mean` is set. Defaults to "sd" when `sd` is set Otherwise defaults to "false".</param>
 <param name="Jitter">Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).</param>
 <param name="PointPos">Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</param>
 <param name="Orientation">Sets the orientation of the box(es). If "v" ("h"), the distribution is visualized along the vertical (horizontal).</param>
 <param name="OutlineColor">Sets the color of the box outline</param>
 <param name="OutlineWidth">Sets the width of the box outline</param>
 <param name="Outline">Sets the box outline (use this for more finegrained control than the other outline-associated arguments).</param>
 <param name="AlignmentGroup">Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</param>
 <param name="OffsetGroup">Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</param>
 <param name="Notched">Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 " IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to "false" unless `notchwidth` or `notchspan` is set.</param>
 <param name="NotchWidth">Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</param>
 <param name="QuartileMethod">Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Bar``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a bar chart, with bars plotted horizontally

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="keysValues">Sets the (key,value) pairs that are plotted as the size and key of each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Bar``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a bar chart, with bars plotted horizontally

 A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.
 </summary>
 <param name="values">Sets the values that are plotted as the size of each bar.</param>
 <param name="Keys">Sets the keys associated with each bar.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity of the trace.</param>
 <param name="MultiOpacity">Sets the Opacity of each individual bar.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale for the bars. To have an effect, `MarkerColor` must map to color scale values.</param>
 <param name="MarkerOutline">Sets the color of the bar outlines</param>
 <param name="MarkerPatternShape">Sets a pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets an individual pattern shape for each bar</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Area``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary> Creates an Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis.</summary>
 <param name="xy">Sets the x and y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.Area``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GroupNorm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary> Creates an Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis.</summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="StackGroup">Set several traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `Orientation` is Horizontal). Stacking also turns `fill` on by default and sets the default `mode` to "lines" irrespective of point count. ou can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order</param>
 <param name="Orientation">Sets the stacking direction. Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used.</param>
 <param name="GroupNorm">Sets the normalization for the sum of this `stackgroup. Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.AnnotatedHeatmap``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a annotated heatmap.

 A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.

 The annotated heatmap additionally contains annotation text on each datum.
 </summary>
 <param name="dataAnnotations">Sets the 2-dimensional z data, which will be visualized with the color scale together with the respective annotation text.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="UseWebGL">Wether or not to use WebGL to render this trace</param>
 <param name="ReverseYAxis">Wether or not to reverse the y axis. If true, (0,0) will lie on the top left and increase downwards.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart2D.Chart.AnnotatedHeatmap``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``2},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``5},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SmoothAlg},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a annotated heatmap.

 A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.

 The annotated heatmap additionally contains annotation text on each datum.
 </summary>
 <param name="zData">Sets the 2-dimensional z data, which will be visualized with the color scale.</param>
 <param name="annotationText">Sets the text to display as annotation for each datum.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the Opacity otf the trace.</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="XGap">Sets the horizontal gap (in pixels) between bricks.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="YGap">Sets the vertical gap (in pixels) between bricks.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the styles of the colorbar for this trace.</param>
 <param name="ColorScale">Sets the colorscale for this trace.</param>
 <param name="ShowScale">Wether or not to show the colorscale/colorbar</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="ZSmooth">Picks a smoothing algorithm use to smooth `z` data.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="UseWebGL">Wether or not to use WebGL to render this trace</param>
 <param name="ReverseYAxis">Wether or not to reverse the y axis. If true, (0,0) will lie on the top left and increase downwards.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Volume``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Caps},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Slices},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Surface},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a volume plot to visualize the volume of a 3D shape.

 Draws volume trace between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid.
 Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace.

 This plot is very similar to the `IsoSurface` plot. However, whereas isosurface plots show all surfaces with the same opacity, tweaking the opacityscale parameter of Volume plots results in a depth effect and better volume rendering.
 </summary>
 <param name="x">Sets the X coordinates of the vertices on X axis.</param>
 <param name="y">Sets the Y coordinates of the vertices on Y axis.</param>
 <param name="z">Sets the Z coordinates of the vertices on Z axis.</param>
 <param name="value">Sets the 4th dimension (value) of the vertices.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="IsoMin">Sets the minimum boundary for iso-surface plot.</param>
 <param name="IsoMax">Sets the maximum boundary for iso-surface plot.</param>
 <param name="Caps">Sets the caps (color-coded surfaces on the sides of the visualization domain)</param>
 <param name="Slices">Adds Slices through the volume</param>
 <param name="Surface">Sets the surface.</param>
 <param name="OpacityScale">Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Surface``5(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a surface plot.

 Surface plots plot a z value as a function of x and y, creating a three-dimensional surface.

 The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a 2D array.
 Coordinates in `x` and `y` can either be 1D arrays or 2D arrays (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step.
 The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a 2D array, where its bounds can be controlled using `cmin` and `cmax`.
 </summary>
 <param name="zData">2 dimensional data array representing the surface's z values</param>
 <param name="X">Sets the x coordinates.</param>
 <param name="Y">Sets the y coordinates.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Contours">Sets the contours on the surface</param>
 <param name="ColorScale">Sets the colorscale of the surface</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.StreamTube``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.StreamTubeStarts},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a streamtube plot, typically used to visualize flow in a vector field.

 Specify a vector field using 6 1D arrays of equal length:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, and `w`.

 By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value.
 To specify your own starting position, use `TubeStarts`.
 The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).
 </summary>
 <param name="xyzuvw">Sets the x, y, and z coordinates of the vector field and of the displayed cones together with the x, y, and z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="MaxDisplayed">The maximum number of displayed segments in a streamtube.</param>
 <param name="TubeStarts">Use this object to specify custom tube start positions</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.StreamTube``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{System.Tuple{``3,``4,``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.StreamTubeStarts},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a streamtube plot, typically used to visualize flow in a vector field.

 Specify a vector field using 6 1D arrays of equal length:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, and `w`.

 By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value.
 To specify your own starting position, use `TubeStarts`.
 The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).
 </summary>
 <param name="streamTubeXYZ">Sets the x, y, and z coordinates of the vector field and of the displayed cones.</param>
 <param name="streamTubeUVW">Sets the x, y, and z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="MaxDisplayed">The maximum number of displayed segments in a streamtube.</param>
 <param name="TubeStarts">Use this object to specify custom tube start positions</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.StreamTube``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.StreamTubeStarts},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a streamtube plot, typically used to visualize flow in a vector field.

 Specify a vector field using 6 1D arrays of equal length:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, and `w`.

 By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value.
 To specify your own starting position, use `TubeStarts`.
 The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).
 </summary>
 <param name="x">Sets the x coordinates of the vector field and of the displayed cones.</param>
 <param name="y">Sets the y coordinates of the vector field and of the displayed cones.</param>
 <param name="z">Sets the z coordinates of the vector field and of the displayed cones.</param>
 <param name="u">Sets the x components of the vector field.</param>
 <param name="v">Sets the y components of the vector field.</param>
 <param name="w">Sets the z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="MaxDisplayed">The maximum number of displayed segments in a streamtube.</param>
 <param name="TubeStarts">Use this object to specify custom tube start positions</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Scatter3D``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter3D plot.

 In general, Scatter3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension.

 Scatter3D charts are the basis of Point3D, Line3D, and Bubble3D Charts, and can be customized as such. We also provide abstractions for those: Chart.Line3D, Chart.Point3D, Chart.Bubble3D
 </summary>
 <param name="xyz">Sets the x, y, and z coordinates of the plotted data.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Scatter3D``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter3D plot.

 In general, Scatter3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension.

 Scatter3D charts are the basis of Point3D, Line3D, and Bubble3D Charts, and can be customized as such. We also provide abstractions for those: Chart.Line3D, Chart.Point3D, Chart.Bubble3D
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="z">Sets the z coordinates of the plotted data.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Point3D``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Point3D plot.

 Point3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points.
 </summary>
 <param name="xyz">Sets the x, y, and z coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Point3D``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Point3D plot.

 Point3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="z">Sets the z coordinates of the plotted data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Mesh3D``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TriangulationAlgorithm},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes a 3D mesh.

 Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and

 (1) a sets of `i`, `j`, `k` indices or

 (2) Delaunay triangulation or

 (3) the Alpha-shape algorithm or

 (4) the Convex-hull algorithm
 </summary>
 <param name="xyz">Sets the X, Y, and Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="I">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "first" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.</param>
 <param name="J">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "second" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.</param>
 <param name="K">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "third" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Color">Sets the color of the whole mesh</param>
 <param name="Contour">Sets the style and visibility of contours</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="FlatShading">Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</param>
 <param name="TriangulationAlgorithm">Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Mesh3D``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contour},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TriangulationAlgorithm},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Visualizes a 3D mesh.

 Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and

 (1) a sets of `i`, `j`, `k` indices or

 (2) Delaunay triangulation or

 (3) the Alpha-shape algorithm or

 (4) the Convex-hull algorithm
 </summary>
 <param name="x">Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="y">Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="z">Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</param>
 <param name="I">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "first" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.</param>
 <param name="J">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "second" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.</param>
 <param name="K">A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "third" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="Color">Sets the color of the whole mesh</param>
 <param name="Contour">Sets the style and visibility of contours</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="FlatShading">Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</param>
 <param name="TriangulationAlgorithm">Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Line3D``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Line3D plot.

 Line3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as a line connecting the individual datums.
 </summary>
 <param name="xyz">Sets the x, y, and z coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Line3D``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Line3D plot.

 Line3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as a line connecting the individual datums.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="z">Sets the z coordinates of the plotted data.</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.IsoSurface``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Caps},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Slices},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Surface},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a isosurface plot to visualize the volume of a 3D shape.

 An isosurface is a surface that represents points of a constant value (e.g. pressure, temperature, velocity, density) within a volume of space.

 Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid.
 Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace.

 This plot is very similar to the `Volume` plot. However it shows all surfaces with the same opacity.
 </summary>
 <param name="x">Sets the X coordinates of the vertices on X axis.</param>
 <param name="y">Sets the Y coordinates of the vertices on Y axis.</param>
 <param name="z">Sets the Z coordinates of the vertices on Z axis.</param>
 <param name="value">Sets the 4th dimension (value) of the vertices.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="IsoMin">Sets the minimum boundary for iso-surface plot.</param>
 <param name="IsoMax">Sets the maximum boundary for iso-surface plot.</param>
 <param name="Caps">Sets the caps (color-coded surfaces on the sides of the visualization domain)</param>
 <param name="Slices">Adds Slices through the volume</param>
 <param name="Surface">Sets the surface.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Cone``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeSizeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeAnchor},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a cone plot, typically used to visualize vector fields.

 Specify a vector field using 6 1D arrays:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, `w`.

 The cones are drawn exactly at the positions given by `x`, `y` and `z`.
 </summary>
 <param name="xyzuvw">Sets the x, y, and z coordinates of the vector field and of the displayed cones together with the x, y, and z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="SizeMode">Determines whether `sizeref` is set as a "scaled" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as "absolute" value (in the same units as the vector field).</param>
 <param name="ConeAnchor">Sets the cones' anchor with respect to their x/y/z positions. Note that "cm" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Cone``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{System.Tuple{``3,``4,``5}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeSizeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeAnchor},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a cone plot, typically used to visualize vector fields.

 Specify a vector field using 6 1D arrays:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, `w`.

 The cones are drawn exactly at the positions given by `x`, `y` and `z`.
 </summary>
 <param name="coneXYZ">Sets the x, y, and z coordinates of the vector field and of the displayed cones.</param>
 <param name="coneUVW">Sets the x, y, and z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="SizeMode">Determines whether `sizeref` is set as a "scaled" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as "absolute" value (in the same units as the vector field).</param>
 <param name="ConeAnchor">Sets the cones' anchor with respect to their x/y/z positions. Note that "cm" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Cone``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``6},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeSizeMode},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConeAnchor},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a cone plot, typically used to visualize vector fields.

 Specify a vector field using 6 1D arrays:

 3 position arrays `x`, `y` and `z` and

 3 vector component arrays `u`, `v`, `w`.

 The cones are drawn exactly at the positions given by `x`, `y` and `z`.
 </summary>
 <param name="x">Sets the x coordinates of the vector field and of the displayed cones.</param>
 <param name="y">Sets the y coordinates of the vector field and of the displayed cones.</param>
 <param name="z">Sets the z coordinates of the vector field and of the displayed cones.</param>
 <param name="u">Sets the x components of the vector field.</param>
 <param name="v">Sets the y components of the vector field.</param>
 <param name="w">Sets the z components of the vector field.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorScale">Sets the colorscale</param>
 <param name="ShowScale">Wether or not to show the colorbar/colorscale</param>
 <param name="ColorBar">Sets the colorbar</param>
 <param name="SizeMode">Determines whether `sizeref` is set as a "scaled" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as "absolute" value (in the same units as the vector field).</param>
 <param name="ConeAnchor">Sets the cones' anchor with respect to their x/y/z positions. Note that "cm" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Bubble3D``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Bubble3D plot.

 Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.
 </summary>
 <param name="xyzsizes">Sets the x, y, and z coordinates together with the point size.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Bubble3D``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Bubble3D plot.

 Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.
 </summary>
 <param name="xyz">Sets the x, y, and z coordinates of the plotted data.</param>
 <param name="sizes">Sets the size of the points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.Chart3D.Chart.Bubble3D``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Projection},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Bubble3D plot.

 Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.
 </summary>
 <param name="x">Sets the x coordinates of the plotted data.</param>
 <param name="y">Sets the y coordinates of the plotted data.</param>
 <param name="z">Sets the z coordinates of the plotted data.</param>
 <param name="sizes">Sets the size of the points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Projection">Sets the projection of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.SplinePolar``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar spline plot.

 LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a smoothed line.
 </summary>
 <param name="rTheta">Sets the radial and angular coordinates of the plotted data</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.SplinePolar``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar spline plot.

 LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a smoothed line.
 </summary>
 <param name="r">Sets the radial coordinates of the plotted data</param>
 <param name="theta">Sets the angular coordinates of the plotted data</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.ScatterPolar``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar scatter plot.

 In general, ScatterPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales.

 ScatterPolar charts are the basis of PointPolar, LinePolar, SplinePolar, and BubblePolar Charts, and can be customized as such. We also provide abstractions for those: Chart.PointPolar, Chart.LinePolar, Chart.SplinePolar , Chart.BubblePolar
 </summary>
 <param name="rTheta">Sets the radial and angular coordinates of the plotted data</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.ScatterPolar``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar scatter plot.

 In general, ScatterPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales.

 ScatterPolar charts are the basis of PointPolar, LinePolar, SplinePolar, and BubblePolar Charts, and can be customized as such. We also provide abstractions for those: Chart.PointPolar, Chart.LinePolar, Chart.SplinePolar , Chart.BubblePolar
 </summary>
 <param name="r">Sets the radial coordinates of the plotted data</param>
 <param name="theta">Sets the angular coordinates of the plotted data (in degrees)</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.PointPolar``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar point plot.

 PointPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales as points.
 </summary>
 <param name="rTheta">Sets the radial and angular coordinates of the plotted data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.PointPolar``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar point plot.

 PointPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales as points.
 </summary>
 <param name="r">Sets the radial coordinates of the plotted data</param>
 <param name="theta">Sets the angular coordinates of the plotted data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.LinePolar``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar line plot.

 LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a line.
 </summary>
 <param name="rTheta">Sets the radial and angular coordinates of the plotted data</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.LinePolar``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar line plot.

 LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a line.
 </summary>
 <param name="r">Sets the radial coordinates of the plotted data</param>
 <param name="theta">Sets the angular coordinates of the plotted data</param>
 <param name="ShowMarkers">Wether to show markers for the datums additionally to the line</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.BubblePolar``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar bubble chart.

 BubblePolar Plots plot two-dimensional data on on a polar coordinate system comprised of angular and radial position scales, additionally using the points size as a 4th dimension.
 </summary>
 <param name="rThetaSizes">Sets the radial and angular coordinates of the plotted data together with the sizes of the points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.BubblePolar``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar bubble chart.

 BubblePolar Plots plot two-dimensional data on on a polar coordinate system comprised of angular and radial position scales, additionally using the points size as a 4th dimension.
 </summary>
 <param name="r">Sets the radial coordinates of the plotted data</param>
 <param name="theta">Sets the angular coordinates of the plotted data</param>
 <param name="sizes">Sets the bubble size of the plotted data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseWebGL">If true, plotly.js will use the WebGL engine to render this chart. use this when you want to render many objects at once.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.BarPolar``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar bar chart.

 A polar bar chart is a chart that presents categorical data on a polar coordinate system with bars with radial height proportional to the values that they represent.
 </summary>
 <param name="rTheta">Sets the radial height and angular position of the bars</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale of the bars</param>
 <param name="MarkerOutline">Sets the color of the bar outline</param>
 <param name="MarkerPatternShape">Sets the pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets individual pattern shapes for the bars</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartPolar.Chart.BarPolar``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PatternShape},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.PatternShape}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a polar bar chart.

 A polar bar chart is a chart that presents categorical data on a polar coordinate system with bars with radial height proportional to the values that they represent.
 </summary>
 <param name="r">Sets the radial height of the bars</param>
 <param name="theta">sets the angular position of the bars</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="MarkerColor">Sets the color of the bars</param>
 <param name="MarkerColorScale">Sets the colorscale of the bars</param>
 <param name="MarkerOutline">Sets the color of the bar outline</param>
 <param name="MarkerPatternShape">Sets the pattern shape for all bars</param>
 <param name="MultiMarkerPatternShape">Sets individual pattern shapes for the bars</param>
 <param name="MarkerPattern">Sets the marker pattern (use this for more finegrained control than the other pattern-associated arguments).</param>
 <param name="Marker">Sets the marker for the bars (use this for more finegrained control than the other marker-associated arguments).</param>
 <param name="Base">Sets where the bar base is drawn (in position axis units).</param>
 <param name="Width">Sets the bar width (in position axis units) of all bars.</param>
 <param name="MultiWidth">Sets the individual bar width (in position axis units) for each bar.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ScatterMapbox``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a ScatterMapbox chart, where data is visualized on a geographic map using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.

 ScatterMapbox charts are the basis of PointMapbox, LineMapbox, and BubbleMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox, Chart.LineMapbox, Chart.BubbleMapbox
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ScatterMapbox``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a ScatterMapbox chart, where data is visualized on a geographic map using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.

 ScatterMapbox charts are the basis of PointMapbox, LineMapbox, and BubbleMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox, Chart.LineMapbox, Chart.BubbleMapbox
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ScatterGeo``1(System.Collections.Generic.IEnumerable{System.String},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a ScatterGeo chart, where data is visualized using plotly's base geo map.

 In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.

 ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo
 </summary>
 <param name="locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ScatterGeo``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a ScatterGeo chart, where data is visualized using plotly's base geo map.

 In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.

 ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ScatterGeo``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a ScatterGeo chart, where data is visualized using plotly's base geo map.

 In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.

 ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.PointMapbox``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a PointMapbox chart, where data is visualized on a geographic map as points using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.PointMapbox``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a PointMapbox chart, where data is visualized on a geographic map as points using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.PointGeo``1(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a PointGeo chart.

 In general, PointGeo Plots plot two-dimensional data as points using plotly's base geo map.
 </summary>
 <param name="locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.PointGeo``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a PointGeo chart.

 In general, PointGeo Plots plot two-dimensional data as points using plotly's base geo map.
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.PointGeo``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a PointGeo chart.

 In general, PointGeo Plots plot two-dimensional data as points using plotly's base geo map.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.LineMapbox``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a LineMapbox chart, where data is visualized on a geographic map connected by a line using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="ShowMarkers"></param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.LineMapbox``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a LineMapbox chart, where data is visualized on a geographic map connected by a line using mapbox.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="ShowMarkers"></param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.LineGeo``1(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a LineGeo chart.

 In general, LineGeo Plots plot two-dimensional data connected by lines using plotly's base geo map.
 </summary>
 <param name="locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="ShowMarkers"></param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.LineGeo``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a LineGeo chart.

 In general, LineGeo Plots plot two-dimensional data connected by lines using plotly's base geo map.
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="ShowMarkers"></param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.LineGeo``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a LineGeo chart.

 In general, LineGeo Plots plot two-dimensional data connected by lines using plotly's base geo map.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="ShowMarkers"></param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.DensityMapbox``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="lonlat">Sets the (longitude,latitude) coordinates (in degrees East, degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opacity of the trace</param>
 <param name="Z">Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</param>
 <param name="Radius">Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="ColorScale">Sets the colorscale.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.DensityMapbox``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opacity of the trace</param>
 <param name="Z">Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</param>
 <param name="Radius">Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="ColorScale">Sets the colorscale.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ChoroplethMapbox``2(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Object,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a choropleth map using mapbox.

 A choropleth map is a type of thematic map in which a set of pre-defined areas is colored or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.

 GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="z">The color values for each location</param>
 <param name="geoJson">Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example "properties.name".</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="ColorScale">Sets the colorscale.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.ChoroplethMap``2(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a choropleth map using plotly's base geo map.

 A choropleth map is a type of thematic map in which a set of pre-defined areas is colored or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.
 </summary>
 <param name="locations">Sets the locations which will be colored. See LocationMode for more info.</param>
 <param name="z">The color values for each location</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="Text">Sets the text elements associated with each location.</param>
 <param name="MultiText">Sets the text elements associated with each location.</param>
 <param name="ColorBar">Sets the colorbar.</param>
 <param name="ColorScale">Sets the colorscale.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true.</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.BubbleMapbox``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a BubbleMapbox chart, where data is visualized on a geographic map as points using mapbox, additionally using the point size as a third dimension.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="lonlatsizes">Sets the (longitude,latitude) coordinates (in degrees East, degrees North) together with the point size.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.BubbleMapbox``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a BubbleMapbox chart, where data is visualized on a geographic map as points using mapbox, additionally using the point size as a third dimension.

 Customize the mapbox layers, style, etc. by using Chart.withMapbox.

 You might need a Mapbox token, which you can also configure with Chart.withMapbox.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="sizes">Sets the size of the points.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="Below">Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.BubbleGeo``3(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a BubbleGeo chart.

 In general, BubbleGeo Plots plot two-dimensional data as points using plotly's base geo map, additionally using the point size as a third dimension.
 </summary>
 <param name="locations">Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</param>
 <param name="sizes">Sets the size of the points.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.BubbleGeo``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a BubbleGeo chart.

 In general, BubbleGeo Plots plot two-dimensional data as points using plotly's base geo map, additionally using the point size as a third dimension.
 </summary>
 <param name="lonlatsizes">Sets the (longitude,latitude) coordinates (in degrees East, degrees North) together with the point sizes.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartMap.Chart.BubbleGeo``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LocationFormat},Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a BubbleGeo chart.

 In general, BubbleGeo Plots plot two-dimensional data as points using plotly's base geo map, additionally using the point size as a third dimension.
 </summary>
 <param name="longitudes">Sets the longitude coordinates (in degrees East).</param>
 <param name="latitudes">Sets the latitude coordinates (in degrees North).</param>
 <param name="sizes">Sets the size of the points.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LocationMode">Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</param>
 <param name="GeoJson">Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".</param>
 <param name="FeatureIdKey">Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.ScatterTernary``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter plot on a ternary coordinate system

 In general, ScatterTernary creates a barycentric plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.

 ScatterTernary charts are the basis of PointTernary, LineTernary, and BubbleTernary Charts, and can be customized as such. We also provide abstractions for those: Chart.LineTernary, Chart.PointTernary, Chart.BubbleTernary
 </summary>
 <param name="abc">Sets the quantities of the a, b, and c components</param>
 <param name="Mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.ScatterTernary``5(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Mode},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter plot on a ternary coordinate system

 In general, ScatterTernary creates a barycentric plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.

 ScatterTernary charts are the basis of PointTernary, LineTernary, and BubbleTernary Charts, and can be customized as such. We also provide abstractions for those: Chart.LineTernary, Chart.PointTernary, Chart.BubbleTernary
 </summary>
 <param name="A">Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="B">Sets the quantity of component `b` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="C">Sets the quantity of component `c` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="Sum">The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use `ternary&lt;i&gt;.sum`</param>
 <param name="Mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.PointTernary``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a point plot on a ternary coordinate system

 In general, PointTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 </summary>
 <param name="abc">Sets the quantities of the a, b, and c components</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.PointTernary``5(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a point plot on a ternary coordinate system

 In general, PointTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 </summary>
 <param name="A">Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="B">Sets the quantity of component `b` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="C">Sets the quantity of component `c` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="Sum">The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use `ternary&lt;i&gt;.sum`</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.LineTernary``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a line plot on a ternary coordinate system

 In general, LineTernary creates a barycentric line plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 </summary>
 <param name="abc">Sets the quantities of the a, b, and c components</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.LineTernary``5(Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a line plot on a ternary coordinate system

 In general, LineTernary creates a barycentric line plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 </summary>
 <param name="A">Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="B">Sets the quantity of component `b` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="C">Sets the quantity of component `c` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="Sum">The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use `ternary&lt;i&gt;.sum`</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.BubbleTernary``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a bubble plot on a ternary coordinate system

 A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 In general, BubbleTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 A 4th data dimension is used to determine the size of the points.
 </summary>
 <param name="abcSizes">Sets the quantities of the a, b, and c components</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartTernary.Chart.BubbleTernary``5(System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>

 A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 In general, BubbleTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.
 A 4th data dimension is used to determine the size of the points.
 </summary>
 <param name="sizes">Sets the bubble size of the plotted data</param>
 <param name="A">Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="B">Sets the quantity of component `b` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="C">Sets the quantity of component `c` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</param>
 <param name="Sum">The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use `ternary&lt;i&gt;.sum`</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.SplineCarpet``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a spline plot that lies on a specified carpet.

 In general, SplineCarpet creates a spline plot that uses the given carpet identifier as coordinate system.
 A spline chart is a line chart in which data points are connected by smoothed curves.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="ab">Sets the a and b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.SplineCarpet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a spline plot that lies on a specified carpet.

 In general, SplineCarpet creates a spline plot that uses the given carpet identifier as coordinate system.
 A spline chart is a line chart in which data points are connected by smoothed curves.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="a">Sets the a-axis coordinates on the carpet.</param>
 <param name="b">Sets the b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Smoothing">Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).  Use values between 0. and 1.3</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.ScatterCarpet``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a scatter plot that lies on a specified carpet.

 In general, ScatterCarpet creates a plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.

 ScatterCarpet charts are the basis of PointCarpet, LineCarpet, and BubbleCarpet Charts, and can be customized as such. We also provide abstractions for those: Chart.LineCarpet, Chart.PointCarpet, Chart.BubbleCarpet
 </summary>
 <param name="ab">Sets the a and b-axis coordinates on the carpet.</param>
 <param name="mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.ScatterCarpet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a scatter plot that lies on a specified carpet.

 In general, ScatterCarpet creates a plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.

 ScatterCarpet charts are the basis of PointCarpet, LineCarpet, and BubbleCarpet Charts, and can be customized as such. We also provide abstractions for those: Chart.LineCarpet, Chart.PointCarpet, Chart.BubbleCarpet
 </summary>
 <param name="a">Sets the a-axis coordinates on the carpet.</param>
 <param name="b">Sets the b-axis coordinates on the carpet.</param>
 <param name="mode">Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.PointCarpet``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a point plot that lies on a specified carpet.

 In general, PointCarpet creates a point plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="ab">Sets the a and b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.PointCarpet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a point plot that lies on a specified carpet.

 In general, PointCarpet creates a point plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="a">Sets the a-axis coordinates on the carpet.</param>
 <param name="b">Sets the b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.LineCarpet``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a line plot that lies on a specified carpet.

 In general, LineCarpet creates a line plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="ab">Sets the a and b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.LineCarpet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a line plot that lies on a specified carpet.

 In general, LineCarpet creates a line plot that uses the given carpet identifier as coordinate system.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="a">Sets the a-axis coordinates on the carpet.</param>
 <param name="b">Sets the b-axis coordinates on the carpet.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="ShowMarkers">Wether to show markers for the individual data points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.ContourCarpet``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourColoring},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstraintOperation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a contour chart that lies on a specified carpet.

 Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis.
 </summary>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="abz">Sets the a and b coordinates together with the respective z value</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="ColorScale">Sets the colorscale of this trace.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="ContourLineDash">Sets the contour line dash style</param>
 <param name="ContourLineColor">Sets the contour line color</param>
 <param name="ContourLineSmoothing">Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.</param>
 <param name="ContourLine">Sets the contour lines (use this for more finegrained control than the other contourline-associated arguments).</param>
 <param name="ContoursColoring">Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.</param>
 <param name="ContoursOperation">Sets the constraint operation. "=" keeps regions equal to `value` "&lt;" and "&lt;=" keep regions less than `value` "&gt;" and "&gt;=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</param>
 <param name="ContoursType">If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</param>
 <param name="ShowContourLabels">Determines whether to label the contour lines with their values.</param>
 <param name="ContourLabelFont">Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</param>
 <param name="Contours">Sets the styles of the contours (use this for more finegrained control than the other contour-associated arguments).</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.ContourCarpet``4(System.Collections.Generic.IEnumerable{``0},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{``3},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourColoring},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ConstraintOperation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.ContourType},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Contours},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a contour chart that lies on a specified carpet.

 Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis.
 </summary>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="z">Sets the z data.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="A">Sets the a coordinates.</param>
 <param name="B">Sets the b coordinates.</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="ColorBar">Sets the colorbar of this trace.</param>
 <param name="ColorScale">Sets the colorscale of this trace.</param>
 <param name="ShowScale">Determines whether or not a colorbar is displayed for this trace.</param>
 <param name="ReverseScale">Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</param>
 <param name="Transpose">Transposes the z data.</param>
 <param name="ContourLineDash">Sets the contour line dash style</param>
 <param name="ContourLineColor">Sets the contour line color</param>
 <param name="ContourLineSmoothing">Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.</param>
 <param name="ContourLine">Sets the contour lines (use this for more finegrained control than the other contourline-associated arguments).</param>
 <param name="ContoursColoring">Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.</param>
 <param name="ContoursOperation">Sets the constraint operation. "=" keeps regions equal to `value` "&lt;" and "&lt;=" keep regions less than `value` "&gt;" and "&gt;=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</param>
 <param name="ContoursType">If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</param>
 <param name="ShowContourLabels">Determines whether to label the contour lines with their values.</param>
 <param name="ContourLabelFont">Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</param>
 <param name="Contours">Sets the styles of the contours (use this for more finegrained control than the other contour-associated arguments).</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.Carpet``8(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``6}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``7}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.LinearAxisId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a carpet in a 2D coordinate system to be used as additional coordinate system in a carpet plot.

 A  carpet plot illustrates the interaction between two or more independent variables and one or more dependent variables in a two-dimensional plot.
 Besides the ability to incorporate more variables, another feature that distinguishes a carpet plot from an equivalent contour plot or 3D surface plot is that a carpet plot can be used to more accurately interpolate data points.
 A conventional carpet plot can capture the interaction of up to three independent variables and three dependent variables and still be easily read and interpolated.

 Three-variable carpet plot (cheater plot):

 A carpet plot with two independent variables and one dependent variable is often called a cheater plot for the use of a phantom "cheater" axis instead of the horizontal axis. As a result of this missing axis, the values can be shifted horizontally such that the intersections line up vertically. This allows easy interpolation by having fixed horizontal intervals correspond to fixed intervals in both independent variables.

 Four-variable carpet plot (true carpet plot)

 Instead of using the horizontal axis to adjust the plot perspective and align carpet intersections vertically, the horizontal axis can be used to show the effects on an additional dependent variable.[5] In this case the perspective is fixed, and any overlapping cannot be adjusted. Because a true carpet plot represents two independent variables and two dependent variables simultaneously, there is no corresponding way to show the information on a conventional contour plot or 3D surface plot.

 (from https://en.wikipedia.org/wiki/Carpet_plot @ 1/11/2021)
 </summary>
 <param name="carpetId">An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="X">A one dimensional array of x coordinates matching the dimensions of `a` and `b`.</param>
 <param name="MultiX">A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.</param>
 <param name="Y">A one dimensional array of y coordinates matching the dimensions of `a` and `b`.</param>
 <param name="MultiY">A two dimensional array of y coordinates at each carpet point.</param>
 <param name="A">An array containing values of the first parameter value</param>
 <param name="B">An array containing values of the second parameter value</param>
 <param name="AAxis">Sets this carpet's a axis.</param>
 <param name="BAxis">Sets this carpet's b axis.</param>
 <param name="XAxis">Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.</param>
 <param name="YAxis">Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.</param>
 <param name="Color">Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</param>
 <param name="CheaterSlope">The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.BubbleCarpet``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a bubble chart that lies on a specified carpet.

 In general, BubbleCarpet creates a bubble chart that uses the given carpet identifier as coordinate system.

 A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="absizes">Sets the a and b-axis coordinates on the carpet and the associated bubble size.</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartCarpet.Chart.BubbleCarpet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a bubble chart that lies on a specified carpet.

 In general, BubbleCarpet creates a bubble chart that uses the given carpet identifier as coordinate system.

 A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 Wether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.
 </summary>
 <param name="a">Sets the a-axis coordinates on the carpet.</param>
 <param name="b">Sets the b-axis coordinates on the carpet.</param>
 <param name="sizes">Sets the bubble size of the plotted data</param>
 <param name="carpetAnchorId">The identifier of the carpet that this trace will lie on.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Treemap``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapRoot},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a treemap chart.
 Treemap charts visualize hierarchical data using nested rectangles.

 Same as Sunburst the hierarchy is defined by labels and parents attributes.
 Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.
 </summary>
 <param name="labelsparents">Sets the labels of each of the sectors and their respective parent sector.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Tiling">Sets the tiling for this trace.</param>
 <param name="PathBar">Sets the path bar for this trace.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Treemap``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.TreemapRoot},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a treemap chart.
 Treemap charts visualize hierarchical data using nested rectangles.

 Same as Sunburst the hierarchy is defined by labels and parents attributes.
 Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.
 </summary>
 <param name="labels">Sets the labels of each of the sectors.</param>
 <param name="parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Tiling">Sets the tiling for this trace.</param>
 <param name="PathBar">Sets the path bar for this trace.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Table``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``2},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.HorizontalAlign}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.HorizontalAlign},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.HorizontalAlign}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a table.

 The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a row-major order per default, ie. the grid is represented as a vector of row vectors.
 </summary>
 <param name="headerValues">Sets the values contained in the table header.</param>
 <param name="cellsValues">Sets the values contained in the table cells.</param>
 <param name="TransposeCells">Wether or not to transpose the cells (i.e. switch from row to column major)</param>
 <param name="HeaderAlign">Sets the alignment of the table header.</param>
 <param name="HeaderMultiAlign">Sets the alignment of the individual cells in the table header.</param>
 <param name="HeaderFillColor">Sets the fill color of the table header.</param>
 <param name="HeaderHeight">Sets the height of the table header.</param>
 <param name="HeaderOutlineColor">Sets the outline color of the table header cells.</param>
 <param name="HeaderOutlineWidth">Sets the outline width of the table header cells.</param>
 <param name="HeaderOutlineMultiWidth">Sets the outline width of the individual table header cells.</param>
 <param name="HeaderOutline">Sets the outline of the table header cells. (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="CellsAlign">Sets the alignment of the table cells.</param>
 <param name="CellsMultiAlign">Sets the alignment of the individual table cells.</param>
 <param name="CellsFillColor">Sets the fill color of the table cells.</param>
 <param name="CellsHeight">Sets the height color of the table cells.</param>
 <param name="CellsOutlineColor">Sets the outline color color of the table cells.</param>
 <param name="CellsOutlineWidth">Sets the outline width of the table cells.</param>
 <param name="CellsOutlineMultiWidth">Sets the outline width of the individual table cells.</param>
 <param name="CellsOutline">Sets the outline of the table cells. (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ColumnOrder">Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.</param>
 <param name="ColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="MultiColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Table(Plotly.NET.TraceObjects.TableCells,Plotly.NET.TraceObjects.TableCells,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a table.

 The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a row-major order per default, ie. the grid is represented as a vector of row vectors.
 </summary>
 <param name="header">Sets the header of the table</param>
 <param name="cells">Sets the cells of the table</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="ColumnOrder">Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.</param>
 <param name="ColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="MultiColumnWidth">The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Sunburst``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstRoot},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstLeaf},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a sunburst chart, which visualizes hierarchical data spanning outward radially from root to leaves.

 The hierarchy is defined by labels and parents attributes. The root starts from the center and children are added to the outer rings.
 </summary>
 <param name="labelsparents">Sets the labels of each of the sectors and their respective parent sector.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Leaf">Sets the styles fot the leaves of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="Rotation">Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Sunburst``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstRoot},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.SunburstLeaf},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a sunburst chart, which visualizes hierarchical data spanning outward radially from root to leaves.

 The hierarchy is defined by labels and parents attributes. The root starts from the center and children are added to the outer rings.
 </summary>
 <param name="labels">Sets the labels of each of the sectors.</param>
 <param name="parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Leaf">Sets the styles fot the leaves of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="Rotation">Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Sankey``3(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32}},System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.Colorscale}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a sankey diagram.

 A Sankey diagram is a flow diagram, in which the width of arrows is proportional to the flow quantity.

 Sankey diagrams visualize the contributions to a flow by defining source to represent the source node, target for the target node, value to set the flow volume, and label that shows the node name.        /// </summary>
 <param name="nodeLabels">Sets the labels of the nodes in the sankey diagram</param>
 <param name="linkedNodeIds">(source, target) tuples which indicate connected nodes. These values map to the index in `nodeLabels`</param>
 <param name="linkValues">The values for the links in the sankey diagram.</param>
 <param name="NodeColor">Sets the color of the nodes in the sankey diagram.</param>
 <param name="NodeOutlineColor">Sets the color of the node outlines in the sankey diagram.</param>
 <param name="NodeOutlineWidth">Sets the outline width of the nodes in the sankey diagram.</param>
 <param name="NodeThickness">Sets the thickness of the nodes in the sankey diagram.</param>
 <param name="NodeGroups">Sets groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.</param>
 <param name="LinkColor">Sets the color of the links in the sankey diagram.</param>
 <param name="LinkColorScales">Sets the colorscale of the links in the sankey diagram.</param>
 <param name="LinkOutlineColor">Sets the outline color of the links in the sankey diagram.</param>
 <param name="LinkOutlineWidth">Sets the outline width of the links in the sankey diagram.</param>
 <param name="LinkLabels">Sets the labels of the links in the sankey diagram.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Ids">Assigns id labels to each datum.</param>
 <param name="Orientation">Sets the orientation of the Sankey diagram.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="Arrangement">If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.</param>
 <param name="ValueFormat">Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</param>
 <param name="ValueSuffix">Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Sankey``1(Plotly.NET.TraceObjects.SankeyNodes,Plotly.NET.TraceObjects.SankeyLinks,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a sankey diagram.

 A Sankey diagram is a flow diagram, in which the width of arrows is proportional to the flow quantity.

 Sankey diagrams visualize the contributions to a flow by defining source to represent the source node, target for the target node, value to set the flow volume, and label that shows the node name.
 </summary>
 <param name="nodes">Sets the nodes of the Sankey plot.</param>
 <param name="links">Sets the links between nodes of the Sankey plot.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Ids">Assigns id labels to each datum.</param>
 <param name="Orientation">Sets the orientation of the Sankey diagram.</param>
 <param name="TextFont">Sets the text font of this trace.</param>
 <param name="Arrangement">If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.</param>
 <param name="ValueFormat">Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</param>
 <param name="ValueSuffix">Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Pie``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a pie chart.

 A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.
 In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.
 </summary>
 <param name="valuesLabels">Sets the values and labels of the sectors. If label entries are duplicated, the associated values are summed.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Pull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="MultiPull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Direction">Specifies the direction at which succeeding sectors follow one another.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</param>
 <param name="Rotation">Instead of the first slice starting at 12 o'clock, rotate to some other angle.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Pie``3(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a pie chart.

 A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.
 In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.
 </summary>
 <param name="values">Sets the values of the sectors</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Labels">Sets the sector labels. If `labels` entries are duplicated, the associated `values` are summed.</param>
 <param name="Pull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="MultiPull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Direction">Specifies the direction at which succeeding sectors follow one another.</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</param>
 <param name="Rotation">Instead of the first slice starting at 12 o'clock, rotate to some other angle.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.ParallelCoord``2(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a parallel coordinates plot.

 Parallel coordinates are a common way of visualizing and analyzing high-dimensional datasets.

 To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.

 This visualization is closely related to time series visualization, except that it is applied to data where the axes do not correspond to points in time, and therefore do not have a natural order. Therefore, different axis arrangements may be of interest.
 </summary>
 <param name="keyValues">Sets the values for each dimension of the plot, together with the name of the respective dimension</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="LineColor">Sets the color of the lines that are connecting the datums on the dimensions</param>
 <param name="LineColorScale">Sets the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="ShowLineColorScale">Wether or not to show the colorbar of the lines that are connecting the datums on the dimensions</param>
 <param name="ReverseLineColorScale">Wether or not to reverse the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="Line">Sets the lines that are connecting the datums on the dimensions (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="LabelAngle">Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="LabelSide">Specifies the location of the `label`. "top" positions labels above, next to the title "bottom" positions labels below the graph Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="RangeFont">Sets the range font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.ParallelCoord(System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Side},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a parallel coordinates plot.

 Parallel coordinates are a common way of visualizing and analyzing high-dimensional datasets.

 To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.

 This visualization is closely related to time series visualization, except that it is applied to data where the axes do not correspond to points in time, and therefore do not have a natural order. Therefore, different axis arrangements may be of interest.
 </summary>
 <param name="dimensions">the dimensions of the plot, containing both dimension backdrop information and the associated data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="LineColor">Sets the color of the lines that are connecting the datums on the dimensions</param>
 <param name="LineColorScale">Sets the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="ShowLineColorScale">Wether or not to show the colorbar of the lines that are connecting the datums on the dimensions</param>
 <param name="ReverseLineColorScale">Wether or not to reverse the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="Line">Sets the lines that are connecting the datums on the dimensions (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="LabelAngle">Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="LabelSide">Specifies the location of the `label`. "top" positions labels above, next to the title "bottom" positions labels below the graph Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".</param>
 <param name="RangeFont">Sets the range font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.ParallelCategories``2(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SortAlgorithm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a parallel categories plot.

 The parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of
 multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles,
 where each rectangle corresponds to a discrete value taken on by that variable.
 The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.
 </summary>
 <param name="keyValues">Sets the values for each dimension of the plot, together with the name of the respective dimension</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Counts">The number of observations represented by each state. Defaults to 1 so that each state represents one observation</param>
 <param name="LineColor">Sets the color of the lines that are connecting the datums on the dimensions</param>
 <param name="LineShape">Sets the shape of the lines that are connecting the datums on the dimensions</param>
 <param name="LineColorScale">Sets the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="ShowLineColorScale">Wether or not to show the colorbar of the lines that are connecting the datums on the dimensions</param>
 <param name="ReverseLineColorScale">Wether or not to reverse the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="Line">Sets the lines that are connecting the datums on the dimensions (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="Arrangement">Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.</param>
 <param name="BundleColors">Sort paths so that like colors are bundled together within each category.</param>
 <param name="SortPaths">Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.ParallelCategories(System.Collections.Generic.IEnumerable{Plotly.NET.TraceObjects.Dimension},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.CategoryArrangement},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SortAlgorithm},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Font},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a parallel categories plot.

 The parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of
 multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles,
 where each rectangle corresponds to a discrete value taken on by that variable.
 The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.
 </summary>
 <param name="dimensions">the dimensions of the plot, containing both dimension backdrop information and the associated data</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Counts">The number of observations represented by each state. Defaults to 1 so that each state represents one observation</param>
 <param name="LineColor">Sets the color of the lines that are connecting the datums on the dimensions</param>
 <param name="LineShape">Sets the shape of the lines that are connecting the datums on the dimensions</param>
 <param name="LineColorScale">Sets the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="ShowLineColorScale">Wether or not to show the colorbar of the lines that are connecting the datums on the dimensions</param>
 <param name="ReverseLineColorScale">Wether or not to reverse the colorscale of the lines that are connecting the datums on the dimensions</param>
 <param name="Line">Sets the lines that are connecting the datums on the dimensions (use this for more finegrained control than the other line-associated arguments).</param>
 <param name="Arrangement">Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.</param>
 <param name="BundleColors">Sort paths so that like colors are bundled together within each category.</param>
 <param name="SortPaths">Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.</param>
 <param name="LabelFont">Sets the label font of this trace.</param>
 <param name="TickFont">Sets the tick font of this trace.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Indicator``1(System.IConvertible,Plotly.NET.StyleParam.IndicatorMode,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Range},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IndicatorAlignment},Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorDelta},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorNumber},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IndicatorGaugeShape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IndicatorGauge},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates an Indicator chart.

 An indicator is used to visualize a single `value` along with some contextual information such as `steps` or a `threshold`, using a combination of three visual elements: a number, a delta, and/or a gauge.
 Deltas are taken with respect to a `reference`.
 Gauges can be either angular or bullet (aka linear) gauges.
 </summary>
 <param name="value">Sets the number to be displayed.</param>
 <param name="mode">Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.</param>
 <param name="Range">Sets the Range of the Gauge axis</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover.</param>
 <param name="Title">Sets the title of this trace.</param>
 <param name="Domain">Sets the domain of this trace.</param>
 <param name="Align">Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered</param>
 <param name="DeltaReference"></param>
 <param name="Delta">Sets how the delta to the delta reference is displayed</param>
 <param name="Number">Sets the styles of the displayed number</param>
 <param name="GaugeShape">Sets the shape of the gauge</param>
 <param name="Gauge">Sets the styles of the gauge</param>
 <param name="ShowGaugeAxis">Wether or not to show the gauge axis</param>
 <param name="GaugeAxis">Sets the gauge axis</param>
 <param name="UseDefaults"></param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Icicle``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IcicleCount},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TilingFlip},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PathbarEdgeShape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleRoot},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates an icicle chart.

 Icicle charts visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles.
 The icicle sectors are determined by the entries in "labels" or "ids" and in "parents".
 </summary>
 <param name="labelsparents">Sets the labels of each of the sectors and their respective parent sector.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="TilingOrientation">Sets the orientation of the tiling.</param>
 <param name="TilingFlip">Sets the flip of the tiling: Determines if the positions obtained from solver are flipped on each axis.</param>
 <param name="Tiling">Sets the styles for the icicle tiling</param>
 <param name="PathBarEdgeShape">Sets the edge shape of the pathbar.</param>
 <param name="PathBar">Sets the pathbar</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Icicle``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``3}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``4},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``4}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.BranchValues},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.IcicleCount},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Orientation},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TilingFlip},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleTiling},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.PathbarEdgeShape},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pathbar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.IcicleRoot},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates an icicle chart.

 Icicle charts visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles.
 The icicle sectors are determined by the entries in "labels" or "ids" and in "parents".
 </summary>
 <param name="labels">Sets the labels of each of the sectors.</param>
 <param name="parents">Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</param>
 <param name="Values">Sets the values associated with each of the sectors.</param>
 <param name="Ids">Assigns id labels to each datum. These ids for object constancy of data points during animation.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionColorScale">Sets the colorscale for the section values</param>
 <param name="ShowSectionColorScale">Wether or not to show the section colorbar</param>
 <param name="ReverseSectionColorScale">Wether or not to show the section colorscale</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="BranchValues">Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</param>
 <param name="Count">Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.</param>
 <param name="TilingOrientation">Sets the orientation of the tiling.</param>
 <param name="TilingFlip">Sets the flip of the tiling: Determines if the positions obtained from solver are flipped on each axis.</param>
 <param name="Tiling">Sets the styles for the icicle tiling</param>
 <param name="PathBarEdgeShape">Sets the edge shape of the pathbar.</param>
 <param name="PathBar">Sets the pathbar</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Root">Sets the styles fot the root of this trace.</param>
 <param name="Level">Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</param>
 <param name="MaxDepth">Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.FunnelArea``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a FunnelArea chart.

 FunnelArea charts visualize stages in a process using area-encoded trapezoids, which can be used to show data in a part-to-whole representation similar to a piechart,
 wherein each item appears in a single stage. See also the "funnel" chart for a different approach to visualizing funnel data.
 </summary>
 <param name="valuesLabels">Sets the values and labels of the sectors. If label entries are duplicated, the associated values are summed.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="AspectRatio"></param>
 <param name="BaseRatio"></param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.FunnelArea``3(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a FunnelArea chart.

 FunnelArea charts visualize stages in a process using area-encoded trapezoids, which can be used to show data in a part-to-whole representation similar to a piechart,
 wherein each item appears in a single stage. See also the "funnel" chart for a different approach to visualizing funnel data.
 </summary>
 <param name="values">Sets the values of the sectors</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Labels">Sets the sector labels. If `labels` entries are duplicated, the associated `values` are summed.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="AspectRatio"></param>
 <param name="BaseRatio"></param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Doughnut``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a doughnut chart.

 A doughnut chart is a variation of the pie chart that has a fraction cut fron the center of the slices.
 </summary>
 <param name="valuesLabels">Sets the values and labels of the sectors. If label entries are duplicated, the associated values are summed.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Pull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="MultiPull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Direction">Specifies the direction at which succeeding sectors follow one another.</param>
 <param name="Rotation">Instead of the first slice starting at 12 o'clock, rotate to some other angle.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartDomain.Chart.Doughnut``3(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextInfo},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Direction},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a doughnut chart.

 A doughnut chart is a variation of the pie chart that has a fraction cut fron the center of the slices.
 </summary>
 <param name="values">Sets the values of the sectors</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="Hole">Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Labels">Sets the sector labels. If `labels` entries are duplicated, the associated `values` are summed.</param>
 <param name="Pull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="MultiPull">Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</param>
 <param name="Text">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="MultiText">Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.</param>
 <param name="TextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="MultiTextPosition">Sets the positions of the `text` elements with respects to the (x,y) coordinates.</param>
 <param name="SectionColors">Sets the colors associated with each section.</param>
 <param name="SectionOutlineColor">Sets the color of the section outline.</param>
 <param name="SectionOutlineWidth">Sets the width of the section outline.</param>
 <param name="SectionOutlineMultiWidth">Sets the width of each individual section outline.</param>
 <param name="SectionOutline">Sets the section outline (use this for more finegrained control than the other section outline-associated arguments).</param>
 <param name="Marker">Sets the marker of this trace.</param>
 <param name="TextInfo">Determines which trace information appear on the graph.</param>
 <param name="Direction">Specifies the direction at which succeeding sectors follow one another.</param>
 <param name="Rotation">Instead of the first slice starting at 12 o'clock, rotate to some other angle.</param>
 <param name="Sort">Determines whether or not the sectors are reordered from largest to smallest.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.ScatterSmith``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter plot on a smith coordinate system.

 In general, ScatterSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.

 ScatterSmith charts are the basis of PointSmith, LineSmith, and BubbleSmith Charts, and can be customized as such. We also provide abstractions for those: Chart.LineSmith, Chart.PointSmith, Chart.BubbleSmith
 </summary>
 <param name="realImag">Sets the real and imaginary components of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.ScatterSmith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Plotly.NET.StyleParam.Mode,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Scatter plot on a smith coordinate system.

 In general, ScatterSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.

 ScatterSmith charts are the basis of PointSmith, LineSmith, and BubbleSmith Charts, and can be customized as such. We also provide abstractions for those: Chart.LineSmith, Chart.PointSmith, Chart.BubbleSmith
 </summary>
 <param name="real">Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="imag">Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="mode">Determines the drawing mode for this scatter trace.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.PointSmith``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Point plot on a smith coordinate system.

 In general, ScatterPoint charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="realImag">Sets the real and imaginary components of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.PointSmith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Point plot on a smith coordinate system.

 In general, ScatterPoint charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="real">Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="imag">Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.LineSmith``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Line plot on a smith coordinate system.

 In general, LineSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as datums connected by a line. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="realImag">Sets the real and imaginary components of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="ShowMarkers">Wether or not to show markers for each datum.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.LineSmith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Fill},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Line plot on a smith coordinate system.

 In general, LineSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as datums connected by a line. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="real">Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="imag">Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="ShowMarkers">Wether or not to show markers for each datum.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="Fill">Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `FillColor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</param>
 <param name="FillColor">ets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.BubbleSmith``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Bubble plot on a smith coordinate system. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 In general, BubbleSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points of varying sizes. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="realImagSizes">Sets the real components of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart, as well as the size of the points.</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.ChartSmith.Chart.BubbleSmith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``2}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.TextPosition},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.TextPosition}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Marker},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
 Creates a Bubble plot on a smith coordinate system. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.

 In general, BubbleSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points of varying sizes. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.
 </summary>
 <param name="real">Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="imag">Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</param>
 <param name="sizes">Sets the size of the points</param>
 <param name="Name">Sets the trace name. The trace name appear as the legend item and on hover</param>
 <param name="ShowLegend">Determines whether or not an item corresponding to this trace is shown in the legend.</param>
 <param name="Opacity">Sets the opactity of the trace</param>
 <param name="MultiOpacity">Sets the opactity of individual datum markers</param>
 <param name="Text">Sets a text associated with each datum</param>
 <param name="MultiText">Sets individual text for each datum</param>
 <param name="TextPosition">Sets the position of text associated with each datum</param>
 <param name="MultiTextPosition">Sets the position of text associated with individual datum</param>
 <param name="MarkerColor">Sets the color of the marker</param>
 <param name="MarkerColorScale">Sets the colorscale of the marker</param>
 <param name="MarkerOutline">Sets the outline of the marker</param>
 <param name="MarkerSymbol">Sets the marker symbol for each datum</param>
 <param name="MultiMarkerSymbol">Sets the marker symbol for each individual datum</param>
 <param name="Marker">Sets the marker (use this for more finegrained control than the other marker-associated arguments)</param>
 <param name="LineColor">Sets the color of the line</param>
 <param name="LineColorScale">Sets the colorscale of the line</param>
 <param name="LineWidth">Sets the width of the line</param>
 <param name="LineDash">sets the drawing style of the line</param>
 <param name="Line">Sets the line (use this for more finegrained control than the other line-associated arguments)</param>
 <param name="UseDefaults">If set to false, ignore the global default settings set in `Defaults`</param>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithTernary(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.Ternary,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets the scene object with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithScene(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.Scene,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets the scene object with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithColorAxis(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.ColorAxis,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
<summary>
 Sets the color axis of the color axis with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithRadialAxis(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.RadialAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets the radial axis of the polar object with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithAngularAxis(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.AngularAxis,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets the angular axis of the polar object with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithPolar(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.Polar,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets the polar object with the given id on the chart layout
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.ShowAsImage(Plotly.NET.GenericChart.GenericChart,Plotly.NET.StyleParam.ImageFormat)">
<summary>
 Show chart in browser
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.Show(Plotly.NET.GenericChart.GenericChart)">
<summary>
 Show chart in browser
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.SaveHtml(Plotly.NET.GenericChart.GenericChart,System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Save chart as html single page
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithMathTex(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Adds the necessary script tags to render tex strings to the chart&apos;s DisplayOptions
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithHeadTags(Plotly.NET.GenericChart.GenericChart,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Sets the given additional script tags on the chart&apos;s DisplayOptions. They will be included in the document&apos;s &lt;head&gt;
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithAdditionalHeadTags(Plotly.NET.GenericChart.GenericChart,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Adds the given additional script tags on the chart&apos;s DisplayOptions. They will be included in the document&apos;s &lt;head&gt;
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithDescription(Plotly.NET.GenericChart.GenericChart,Plotly.NET.ChartDescription)">
<summary>
 Show chart in browser
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithGeoStyle(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoFitBounds},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoResolution},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.GeoScope},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.GeoProjection},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.Domain},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.LayoutObjects.LinearAxis})">
<summary>
 Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)

 Parameters      :

 FitBounds       : Determines if and how this subplot&apos;s view settings are auto-computed to fit trace data

 Resolution      : Sets the resolution of the base layers

 Scope           : Set the scope of the map.

 Projection      : Determines the type of projection used to display the map

 Center          : Sets the (lon,lat) coordinates of the map&apos;s center. By default, the map&apos;s longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise. For all projection types, the map&apos;s latitude center lies at the middle of the latitude range by default.

 Visible         : Wether or not the base layers are visible

 Domain          : The domain of this geo subplot

 ShowCoastLine   : Sets whether or not the coastlines are drawn.

 CoastLineColor  : Sets the coastline color.

 CoastLineWidth  : Sets the coastline stroke width (in px).

 ShowLand        : Sets whether or not land masses are filled in color.

 LandColor       : Sets the land mass color.

 ShowOcean       : Sets whether or not oceans are filled in color.

 OceanColor      : Sets the ocean color

 ShowLakes       : Sets whether or not lakes are drawn.

 LakeColor       : Sets the color of the lakes.

 ShowRivers      : Sets whether or not rivers are drawn.

 RiverColor      : Sets color of the rivers.

 RiverWidth      : Sets the stroke width (in px) of the rivers.

 ShowCountries   : Sets whether or not country boundaries are drawn.

 CountryColor    : Sets line color of the country boundaries.

 CountryWidth    : Sets line width (in px) of the country boundaries.

 ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.

 SubunitColor    : Sets the color of the subunits boundaries.

 SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.

 ShowFrame       : Sets whether or not a frame is drawn around the map.

 FrameColor      : Sets the color the frame.

 FrameWidth      : Sets the stroke width (in px) of the frame.

 BgColor         : Set the background color of the map

 LatAxis         : Sets the latitudinal axis for this geo trace

 LonAxis         : Sets the longitudinal axis for this geo trace
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithMapbox(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.Mapbox,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets a mapbox for the given chart (will only work with traces supporting mapboxes, e.g. choroplethmapbox, scattermapbox)
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithMap(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.Geo,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithXAxisRangeSlider(Plotly.NET.GenericChart.GenericChart,Plotly.NET.LayoutObjects.RangeSlider,Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId})">
<summary>
 Sets the range slider for the xAxis
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithZErrorStyle``2(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Apply styling to the zError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithZError(Plotly.NET.GenericChart.GenericChart,Plotly.NET.TraceObjects.Error)">
<summary>
 Apply styling to the zError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithYErrorStyle``2(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Apply styling to the yError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithYError(Plotly.NET.GenericChart.GenericChart,Plotly.NET.TraceObjects.Error)">
<summary>
 Apply styling to the yError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithXErrorStyle``2(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{``1}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Apply styling to the xError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithXError(Plotly.NET.GenericChart.GenericChart,Plotly.NET.TraceObjects.Error)">
<summary>
 Apply styling to the xError(s) of the chart as Object
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithLineStyle(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.DrawingStyle},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Shape},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Double})">
<summary>
 Apply styling to the Line(s) of the chart.
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithLine(Plotly.NET.GenericChart.GenericChart,Plotly.NET.Line)">
<summary>
 Apply styling to the Line(s) of the chart as Object.
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithMarkerStyle(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.Color}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.SubPlotId},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.ColorBar},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.Colorscale},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Gradient},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Line},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Double}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.TraceObjects.Pattern},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSizeMode},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.StyleParam.MarkerSymbol3D},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{Plotly.NET.StyleParam.MarkerSymbol3D}},Microsoft.FSharp.Core.FSharpOption{Plotly.NET.Color},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Apply styling to the Marker(s) of the chart.
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithMarker(Plotly.NET.GenericChart.GenericChart,Plotly.NET.TraceObjects.Marker)">
<summary>
 Apply styling to the Marker(s) of the chart as Object.
</summary>
</member>
<member name="M:Plotly.NET.GenericChartExtensions.WithAxisAnchor(Plotly.NET.GenericChart.GenericChart,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Set the axis anchor id the trace is belonging to
</summary>
</member>
<member name="T:Plotly.NET.GenericChartExtensions">
<summary>
Extension methods for providing a Plotly.NET fluent interface pattern for C#
</summary>
</member>
</members>
</doc>
